<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>阿Q精神胜利法</title>
      <link href="/posts/40edf1cf.html"/>
      <url>/posts/40edf1cf.html</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://chn.oversea.cnki.net/KCMS/detail/detail.aspx?dbcode=CJFD&dbname=CJFD2008&filename=FJSX200803012&uniplatform=OVERSEA&v=ONbX_BZRHth1GdEVx95JFTzk7l7Ny4eckKHDqbmLSiCptlkHLVBroa0bsH_IYQu4">对阿Q“精神胜利法”之深层心理分析 - 中国知网</a></li></ul><h2 id="对阿Q“精神胜利法”之深层心理分析"><a href="#对阿Q“精神胜利法”之深层心理分析" class="headerlink" title="对阿Q“精神胜利法”之深层心理分析"></a>对阿Q“精神胜利法”之深层心理分析</h2><h3 id="一、阿Q“精神胜利法”的心理特性"><a href="#一、阿Q“精神胜利法”的心理特性" class="headerlink" title="一、阿Q“精神胜利法”的心理特性"></a>一、阿Q“精神胜利法”的心理特性</h3><p>“精神胜利法”指的是用纯想象中的胜利，作为对实际失败的补偿的一种心理方式。具体说来，阿Q的“精神胜利法”主要有以下几个心理特性：</p><h4 id="1-1-屈从"><a href="#1-1-屈从" class="headerlink" title="1.1.屈从"></a>1.1.屈从</h4><p>阿Q也有自尊，也要面子。由于他头皮上的癞疮疤，他讳说“癞”以及一切近于“赖”的音，后来推而广之，“光”也讳，再后来，连“灯”都讳了。起先，谁一犯讳，不问有心无心，阿Q会全疤通红地发起怒来，估量了对手，口讷的他便骂，气力小的他便打。可是由于体质特性，他总是吃亏的时候多。后来，每当阿Q被人揪住黄辫子的时候（欲往壁上撞），阿Q屈从了，他两只手都捏住自己的辫根，歪着头，说道：“打虫豸，好不好?我是虫豸——还不放么?”为了保存自己，阿Q只能无奈地选择屈从。霍妮认为在屈从型身上“有许多被强力压制下去的攻击性倾向。”屈从型的人们易于招致欺侮而使敌意有增无减。由于屈从型的人需要屈服，为了心理的平衡，需要安全地释放攻击性。荣格认为，意识和无意识并不互相矛盾，而是相辅相承的。他认为补偿是心理的功能平衡，有意识活动是无意识定势的平衡。他说：“我特别使用‘补偿’这个词，而没有使用‘对立的’这个词，因为意识和无意识不是处于必然反对的立场，而是互为补充的，以便构成一个整体，这就是自我本身。换句话说，屈从并不是避免不安全感与焦虑的唯一办法，潜在的无意识会使人有意识地寻找一种可以补偿自己内心自卑、焦虑、不安全感以维护自尊方法。美国著名心理学家E·贝克尔认为，人试图从无意识中抹去自己内心的自卑感。把人处境的绝望、不安全感掩盖起来，由此获取基本的自我价值感，意义感和力量感的人格是一种经典意义上的人格，这种人格实际上是一种防御机制，带有神经症倾向。</p><h4 id="1-2-移置"><a href="#1-2-移置" class="headerlink" title="1.2.移置"></a>1.2.移置</h4><p>当一种本能受阻时，亦即当它弄不到最初选择的对象时，这种本能的能量被转移到代替的对象上。阿Q释放攻击性的目标不是欺侮者，这从心理学上说，是移置。一般来说，本能替代的对象有两种形式，一种是转向自己，往往是自虐。当阿Q在未庄赛神的晚上赌钱时难得地赢而又赢时，可是不知道谁和谁打起架来，本属于他的很白很亮的一堆洋钱不见后，自己除了说是算被儿子拿去，说自己是虫豸外，仍还是郁郁不乐，于是“他擎起右手，用力地在自己脸上连打了两个嘴巴，热刺刺的有些痛；打完之后，便心平气和起来，似乎打的是自己。被打的是别一个自己，不久也就仿佛是自己打了别个一般，——虽然还有些热刺刺，——心满意足的得胜的躺下了。”另一种往往移置到比自己弱小的对象上——施虐。当阿Q受到“假洋鬼子”哭丧棒棒打后——受了屈辱，他便把气撒在了小尼姑身上。不但对伊说粗话调戏，还动手动脚，用力拧伊的面颊。通过释放攻击性，阿Q获得了心理平衡——“忘却了王胡，也忘却了假洋鬼子，似乎对今天的一切‘晦气’都报了仇；而且奇怪，又仿佛全身比拍拍的响之后更轻松，飘飘然的似乎要飞去了。”移置为阿Q提供了情绪疏泻的渠道。</p><h4 id="1-3-以理想化自居"><a href="#1-3-以理想化自居" class="headerlink" title="1.3.以理想化自居"></a>1.3.以理想化自居</h4><p>理想化形象给人“一种身分感”，它的作用是补偿——补偿自我异化和内心的分裂，并使人们“感觉到一种力量和意义”。霍妮把自我理想化称作“包罗万象的神经质解决办法”，它许诺满足一切需要，提高人们的价值感，靠着想象力的帮助，个人赋予自己种种崇高品质。这样，个人就成了“一位英雄、天才”，使人摆脱“痛苦和难以忍受的感情”，并使他们“最终神秘地实现自我及自已的生活。””理想化是一种幻觉，是不现实的。在阿Q的自我意识中，自己“先前阔”——“我们先前——比你阔多了!你算什么东西!”，将来阔——“他会想，我的儿子阔得多了”，见识高，而且“真能做”，几乎是一个“完人”。同时，他鄙视城里人、未庄人，认为城里人可笑，“未庄人也真是不见世面的可笑的乡下人。”被人打了，心里会想，“我总算被儿子打了”。当看到革命党使百里闻名的举人老爷都那样怕，使未庄的一群鸟男女产生慌张的神情，他便产生了投奔革命党的念头，刚动这念头，就忽而似乎革命党便是自己，未庄却都是他的俘虏了。于是得意地飘飘然起来了。在鲁迅的笔下，以理想化自居的阿Q，生活是永远得意的。</p><h4 id="1-4-潜抑"><a href="#1-4-潜抑" class="headerlink" title="1.4.潜抑"></a>1.4.潜抑</h4><p>体现在阿Q身上就是忘却。潜抑即把不愉快的经历不知不觉地压抑到潜意识里去，不再想起，不去回忆，于是，人在意识上感受不到焦虑和恐惧，痛苦似乎被遗忘了。与时间过久而发生的自然遗忘不同，这种遗忘是主动遗忘。在这种遗忘中，被潜抑的东西并没有消失，往往会不知不觉地影响人们日常心理和行为。它同上述的屈从具有一样的心理反应，如果潜抑过甚，主动忘却的内容就会冒出来，往往会以心理异常或行为异常的方式表现出来——通常为了心理的平衡。需要安全地释放攻击性。当假洋鬼子拿了一根黄漆棍子大踏步走了过来，阿Q“知道大约要打了，赶紧抽紧筋骨，耸了肩膀等候着，果然，拍的一声，似乎确凿打在自己的头上了”。打完后，他虽然感到莫大的屈辱，但一到酒店门口，就马上“忘却”了。从上述对阿Q“精神胜利法”的心理特性的分析，我们可以看出，屈从、移置、以理想化居、潜抑实质上是一种心理防御机制。心理防御机制本身有积极作用、消极作用之分。具有独立的个体人格的人。他可根据不同的挫折情境灵活选用不同的防御方式，在他们身上，心理防御机制仅起缓冲人的心理压力的作用，使用次数也较少，且作用时间不长。同时他们能感知自己在使用心理防御机制，并能合理地进行调节。因而积极的心理防御机制有助于人们适应挫折，化解困境。然而阿Q却总是依赖于心理防御机制，以此作为习惯的甚至唯一的反应方式，所以阿Q只能以一种自欺欺人的方式被动地适应环境，只能在歪曲、掩盖或在现实中耗费自己的活动能量。可以这么说，阿Q身上的心理防御机制是一种消极的心理防御机制，只能起到暂时的心理平衡作用。消极的防御机制使人在自我欺骗中与现实社会环境脱节，从而失去自我。在某种意义上说，失去自我的人亦是心理防御机制使用过度的结果，两者常常互为因果，互相影响，恶性循环。</p><h3 id="二、阿Q“精神胜利法”的成因"><a href="#二、阿Q“精神胜利法”的成因" class="headerlink" title="二、阿Q“精神胜利法”的成因"></a>二、阿Q“精神胜利法”的成因</h3><p>心理防御机制并不是与生俱来的，它的产生，一方面来自人的趋乐避苦的心理本能，但更多的是来自于后天的生存环境——包括社会环境、家庭环境、父母一贯的态度及实际交往的模式等等。人要生存，首先得满足个人生理基本需求——他必须吃、喝、穿、睡、保护自己免受侵害，等等。这构成了人行为的首要动机。但生理需求并非是人性中唯一强制性的需求，还有一种同样刻不容缓的需求，它虽不植根于肉体过程中，但却深植于人类模式的本质和生活实践中：人需要与自身之外的世界联系，以免孤独。感到孤独与孤立会导致精神崩溃，恰如肉体饥饿会导致死亡。没有自己独立的个体人格只有与外界发生联系或交往才不会感到孤独，相反，拥有自己独立的个体人格、有自己的价值信念或信仰的人即使长时间独处也不会感到孤独，斗室中虔诚向佛的高僧，牢狱中坚定的政治犯在精神上是不孤独的。阿Q生活在社会的底层，他上无片瓦，下无寸土，没有属于自己的固定住所，只能寄住土谷祠；阿Q一字不识，没有一技之长，只能靠到处打短工为生，是一个过着半流浪生活的雇农；阿Q瘦骨伶仃，没有强壮的体魄，甚至连他非常渺视的王胡也打不过；阿Q无名无姓，没有父母、妻儿、兄弟姐妹，甚至没有亲戚，没有人关心他，未庄的人仅是活忙时想起他，活一完就把他忘了。为了避免孤立与精神孤独，阿Q需要与外界相连，寻求一种与社会联系的纽带，以确保生存。在个体社会化进程中，人所面对的是具有不同目的的人，这些目的常会与个体的希望相冲突。不仅如此，他所遇到的人通常是具有威胁性的。可以想象，像阿Q这样的人在个体化过程中自我的愿望肯定常会遭到打击，加上孤零零一人，缺少母爱、亲情、友爱，没有人肯真心帮助他，除了终日奔波以满足最基本的生存需求外，是多么渴望安全感，获得爱的满足，避免孤独啊!可是，在当时的未庄，阿Q面对的是冷漠、无聊、势利、等级、压制与不平等，而阿Q无论在能力特性，还是在体制特性上都是属于劣势，在与外界发生联系时，只能处处采取人际防御策略，人际防御策略最终会导向心理内部防御策略，以试图来对付软弱、无能、孤独等感觉。霍妮认为当父母由于神经症不能爱孩子，甚至不将其视作“具有独立个性的人”时，孩子就会产生基本焦虑，阻碍他“自发地以真实情感将自己与其他人联系起来，迫使他寻找方法应对”。这时孩子的感情和行为已不纯粹是自我的表达，而被护卫策略左右，这种情况同样适用于阿Q。应该说，阿Q就是在“未庄”这样一个冷漠无爱的环境中酝酿出来的。阿Q的可怜、悲惨乃至最后的“大团圆”亦是由这种环境造成的。正如张天翼先生在&lt;论&gt;中所说：“假如你不是生活在那个强吃弱，大压小的未庄世界里，而你能够被人爱，被人帮助，而你会去爱人，帮助人……”那么阿Q可能就是另一个阿Q了。阿Q为了生存，不得不在日常行为模式中采取“精神胜利法”——一种心理防卫策略，是一种无奈的选择。许多个体身上也可常见心理防卫策略，也偶会出现“精神胜利法”，问题是，个体之所以拥有个体人格，其屈从也好、移置渲泻也好，以理想化自居也好，均未失去自我。在阿Q身上，我们见不到其具有个体人格的所有基本特性，他屈从、受虐、忘却、攻击意味着自我完全臣服于外界的权威，而不是伸张精神和道德上的自我。</p><h3 id="三、“精神胜利法”与历史循环论"><a href="#三、“精神胜利法”与历史循环论" class="headerlink" title="三、“精神胜利法”与历史循环论"></a>三、“精神胜利法”与历史循环论</h3><p>生活在社会底层的阿Q，由于身体及精神的特质处于劣势，为了生存，为了克服个体被抛在茫然无助的社会所产生的孤独感，面对敌视、强大的外界，只能采取屈从——被迫受虐、自虐——主动受虐的心理方式以适应社会。屈从、受虐是一种心理压抑，人不可能长久地处于压抑的状态之中，他必须安全地释放攻击性——施虐于人。因此，虽然阿Q是渺小的、卑微的，但他也渴望自己强大，渴望获得权力，主宰他人。</p><p>阿Q边走边喊道：“好，……我要什么就要什么，我欢喜谁就是谁。得得，锵锵!悔不该，酒醉错斩了郑贤弟，悔不该，呀呀呀……得得，锵锵，得，锵令锵!我手执钢鞭将你打……”</p><p>这是阿Q潜意识中想获得权力的一种外在体现。对于阿Q来说，想快捷地获得权势，改变自己的地位，就是参加革命党，造反。赖希认为，法西斯主义体现的是人被扭曲的反常的性格结构。这种反常的性格结构在现实生活中表现为小人精神，即既渴望权威又希望造反精神，这种精神是典型的下中层人士的性格。弗罗姆也认为，法西斯主义者——专制主义者及其追随者的性格是受虐与施虐“共生”的极权主义的性格，“共生”意即两者必须共存，因此必须丧失个别独立的完整性，而成为相互依赖的对象。从表面上看，受虐狂最主要的表现特征是“贬低自己，自甘懦弱。不敢主宰事物，极度依赖于自身之外的权力、他人、机构组织或自然，常常无法体验‘我想’或‘我是’的情感”，而施虐狂则与之相反，他的表现特征是“让别人依赖自己，以绝对的权力统治他们，以便让他们仅仅成为自己手中的工具，像‘陶工手中的泥土’。而且还要剥削、利用、偷窃、蚕食别人。再次就是希望使别人受骗磨难，或看别人受磨难，目的是主动伤害、羞辱他们。”而实际上，这两种截然不同的外在表现来源于同一性格结构——“极权主义性格”。弗罗姆认为，把施虐——受虐狂性格称为“极权主义性格”是非常贴切的，因为施虐——受虐狂者的主要特征就体现在对待权威的态度上。他仰慕权威，愿意屈从权威，但同时又渴望自己成为权威，迫使他人屈从于自己。阿Q渴望革命、造反。其目的也在此：</p><p>“造反?有趣，……这时未庄的一伙鸟男女才好笑哩，跪下叫道，阿Q，饶命!谁听他!第一个该死的是小D和赵太爷，还有秀才，还有假洋鬼子，……留几条么?王胡本来还可留，但也不要了。……”阿Q革命、造反的目的除了获得权力、主宰他人之外，还有一个重要的目的，就是获取钱财和女人：“东西，……直走过去打开箱子来：元宝、洋钱、洋纱衫……秀才娘子的一张宁式床先搬到土谷祠，此外便摆了钱家的桌椅，或者也就用赵家的罢。赵司晨的妹子真丑。邹七嫂的女儿过几年再说。假洋鬼子的老婆会和没有辫子的男人睡觉，吓，不是好东西!秀才的老婆的眼胞上有疤的。……吴妈长久不见了，不知道在哪里，——可惜脚太大。”</p><p>施虐——受虐狂性格或者称为“极权主义性格”的个体，其甘愿忍受受虐在于施虐者比自己强大，而其施虐的对象往往是比自己弱小的对象，根本的缺陷在于个体人格的缺失。对此，鲁迅在“哀其不幸”的同时，也深感愤恨：</p><p>勇者愤怒，抽刀向更强者；怯者愤怒，却抽刀向更弱者，不可救药的民族中，一定有许多英雄，是向孩子们瞪眼，这些孱头们。孩子们在瞪眼中长大了，又向别的孩子瞪眼，并且想：他们一生都过在愤怒中。因为愤怒只是如此，所以他们要愤怒一生，——而且还要愤怒二世，三世，四世，以至末世。</p><p>如果我们把主体自由主要理解为个人对自我生命的自律自足的把握，个体人格(个性)正是自我自由地实现其生命目的而表现出来的自主性与独立性。这种自主性与独立性在鲁迅看来，除了“人各有己”，视自己为人外，另外还得视他人为人。用鲁迅的话说，就是要“顿识个性之价值”与“渐悟人类之尊严”。也就是说，体现在个体人格上，一个人要具有人格，就是不仅要懂得尊重自己的人格，也要懂得尊重别人的人格。这里，鲁迅显然视人格的独立性与人道主义为一枚硬币的两面——从这个意义上说，个性与主体性与最彻底的人道主义相通。鲁迅的文字与个体人格实践至今仍有强烈的震撼灵魂的效果，正是在点点滴滴中体现了对生命的大爱和对人类尊严的维护。然而，在阿Q身上，我们看不见个体间真正平等的“爱”与对对方人格的“尊重”。而失去了“爱”与对对方人格的“尊重”，人可能就会集奴颜卑膝和虎狼之性子一身，“天有十日，人有十等”，由上则下一级一级地排下来，人是上一级的奴才和下一级的主子——一种无人格、“无特操”的人，个体性格的表现往返于两个极端之间：既可以此，也可以彼，全看具体的场合而定，根本就没有属于他自己的“自我”。这是一种可怕的的“双重人格”，是一种人性的扭曲。作为个人独立的人格的尊严被无情地否定，除重复上一代人的命运外几乎不能作主体的选择。阿Q是令人哀怜的，但设想一下，如果按照上述阿Q革命的对象及革命的目的来看，那么阿Q翻身掌权，其结果是可怕的，无非是以另一个专制的、杀人的、压迫的社会代替现有的这么一个社会，唯一的区别就是当权者的不同而已。奴隶成为奴隶主，弱者上升为强者，只是过去历史的重复，并不是人类的新发展，而且理所当然的是一种倒退。故鲁迅在中说“人类顾由肪，乃在微生，自虫蛆虎豹猿穴以至今日，古性伏中，时复显露，于是有嗜杀戮侵略之事，夺土地子女玉帛以厌野心。”他在中，直接用农民起义领袖朱元璋的例子来说明这个问题：“二十多年前，都说朱元璋(明太祖)是民族的革命者，其实是并不然的，他做了皇帝以后，称蒙古朝为‘大元’，杀汉人比蒙古人还厉害。奴才做了主人，是决不肯废去‘老爷’的称呼的，他们摆架子，恐怕比他的主人还十足，还可笑。这正如上海的工人赚了几文钱，开起／],／b的工厂来，对付工人反而凶到绝顶一样。”鲁迅从小就阅读经书、史书等中国古典文献，从他阅读开始，他就接触了中国历史的“一盛一衰”、“一乱一治”之类的循环的历史观。他认为现在有的东西，过去很可能就曾经有过而且将来也还可能出现。因此他在披阅史书时一再感慨，“一治史学，就可以知道许多‘古已有之’的事”，试将记五代，南宋、明末的事情的。和现今的状况一比较，就当惊心动魄于何其相似之甚，仿佛时间的流逝，独与我们中国无关。现在的中华民国也还是在五代，是宋末，是明季，这岂不是一种历史循环?一种轮回?因此，阿Q式的革命，命固然是革了，但究其实不过是取而代之。并不是真正的革命意识。即使阿Q革命成功，他除了变成未庄的新赵太爷，新假洋鬼子以外，没有别的出路。民谚“三十年媳妇熬成婆”，“皇帝轮流做，明年到我家”。反映的正是取代意识。“熬”和“做”并不等于秩序发生变化，只是人在其中扮演的角色发生变换而已。因此，在中国历史上，一方面轰轰烈烈起义(革命)。兴师问罪，“替天行道”“汤武革命”，毁坏既成的秩序，重新分配财富；另一方面又像死一样寂静，骚动仅仅是骚动，并未带来不同寻常的结果，“替天行道”之后不过是旧秩序的重建。旧主子被清算，换了一帮新主子；旧奴隶侥幸做了主子。立即制造一批新奴隶。正如鲁迅所说的暂时做稳了奴隶和想做奴隶而不得的时代交替循环。“替天行道”热闹哄哄，但终于“天不变道亦不变”。从国民性格来检讨，主奴根性在这种悲剧性的循环里起了很大的作用。主奴根性不祛除，无法获得人格独立，“诛一夫”也好，“救民于水火，解民于倒悬”也好，结局终不免还是一夫独霸，民还是坠入水火。陷于倒悬。</p><h3 id="四、阿Q“精神胜利法”与普遍的国民劣根性"><a href="#四、阿Q“精神胜利法”与普遍的国民劣根性" class="headerlink" title="四、阿Q“精神胜利法”与普遍的国民劣根性"></a>四、阿Q“精神胜利法”与普遍的国民劣根性</h3><p>阿Q的“精神胜利法”所体现的不是个人性格的暂时性表现，而是普遍而严重的文化病。发表后，在当时引起了强烈的反响，沈雁冰在1923年10月发表的《读&lt;呐喊&gt;》一文中说：“现在差不多没有一个爱好文艺的青年口里不曾说过‘阿Q’这两个字，我们几乎到处运用这两个字，有接触灰色人物的时候，或听到了他们的什么‘故事’的时候，里的片断的图画，便浮现在眼前了。”而那些灰色人物，对于的问世，“都栗栗危惧”，以为作品“就是骂他自己，”待到作者同他们素不相识，并不知道他们的阴私的时候，“又逢人声明不是骂他”。这就足见影响之大和成就之惊人。通过这段文字．我们从另一个侧面看到，阿Q的“精神胜利法”不但存在于阿Q身上，也存在于许多人的身上，尤其在灰色人物上。从上述对阿Q的精神胜利法的精神分析中可以看出，阿Q的精神胜利法的基本的精神动力机制实际上是一种权威主义性格，即受虐——施虐共生。在阿Q身上，受虐、施虐两者并非是对立的，而是互为补充的，它们构成一个整体，构成了阿Q的自我本身。不仅是阿Q，未庄的所有人何尝不是这样?阿Q平常受周围人的欺侮，而当阿Q说他和赵太爷原来是本家，细细排起来还比秀才长三辈呢，后来又说他进城在举人老爷家里帮忙，旁人听了也就肃然有些起敬了；甚至，未庄最大的权威者——一贯威风凛凛的赵太爷也不例外，当阿Q飘飘然地似乎革命党便是自己而高兴地走而且到处喊，连赵太爷，这个平时棒打阿Q的人此时却怯怯地迎着低声地叫阿Q为“老Q”。自己的名字会和“老”字联结起来，这是阿Q所料想不到的。而一旦秀才花了四块洋钱向假洋鬼子要了一块银桃子挂在大襟上——“柿油党”的顶子时，赵太爷便骤然大阔。目空一切，见了阿Q，也就很有些不放在眼里了。赵太爷、未庄的一帮人唯一有别于阿Q就在于他们依靠纯想象中的胜利获取平衡的程度比阿Q低或者说不那么典型而已。两者区别的根源仅就在于人们的社会地位的不同：社会地位越高，或有着更大的获得实际胜利的物质力量，他就能更多地享受实际胜利的喜悦，就会更少地追求纯想象中的胜利；社会地位卑微，或拥有获得实际胜利的物质力量小，就必然更多地追求纯想象中的胜利，以作为实际失败的心理补偿。由此可看出，受虐——施虐的心理机制普遍存在于当时的社会人群中，它是社会群体大多数成员性格结构的基本核心——按照弗罗姆的定义便是社会性格，即，在一个群体共同的基本经历和生活方式作用的结果下，发展起来的该群体大多数成员性格结构的基本核心。这种社会性格也是千百年来中国传统社会的基本人格——它已根深蒂固存在于人的无意识中。当阿Q被拉到衙门大堂，尽管告诉他站着也行，但他还是跪了下来，长衫人物唾弃地说：“奴隶性……”。在第二次审问他时，阿Q“仍然下了跪”。这种“集体无意识”形成的根源在于千百年来专制主义的压迫和束缚。几千来中国专制主义的历史，也是民众心灵受虐扭曲的历史，民众心灵的受虐扭曲不仅是专制主义压迫的被动结果，而且是这种社会形态以更大的规模复制和再生的基础，即如赖希指出的：“只要一种社会意识形态改变了人的心理结构，那么，它就不仅在人身上再生自身，而且更重要地，还会成为人身上的一种积极力量”，也就是说：“性格结构便以意识形态的形式再生产着社会的社会结构。因此，阿Q的“精神胜利法”具有普遍性，它的基本的心理结构普遍地存在于世间人身上。</p><h3 id="五、结语"><a href="#五、结语" class="headerlink" title="五、结语"></a>五、结语</h3><p>健全的个体人格其主客体是统一的，它必须攻克社会群体的决定化。一切种族和遗传的特征，仅仅是个体人格进行创造所需的辅助材料而已。个体人格不仅是理性的存在，也是自由的存在，它抗拒外界奴役的统治，抗拒人对世界奴役的驯服融合。个体人格同人的使命感有关，它会聆听于内在的人类普遍价值的声音——自由、平等、爱、责任等，并践行自身真实存在。对世界的恶麻木不仁，意味着个体人格意识匮乏，意味着个体人格的消融。一个具有健全人格的个体处于挫折与冲突的紧张情境中时，其内部心理活动中往往也会自觉或不自觉地采用幻想的胜利解除烦恼，减轻内心不安，恢复情绪平衡与稳定。它的适当存在，有益于维护人的心理健康。因此，“精神胜利法”偶一为之，服务于人的个体本性，这并不可怕，甚至可以稳定心绪，准备新的实际战斗。从本文的分析可以看出，阿Q、甚至未庄所有的人根本就构不成人的个体性，在他们身上均看不到具有个体人格自身的价值性，他们均缺乏自由人的意识。受到了非人的本质属性的奴役，甚至不知道自己是一个独立的人，极易做奴隶。当“精神胜利法”构成一个人的行为方式和本质属性。只能驱人走向毁灭之途。中国千百年来的传统专制社会不但对人民实施经济和政治的压迫，而且对人的文化与心理进行操纵，并使之内化到人的生存结构之中，导致了人的性格结构与心理机制的异化，由此构成了人的行为方式和本质属性。因此要变革社会、解放人性，不仅在于政治、经济意义上的变革，更在于改变人的心理结构的“文化革命”或“心理革命”，因为只要存在着压抑性的人之本能结构，那么任何社会都不能根除对人的压迫，即使改朝换代，模式依旧，所不同只是皇帝或统治者的不同而已。鲁迅一生追求“立人”理想，认为只有首先改变中国人的精神状态，通过根治中国人“国民性”的病根，重塑个体人格才能够实现中国政治状况的根本改变的意思恐怕即在于此。也就是说，当广大人民群众的心理结构没有得到改变，“人”的自觉意识没有得到完全的确立之前，任何一次改变政权形式的革命尽管取得胜利，然而从改变整个民族奴性主义心理结构，达到启蒙人格的完成的最终结果来说，不能说是革命的成功。辛亥革命即是一个例证。</p><hr><ul><li><a href="https://chn.oversea.cnki.net/KCMS/detail/detail.aspx?dbcode=CJFD&dbname=CJFD2004&filename=XXSF200403039&uniplatform=OVERSEA&v=wve2o64d-GwoCeIgiwxlv4Z3-lWbeMObnzv-kH4_3iyt6IvVWUnTlLuOF5LJJA0I">从阿Q精神胜利法看中国人的心理防御机制 - 中国知网</a></li></ul><h2 id="从阿Q精神胜利法看中国人的心理防御机制"><a href="#从阿Q精神胜利法看中国人的心理防御机制" class="headerlink" title="从阿Q精神胜利法看中国人的心理防御机制"></a>从阿Q精神胜利法看中国人的心理防御机制</h2><p>阿Q是一个怎样的人?每个人心目中的阿Q都是不同的。为了便于准确地把握阿Q行为的外部意义及内部原因，先给阿Q这样一种定位：第一、阿Q不是变态狂。曾有人认为阿Q的精神胜利，在很大程度上是夸大狂的“幻想系统”或“系统的幻想”的心理反映。阿Q常常在幻想和现实之间混淆不清，把幻想当成现实，生活在自己虚构的世界里。以这种理由来证明阿Q的病态实际上是站不住脚的。阿Q的最大特色就是精神胜利法，使用精神胜利法的前提就是必须有混淆幻想和现实的能力。阿Q并不是真的分不清幻想和现实，他的意识非常清楚。有一次阿Q赌钱赢了又遭人抢，他两次使用了惯用的精神胜利法，却还是“忽忽不乐”，只好“用力的在自己脸上连打了两个嘴巴”，热辣辣的痛后才睡着；被闲人打的那次，他能发现自己是“第一个能够自轻自贱的人”。第二、阿Q是一个智力略低于常人的半白痴。阿Q只用“儿子打老子”就能欺骗自己，这对一般的人可能远远不够用。阿Q对人情世故的懵懂无知也可以作为证据。当一个老头子夸赞阿Q真能做时，阿Q很“喜欢”；酒店里的人笑话阿Q戏弄小尼姑，他自以为得了奖赏，愈加兴高采烈地拧了小尼姑的面颊以示谢意……这足以可见阿Q的反应迟钝。明白这两点对于后面的讨论非常重要。</p><h3 id="一、阿Q的精神胜利法"><a href="#一、阿Q的精神胜利法" class="headerlink" title="一、阿Q的精神胜利法"></a>一、阿Q的精神胜利法</h3><p>阿Q的精神胜利法主要表现为三种方式。其一是自欺式，其二是忘却式，其三便是接受式。在这里，最为人们喜闻乐道的要数阿Q的自欺欺人。</p><h4 id="1-1-自欺式精神胜利法"><a href="#1-1-自欺式精神胜利法" class="headerlink" title="1.1.自欺式精神胜利法"></a>1.1.自欺式精神胜利法</h4><p>江潮把精神胜利法定义为“在物质上处于被支配地位的人们，在精神上克敌制胜的自欺欺人的思想与方法。江潮理解的精神胜利法是自欺式的精神胜利法。其理由如下：阿Q的精神胜利到底是想在精神上战胜敌人还是战胜自己?所谓“战”，必须有两方存在。阿Q头脑中用“儿子打老子”也好．自轻自贱“第一个”也好，表面上看似乎他占了上风，所以克敌制胜了。而阿Q能够得胜的是精神而并不是现实，这一点足以说明他的胜利本身并不在于打赢了别人，而在于以胜利的假象瞒过了自己。所以，阿Q要在精神上战胜的真正的敌人也正是他自己。只有在现实失败的时候，才有可能运用精神胜利法。精神胜利法取得的胜利只是一种感觉，它出场的背景与精神对立的一面——现实中是失败的，即精神胜利法来源于现实的失败。从这个角度而言。把江潮的定义改为“在精神上以克敌制胜的假象欺骗自己的思想与方法”，这就是自欺式的精神胜利法。自欺是精神胜利法中描述最多的一种。一般具有这种习性的人自身不易觉察．总以为只有阿Q才有。因此．他的自欺式精神胜利法显得最独特、最鲜明。阿Q的自欺式精神胜利法的主要内容，表现在把自己凌驾于他人之上，“无非是幻想之中的自己比别人高一等”。之所以幻想是由于现实中不如别人。只好用幻想这种方式战胜。打不赢别人，就只能说“儿子打老子”。连“儿子打老子”也不能说了，就说自轻自贱“第一个”。假如现实中的阿Q可以高那些人一等．他早就“现实胜利”了。阿Q在受了“假洋鬼子”的气后，碰上倒霉的小尼姑，戏弄了一番，又拧了她的脸颊；在阿Q的心目中．小D和王胡的身份比他还低，所以，看到他们总是不免不够顺眼，想揍他们一顿。在这样场合，他没有必要欺骗自己，就犯不上使用他自欺式的精神胜利法。这两种胜利也存在相通的一点：想比别人高一等。阿Q的精神胜利法一般使用在他的精神得不到满足的时候，“只好在情绪上满足自己．而不能在内心真正获得充实”。阿Q可以获得满足的机会极少。因而，他的精神胜利法用之普遍可想而知了。</p><h4 id="1-2-忘却式的精神胜利法"><a href="#1-2-忘却式的精神胜利法" class="headerlink" title="1.2.忘却式的精神胜利法"></a>1.2.忘却式的精神胜利法</h4><p>现实中的失败并不一定引发自欺式的精神胜利法，他还会通过忘却和接受获得心理的平衡。阿Q使用忘却这一法宝的机会不是很多的，只有在精神胜利法不奏效或者在似乎比他高一等又并不是他可以完全鄙视的“假洋鬼子”那里用过。“假洋鬼子”拿着一枝棍子打了他以后。他对自己并不是十分的有底气(毕竟“假洋鬼子”是钱太爷的儿子)。他没有选择“儿子打老子”之类的精神胜利法。因为打心眼里他还是承认“假洋鬼子”尽管没有了辫子，可还是要高他一等。这时他使用的正是“忘却”这一招；每次成功地自欺后能“倒头就睡”也多亏了“忘却”这看家本领。当然，该用自欺式精神胜利法才能应付的事，如果不用．对他来说。恐怕是很难忘却的，要不怎能说“阿Q又很自尊”!”自欺式的胜利比忘却相对满足虚荣心。</p><h4 id="1-3-接受式的精神胜利法"><a href="#1-3-接受式的精神胜利法" class="headerlink" title="1.3.接受式的精神胜利法"></a>1.3.接受式的精神胜利法</h4><p>“接受”看上去像是最正常的了．而且任何人都知道这不是阿Q的专利。然而，阿Q的接受还是很独特。阿Q用此法的对象有高度的选择性。比如阿Q说自己也姓赵，被赵太爷打了一个嘴巴后。只用手摸着左颊和地保一起退出了。阿Q恋爱失败后，赵秀才因他胆敢戏弄他的女仆罚了阿Q一顿，阿Q也“自然没话”。在此种情境下．阿Q“接受”了。阿Q之所以“接受”是由于他以为别人本来就高自己一等，所以用不着精神胜利，也用不着忘却．这本身是“合乎情理”的事。在“大团圆”这一章中．阿Q第二次被抓进栅门时，“并不十分懊恼”，“他以为人生天地之间，大约本来有时要抓进抓出，有时要在纸上画圆圈的……”。当他意识到要示众时．“他不过以为大约人生天地间，大约本来有时也不免要游街要示众罢了。”他意识到要杀头时，他“似乎觉得人生天地间，大约本来有时也未免要杀头的”；阿Q觉得这些遭遇算不上是耻辱，因而连“忘却”也显得多余。要么是地方权威，要么是“天”神。这时阿Q的接受完全被动而且充满了宿命论的色彩。</p><h3 id="二、阿Q的精神胜利法的实质"><a href="#二、阿Q的精神胜利法的实质" class="headerlink" title="二、阿Q的精神胜利法的实质"></a>二、阿Q的精神胜利法的实质</h3><p>阿Q的精神胜利法的实质就是阿Q的心理防御机制。防御机制是弗洛伊德1894年提出来的。弗洛伊德把人格结构分为三部分：本我(id)、自我(ego)、超我(superego)。本我与生俱来，是最原始的、人格中最难接近的部分。它包括人类本能的性的内驱力和被压抑的习惯倾向。本我根据快乐原则而操作，这种快乐原则可以减轻紧张状态。里比多能量的增加会导致有机体紧张增加。而有机体则力求把这种紧张状态减少到比较能够忍受的水平。个体为了满足自己的需要并维持一种令其舒适的紧张水平．就必须和真实的世界交互作用。这时，自我便从本我中发展出来，充当了自身和外部世界的仲裁者。自我所遵守的是现实原则，参考现实来调节本我。弗洛伊德人格结构的第三部分是超我，所遵守的是理想原则。在童年期发展起来的，是一系列行为规则被儿童同化的结果。焦虑是引起一个人的行为中的紧张状态的力量，是促使一个人去减少这种紧张状态的动力。弗洛伊德认为自我可以发展出许多抵抗焦虑的保护性的防御，亦即所谓防御机制。这是弗洛伊德提出的防御机制的大致内容。弗洛伊德最初认为防御机制是由于自我调节无力，产生了焦虑而发展出来抵御焦虑的心理机制。阿Q及未庄同时代人的思想中等级观念之强已深入骨髓，他们的本我中有一种强烈的权利欲望．一味地要凌驾于一切人的头上。在现实中，阿Q的这种欲望不但得不到满足反而牺牲自己满足了别人。为了平衡内心的冲突．阿Q寻找可行的方法。倘若对手是他心目中“高一等”者．经过自我调节还是可以“忘却”或者“接受”的。如果对手是那些全不在他眼里或者甚至于低他一等者，他就只好采用核心的防御机制——自欺式精神胜利法。以欺骗自己的方式满足这种欲望了。阿Q的精神胜利法的实质主要是弗洛伊德及其女儿提出的下列防御机制：替代(displacement)、压抑(repression)、合理化(rationalization)。替代是指把个人冲动转向一个替代物，这样做会比直接发泄容易实现和接受。阿Q受了秀才的气．发泄在小尼姑身上就是例子。压抑是指把不能接受的意图、情感或行为在不知不觉中压抑到潜意识中去。具体在阿Q身上的表现就是“忘却”。阿Q拍拍头就能“忘却”的关键就是要把屈辱压抑到无意识中去。合理化主要指选择一些合乎内心需要的理由来减轻心理上的痛苦，宣扬一些可以接受的信息，在阿Q身上表现为“接受”。阿Q的遭遇本不应该理所当然为他所承受。可是宿命观具有强大的包容力。假如世界是由一个神统治，那阿Q是绝不会反抗的。最为伟大的阿Q的自欺式的精神胜利法也是合理的。他讲“儿子打老子”时的意图并不在于扭曲事实，只想为被打的事实找一个可以减轻痛苦的借口．心想：“如果你承认是我儿子，打了我也还是我占了便宜啊”……当然．阿Q的防御机制还远不止这些，比如他还会“回避”：自己是“癞头”就对一切与此相关的字眼讳莫如深。阿Q的心理防御机制，经过长期的使用，已经进化成了一个牢不可破的系统。他可以不假思索随意运用。阿Q心理防御机制的核心内容还是一种等级制度的权势攀比，他只能在精神上给阿Q一定的满足，不能获得内心真正的充实。阿Q过多地使用心理防御机制体现着他人格的不健全。</p><h3 id="三、中国人心理防御机制的特点"><a href="#三、中国人心理防御机制的特点" class="headerlink" title="三、中国人心理防御机制的特点"></a>三、中国人心理防御机制的特点</h3><p>鲁迅先生写《阿Q正传》的目的在于“画出国民的灵魂”这一点应该是毫无争议的。1925年5月鲁迅在为俄文译本《阿Q正传》所作的序言中写到：“……要画出这样沉默的国民的灵魂来，在中国实在是一件难事……。”阿Q的精神胜利法不只是阿Q有．他代表着全中国人．只不过不同时期的人表现“阿Q”的方式不同罢了。中国人的心理防御机制表现为一种等级攀比。中国的文化属于一种集体主义的文化，与西方倡导个性的个体主义文化相比，中国人更习惯于把注意力放在社会大集体中，以及与人的关系方面。所以，中国人的心理防御机制相应较多地体现了它的社会内涵，典型地表现为“高人一等”的欲望以及自尊心掩盖下的虚荣心。当一个中国人处于困境的时候．这句话大概是最好的安慰剂：如果你没有了鞋穿，想想你周围还有没有脚的人。按理分析，听到这句话，第一反应是深刻的同情。而一般中国人拿他来当自己的安慰剂珍藏．从别人的惨状中找寻自己的幸福。很明显，这种幸福建立在与别人对比胜利的基础上。“比上不足，比下有余”足以自欺欺人，自欺欺人也正是阿Q被批判最多的地方。“脸和面子”是中国人的心理防御机制的“外衣”。由于中国人把注意力放在“关系”中，“脸和面子”对中国人来说至关重要。“脸面活动”渗透在中国人生活的每一个角落。㈣渖”’中国人的社会行为的理由都超不出“脸和面子”的范围，似乎他们的生活就是保护或提升自己的“脸和面子”。世界杯打的不好是“丢了中国人的面子”；心事被人戳穿了，那么“面子挂不住”。“人要脸．树要皮”，中国人拼死要维护“脸和面子”。这正是中国人的心理防御机制的外在体现。从本质上讲，中国人的心理防御机制是中国人对自己的印象整饰。印象整饰是指人们在社会互动过程中，如何在他们心目中创造出一个恰当的印象。或者说，运用哪些技巧使自己做出某种行为来让他人产生一种自己希望他人产生的印象。’每一个人都希望他人对自己形成一个理想的印象。这种印象就是自己确立给自己的目标，无论现实和理想之间的距离多么不可企及，他们都会尽量地掩饰这种差距。鲁迅在与周作人谈起“面子”和“门钱”时，也曾十分形象地说，“早先年，大家庭的主人变穷以后仍要下馆子，到馆子里去即便是吃了个两三文钱的烧饼，也要摆出吃了什么山珍海味的面孔走出来。他们要装着思考后的顿悟大拍桌子，将掉在桌缝里的芝麻震出来。要整饰的印象毕竟是一种理想的状态。在小事上玩笑聊以自慰，算是可爱的阿Q精神。而在一个可以靠个人奋斗实现理想的年代，不分清人生角色的理想与现实，在空想中生活，不免陷入了唯心的立场。不求上进，自欺欺人是可耻的。认清现实，为达到理想脚踏实地地做人才是积极的人生态度。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>B2CMall笔记归档</title>
      <link href="/posts/88840aa1.html"/>
      <url>/posts/88840aa1.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、架构"><a href="#一、架构" class="headerlink" title="一、架构"></a>一、架构</h3><p><img src="https://s2.loli.net/2022/08/05/dPNOxU849oeYsFB.png"></p><h3 id="二、技术选项"><a href="#二、技术选项" class="headerlink" title="二、技术选项"></a>二、技术选项</h3><h4 id="2-1-前端技术"><a href="#2-1-前端技术" class="headerlink" title="2.1.前端技术"></a>2.1.前端技术</h4><ul><li>基础的HTML、CSS、JavaScript（基于ES6标准）</li><li>JQuery</li><li>Vue.js 2.0以及基于Vue的UI框架：Vuetify</li><li>前端构建工具：WebPack</li><li>前端安装包工具：NPM</li><li>Vue脚手架：Vue-cli</li><li>Vue路由：vue-router</li><li>ajax框架：axios</li><li>基于Vue的富文本框架：quill-editor</li></ul><h4 id="2-2-后端技术"><a href="#2-2-后端技术" class="headerlink" title="2.2.后端技术"></a>2.2.后端技术</h4><ul><li>基础的SpringMVC、Spring 5.0和MyBatis3</li><li>Spring Boot 2.0.1版本</li><li>Spring Cloud 最新版 Finchley.RC1</li><li>Redis-4.0</li><li>RabbitMQ-3.4</li><li>Elasticsearch-5.6.8</li><li>nginx-1.10.2</li><li>FastDFS - 5.0.8</li><li>MyCat</li><li>Thymeleaf</li><li>JWT</li></ul><h3 id="三、项目总结"><a href="#三、项目总结" class="headerlink" title="三、项目总结"></a>三、项目总结</h3><h4 id="3-1-项目介绍"><a href="#3-1-项目介绍" class="headerlink" title="3.1.项目介绍"></a>3.1.项目介绍</h4><ul><li>乐优商城是一个全品类的电商购物网站（B2C）</li><li>用户可以在线购买商品、加入购物车、下单、秒杀商品</li><li>可以评论已购买商品</li><li>管理员可以在后台管理商品的上下架、促销活动</li><li>管理员可以监控商品销售状况</li><li>客服可以在后台处理退款操作</li></ul><h4 id="3-2-前台和后台系统共享相同的微服务集群"><a href="#3-2-前台和后台系统共享相同的微服务集群" class="headerlink" title="3.2.前台和后台系统共享相同的微服务集群"></a>3.2.前台和后台系统共享相同的微服务集群</h4><h5 id="3-2-1-商品微服务"><a href="#3-2-1-商品微服务" class="headerlink" title="3.2.1.商品微服务"></a>3.2.1.商品微服务</h5><p>商品及商品分类、品牌、库存等的服务</p><ul><li>商品分类管理</li><li>商品品牌管理</li><li>商品规格参数管理：因为规格的可变性，采用竖表设计，分为规格和规格组表</li><li>商品管理：SPU和SKU的设计，以及SKU的动态属性。</li><li>库存管理：库存加减采用乐观锁方案，另外定时对库存判断，库存不足可通知管理员。</li></ul><h5 id="3-2-2-搜索微服务"><a href="#3-2-2-搜索微服务" class="headerlink" title="3.2.2.搜索微服务"></a>3.2.2.搜索微服务</h5><p>实现搜索功能</p><ul><li>采用Elasticsearch完成商品的全文检索功能</li><li>搜索过滤</li><li>集群</li></ul><h5 id="3-2-3-订单微服务"><a href="#3-2-3-订单微服务" class="headerlink" title="3.2.3.订单微服务"></a>3.2.3.订单微服务</h5><p>实现订单相关</p><ul><li>订单表设计，状态记录</li><li>创建订单需要同时减库存、跨服务业务、需要注意事务处理，流程。</li></ul><h5 id="3-2-4-购物车微服务"><a href="#3-2-4-购物车微服务" class="headerlink" title="3.2.4.购物车微服务"></a>3.2.4.购物车微服务</h5><p>实现购物车相关功能</p><ul><li>离线购物车：主要使用了localStorage保存到客户端，几乎不与服务器交互</li><li>在线购物车：使用了redis实现。</li></ul><h5 id="3-2-5-用户中心"><a href="#3-2-5-用户中心" class="headerlink" title="3.2.5.用户中心"></a>3.2.5.用户中心</h5><p>用户的登录注册等功能</p><ul><li>用户注册</li><li>注册数据校验</li><li>查询用户信息</li></ul><h5 id="3-2-6-认证中心"><a href="#3-2-6-认证中心" class="headerlink" title="3.2.6.认证中心"></a>3.2.6.认证中心</h5><p>用户权限及服务权限认证</p><ul><li>权限管理CRUD</li><li>登录token生成</li><li>登录token认证</li><li>务间token生成</li><li>服务间token认证</li><li>解决cookie被禁用（跨域问题） 首先提示用户cookie不可以被禁用；把cookie放入头中返回，JS获取头信息，存入web存储（localstorage，SessionStorage），每次请求都需要手动携带token，写入头中。</li><li>解决cookie被盗用（授权）我们的cookie无法被篡改 ；使用HTTPS协议，防止数据泄露 ；加入ip地址识别身份到payload中。</li><li>微服务地址被暴露 首先地址不会被暴露，因为所有的微服务都通过Zuul进行访问，对外暴露的只有Zuul；万一暴露了，我们可以加入服务间鉴权。</li></ul><h5 id="3-2-7-短信服务"><a href="#3-2-7-短信服务" class="headerlink" title="3.2.7.短信服务"></a>3.2.7.短信服务</h5><p>完成短信发送</p><ul><li>对接阿里云 平台，通过MQ（MQ消息队列）实现异步短信发送</li></ul><h5 id="3-2-8-支付服务"><a href="#3-2-8-支付服务" class="headerlink" title="3.2.8.支付服务"></a>3.2.8.支付服务</h5><p>完成支付平台对接</p><ul><li>对接微信支付</li></ul><h5 id="3-2-9-Eureka注册中心"><a href="#3-2-9-Eureka注册中心" class="headerlink" title="3.2.9.Eureka注册中心"></a>3.2.9.Eureka注册中心</h5><h5 id="3-2-10-Zuul网关服务"><a href="#3-2-10-Zuul网关服务" class="headerlink" title="3.2.10.Zuul网关服务"></a>3.2.10.Zuul网关服务</h5><h5 id="3-2-11-Spring-Cloud-Config配置中心"><a href="#3-2-11-Spring-Cloud-Config配置中心" class="headerlink" title="3.2.11.Spring Cloud Config配置中心"></a>3.2.11.Spring Cloud Config配置中心</h5><h3 id="四、尾巴"><a href="#四、尾巴" class="headerlink" title="四、尾巴"></a>四、尾巴</h3><p><a href="https://github.com/GiesenC/B2CMall">GiesenC/B2CMall: leyou</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Not Only SQL</title>
      <link href="/posts/ae3a9321.html"/>
      <url>/posts/ae3a9321.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、MongoDB概述"><a href="#一、MongoDB概述" class="headerlink" title="一、MongoDB概述"></a>一、MongoDB概述</h3><h4 id="1-NoSQL简介"><a href="#1-NoSQL简介" class="headerlink" title="1.NoSQL简介"></a>1.NoSQL简介</h4><ol><li><p>概念：NoSQL（Not Only SQL的缩写），指的是非关系型数据库，是对不同于传统的关系型数据库的数据库管理系统的统称。用于超大规模数据的存储，数据存储不需要固定的模式，无需多余操作就可以横向扩展。</p></li><li><p>特点</p><ul><li>优点：具有高可扩展性、分布式计算、低成本、架构灵活且是半结构化数据，没有复杂的关系等。</li><li>缺点：没有标准化、有限的查询功能、最终一致是不直观的程序等。</li></ul></li><li><p>分类<br><img src="https://s2.loli.net/2022/07/24/BECweDurI6S7Vfn.png"></p></li></ol><h3 id="二、MongoDB简介"><a href="#二、MongoDB简介" class="headerlink" title="二、MongoDB简介"></a>二、MongoDB简介</h3><ol><li><p>概念：MongoDB 是由C++语言编写的一个基于分布式文件存储的开源文档型数据库系统。</p></li><li><p>功能：JSON 文档模型、动态的数据模式、二级索引强大、查询功能、自动分片、水平扩展、自动复制、高可用、文本搜索、企业级安全、聚合框架MapReduce、大文件存储GridFS。</p><ul><li>面向集合文档的存储：适合存储Bson（json的扩展）形式的数据；</li><li>格式自由，数据格式不固定，生产环境下修改结构都可以不影响程序运行；</li><li>强大的查询语句，面向对象的查询语言，基本覆盖sql语言所有能力；</li><li>完整的索引支持，支持查询计划；</li><li>使用分片集群提升系统扩展性；</li></ul></li><li><p>数据类型<br><img src="https://s2.loli.net/2022/07/24/Wq4Q1zTyHvwrKlN.png"></p></li></ol><h3 id="三、概念详解"><a href="#三、概念详解" class="headerlink" title="三、概念详解"></a>三、概念详解</h3><ol><li><p>数据库：MongoDB 默认的数据库为”db”，该数据库存储在data目录中。单个实例可以容纳多个独立的数据库，每一个都有自己的集合和权限，不同的数据库也放置在不同的文件中。</p></li><li><p>集合：集合就是 MongoDB 文档组，类似于 RDBMS 的表格。集合存在于数据库中，集合没有固定的结构，这意味着你在对集合可以插入不同格式和类型的数据，但通常情况下我们插入集合的数据都会有一定的关联性。</p></li><li><p>文档：一个键值(key-value)对(即BSON)。MongoDB 的文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型，这与关系型数据库有很大的区别，也是 MongoDB 非常突出的特点。</p></li></ol><h3 id="四、MongoDB-CLI"><a href="#四、MongoDB-CLI" class="headerlink" title="四、MongoDB CLI"></a>四、MongoDB CLI</h3><h4 id="4-1-增删改"><a href="#4-1-增删改" class="headerlink" title="4.1.增删改"></a>4.1.增删改</h4><p><img src="https://s2.loli.net/2022/07/24/c6mknpuNZsKzFJ1.png"></p><h4 id="4-2-操作符"><a href="#4-2-操作符" class="headerlink" title="4.2.操作符"></a>4.2.操作符</h4><p><img src="https://s2.loli.net/2022/07/24/XMagiOjQmKebGyL.png"></p><h4 id="4-3-查询"><a href="#4-3-查询" class="headerlink" title="4.3.查询"></a>4.3.查询</h4><ol><li><p>基本操作<br><img src="https://s2.loli.net/2022/07/24/lDM2YmtNHqzTPcQ.png"></p></li><li><p>聚合查询<br><img src="https://s2.loli.net/2022/07/24/rcY4el9HbG7mTg3.png"></p></li><li><p>管道操作：MongoDB的聚合管道将MongoDB文档在一个管道处理完毕后将结果传递给下一个管道处理<br><img src="https://s2.loli.net/2022/07/24/uViLNW4cGehkKdw.png"></p></li></ol><h3 id="五、索引和高可用"><a href="#五、索引和高可用" class="headerlink" title="五、索引和高可用"></a>五、索引和高可用</h3><h4 id="5-1-索引"><a href="#5-1-索引" class="headerlink" title="5.1.索引"></a>5.1.索引</h4><ol><li><p>作用：索引通常能够极大的提高查询的效率,如果没有索引,MongoDB在读取数据时必须扫描集合中的每个文件并选取那些符合查询条件的记录。索引主要用于排序和检索。<br>MongoDB使用 ensureIndex() 方法来创建索引，ensureIndex()方法基本语法格式如下所示：</p><ul><li><code>db.collection.createIndex(keys, options)</code><br>语法中 Key 值为要创建的索引字段,1为指定按升序创建索引,如果你想按降序来创建索引指定为-1,也可以指定为hashed（哈希索引）。</li></ul></li><li><p>索引属性</p><ul><li>background：是否后台构建索引,在生产环境中,如果数据量太大,构建索引可能会消耗很长时间,为了不影响业务,可以加上此参数,后台运行同时还会为其他读写操作让路，这个建议配置为true开启，这样来提高效率。</li><li>unique：是否为唯一索引</li></ul></li><li><p>索引类型</p><ul><li>单键索引：<br>在某一个特定的属性上建立索引,例如:db.users. createIndex({age:-1});<ol><li>mongoDB在ID上建立了唯一的单键索引,所以经常会使用id来进行查询；</li><li>在索引字段上进行精确匹配、排序以及范围查找都会使用此索引；</li></ol></li></ul></li></ol><ul><li><p>复合索引：<br>  在多个特定的属性上建立索引,例如:db.users. createIndex({username:1,age:-1,country:1});</p><pre><code>  1. 复合索引键的排序顺序,可以确定该索引是否可以支持排序操作；  2. 在索引字段上进行精确匹配、排序以及范围查找都会使用此索引,但与索引的顺序有关；  3. 为了性能考虑,应删除存在与第一个键相同的单键索引</code></pre></li><li><p>多键索引：<br>  在数组的属性上建立索引,例如:db.users. createIndex({favorites.city:1});</p></li><li><p>哈希索引：<br>  不同于传统的B-树索引,哈希索引使用hash函数来创建索引。</p><pre><code>  1. 在索引字段上进行精确匹配,但不支持范围查询,不支持多键hash；  2. Hash索引上的入口是均匀分布的,在分片集合中非常有用；</code></pre></li></ul><ol start="4"><li>优化目标<ul><li>根据需求建立索引</li><li>每个查询都要使用索引以提高查询效率, winningPlan. stage 必须为IXSCAN ；</li><li>追求totalDocsExamined = nReturned</li></ul></li></ol><h4 id="5-2-高可用"><a href="#5-2-高可用" class="headerlink" title="5.2.高可用"></a>5.2.高可用</h4><ol><li>可复制集<br> 可复制集是跨多个MongDB服务器（节点）分布和维护数据的方法。mongoDB可以把数据从一个节点复制到其他节点并在修改时进行同步,集群中的节点配置为自动同步数据；旧方法叫做主从复制,mongoDB 3.0以后推荐使用可复制集； 作用：<pre><code> 1. 避免数据丢失,保障数据安全,提高系统安全性；     （最少3节点,最大50节点） 2. 自动化灾备机制,主节点宕机后通过选举产生新主机；提高系统健壮性；     （7个选举节点上限） 3. 读写分离,负载均衡,提高系统性能； 4. 生产环境推荐的部署模式； </code></pre> 原理：<pre><code> 1. 数据同步：从节点与主节点保持长轮询；1.从节点查询本机oplog最新时间戳；2.查询主节点oplog晚于此时间戳的所有文档；3.加载这些文档，并根据log执行写操作； 2. 阻塞复制：与writeconcern相关，不需要同步到从节点的策略（如： acknowledged Unacknowledged 、w1），数据同步都是异步的，其他情况都是同步； 3. 心跳机制：成员之间会每2s 进行一次心跳检测（ping操作），发现故障后进行选举和故障转移； 4. 选举制度：主节点故障后，其余节点根据优先级和bully算法选举出新的主节点，在选出主节点之前，集群服务是只读的； </code></pre> 注意：<pre><code> MongoDB复制集里Primary节点是不固定的,所以生产环境千万不要直连Primary。</code></pre></li></ol><ol start="2"><li>分片集群<br> 分片是把大型数据集进行分区成更小的可管理的片,这些数据片分散到不同的mongoDB节点,这些节点组成了分片集群。 作用：<pre><code> 1. 数据海量增长,需要更大的读写吞吐量：存储分布式 2. 单台服务器内存、cpu等资源是有瓶颈的：负载分布式 </code></pre> 注意：分片集群是个双刃剑,在提高系统可扩展性和性能的同时,增大了系统的复杂性,所以在实施之前请确定是必须的。 分片注意点：<pre><code> 1. 热点 :某些分片键会导致所有的读或者写请求都操作在单个数据块或者分片上,导致单个分片服务器严重不堪重负。自增长的分片键容易导致写热点问题； 2. 不可分割数据块:过于粗粒度的分片键可能导致许多文档使用相同的分片键,这意味着这些文档不能被分割为多个数据块,限制了mongoDB均匀分布数据的能力； 3. 查询障碍:分片键与查询没有关联,造成糟糕的查询性能。  </code></pre> 建议：<pre><code> 1. 不要使用自增长的字段作为分片键,避免热点问题； 2. 不能使用粗粒度的分片键,避免数据块无法分割； 3. 不能使用完全随机的分片键值,造成查询性能低下； 4. 使用与常用查询相关的字段作为分片键,而且包含唯一字段（如业务主键,id等）； 5. 索引对于分区同样重要,每个分片集合上要有同样的索引,分片键默认成为索引；分片集合只允许在id和分片键上创建唯一索引；</code></pre></li></ol><h3 id="六、尾巴"><a href="#六、尾巴" class="headerlink" title="六、尾巴"></a>六、尾巴</h3><ul><li><a href="https://docs.mongoing.com/">MongoDB中文手册|官方文档中文版 - MongoDB-CN-Manual</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>整点薯条</title>
      <link href="/posts/708cfbf3.html"/>
      <url>/posts/708cfbf3.html</url>
      
        <content type="html"><![CDATA[<ul><li><p><a href="https://www.bilibili.com/video/BV1Rv4y1w7hA">“cheems，你要去码头整点薯条吗？”_哔哩哔哩_bilibili</a></p></li><li><p><a href="https://book.douban.com/subject/35632117/">我能有什么坏心思呢 (豆瓣)</a></p></li></ul><p><img src="https://s2.loli.net/2022/07/10/Bgy2P4WQNqiKv6a.jpg"></p><ul><li>“我们要飞向何方？”<br>“我打算待会儿去码头整点薯条。”<br>“你误会我了伙计，我说的是咱们这一辈子的终极目标，归根结底，活着到底是为了什么？”<br>“为了，待会去码头整点薯条。”</li></ul><ul><li>“cheems…,别骗自己了，在你内心深处，你并不是为了看极光而来，你只是想逃避，想逃避你现在、过去以及未来的生活。可是在逃避之后呢？你还是要回来面对一切。你并不只是因为生命没有意义而想要放弃，You are afraid,害怕你未来痛苦且没有希望的人生将要如何度过。过去的你将未来的希望寄托在一个看起来有意义有价值的事情上——看极光，可那不过是镜花水月。当你真正意识到这一点时，你就对生活彻底投降了。既然看极光没有意义，既然生命没有任何意义，那为什么还要继续生活呢。可是，cheems,正因为世界的现在、过去、将来都不存在意义，正因为生命本就无所意义，我们才得以从幻梦中解脱，得以真实的去面对这个虚无的世界。将意义抛下吧，那并不重要。在一切旧思想被打碎重组后，我们才会得以新生。所以，cheems,回到一切的根源上去吧，为了做某件事情而去做，而生命的意义，就是…去码头整点薯条！没有任何理由，也无需任何意义，只是为了整点薯条而整点薯条，活在每一个必将来到的当下，不受意义的控制与折磨，然后与这虚无、残酷、而优痛苦的生活斗争到最后一秒，在每一个痛苦且没有意义的日子里起舞，最后勇敢的爱上生活，不才是这个世界最有勇气，最值得奋斗的事情吗？所以，cheems,你的答案是？”</li></ul><ul><li>人会诞生三次。<br>第一次是在你发出第一声啼哭的时候，你在生理意义上诞生了。<br>第二次是在你初识世界，思考事物的时候，你在社会意义上诞生了。<br>第三次是在你最黑暗最沉重的日子里，你自己把自己从坟墓里刨出来的时候，一个完整的人类才算是真正诞生了。</li></ul><ul><li>“为什么你要去码头整点薯条？”<br>“因为我想，这便够了”</li></ul><ul><li>在宇宙这样宏观的尺度下，人类活动简直显得毫无意义，所以不要活的太严肃，大胆一点生活，别太在意别人的眼光，去成为理想中的自己，做自己想做的事吧。</li></ul><ul><li>加缪有这么一句话：只要我能拥抱这个世界，那么拥抱得拙劣又有何妨？我们每个人都在不断地走在无意义和寻找意义的路上，或者说寻找意义本身就是我们存在的意义。假如你知道了自己明天就会死，然后你从今天开始逃离，但你想逃离的今天，本就是很多人无法逃离的明天。所以不如直面生活的无意义，因为“玫瑰是不需要理由的”。</li></ul><ul><li>码头薯条不是说理想不好，不切实际什么的。<br>鸽子意思是：cheems是用理想来逃避枯燥无味的生活，一是幻想乡，远离现实；二是寄托于人生意义。<br>而当cheems真的达成梦想后，真正的陷入了虚无：完成后的落寞，以及现实没有一丁点改变。所以cheems想没入海中…<br>所以，码头薯条你可以翻译为热爱生活。梦想就是梦想，它可以是人生意义，但它并不是你不热爱生活的理由，不然你就跟cheems一样，即便达成，现实也一点没变。<br>鸽子也劝回了cheems，不如去码头整点薯条，随心所欲一点，慢慢地热爱生活。</li></ul><ul><li>“如果我死在了这条路上怎么办”<br>那你至少死在了这条路上，而不是在千万个“如果”的束缚中。</li></ul><ul><li>世上只有一种英雄主义，就是在认清生活真相之后依然热爱生活。</li></ul><ul><li>实事求是，求真务实，不管黑鸥白鸥，弄到薯条就是好鸥。</li></ul><ul><li>千金难买爷乐意</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关键词提取（TF-IDF &amp; TextRank）</title>
      <link href="/posts/1b26c2a4.html"/>
      <url>/posts/1b26c2a4.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、代码实现如下"><a href="#一、代码实现如下" class="headerlink" title="一、代码实现如下"></a>一、代码实现如下</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jieba.posseg</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">text = <span class="string">&#x27;广州地铁集团工会主席钟学军在开幕式上表示，在交通强国战略的指引下，我国城市轨道&#x27;</span> \</span><br><span class="line"></span><br><span class="line">       <span class="string">&#x27;交通事业蓬勃发展，城轨线路运营里程不断增长，目前，全国城市轨道交通线网总里程&#x27;</span> \</span><br><span class="line"></span><br><span class="line">       <span class="string">&#x27;接近5000公里，每天客运量超过5000万人次。城市轨道交通是高新技术密集型行业，&#x27;</span> \</span><br><span class="line"></span><br><span class="line">       <span class="string">&#x27;几十个专业纷繁复杂，几十万台（套）设备必须安全可靠，线网调度必须联动周密，&#x27;</span> \</span><br><span class="line"></span><br><span class="line">       <span class="string">&#x27;列车运行必须精准分秒不差。城市轨道交通又是人员密集型行业，产业工人素质的好坏、&#x27;</span> \</span><br><span class="line"></span><br><span class="line">       <span class="string">&#x27;高低，直接与人民生命安全息息相关。本届“国赛”选取的列车司机和行车值班员，&#x27;</span> \</span><br><span class="line"></span><br><span class="line">       <span class="string">&#x27;正是行业安全运营的核心、关键工种。开展职业技能大赛的目的，就是要弘扬&#x27;</span> \</span><br><span class="line"></span><br><span class="line">       <span class="string">&#x27;“工匠精神”，在行业内形成“比、学、赶、帮、超”的良好氛围，在校园里掀起&#x27;</span> \</span><br><span class="line"></span><br><span class="line">       <span class="string">&#x27;“学本领、争上游”的学习热潮，共同为我国城市轨道交通的高质量发展和交通强国&#x27;</span> \</span><br><span class="line"></span><br><span class="line">       <span class="string">&#x27;建设目标的全面实现做出应有的贡献。&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Stop_words</span>():</span></span><br><span class="line"></span><br><span class="line">    stopword = []</span><br><span class="line"></span><br><span class="line">    data = []</span><br><span class="line"></span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;./data/stopword.txt&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line"></span><br><span class="line">        data.append(line)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line"></span><br><span class="line">        output = <span class="built_in">str</span>(i).replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        stopword.append(output)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> stopword</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 采用jieba进行词性标注，对当前文档过滤词性和停用词</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Filter_word</span>(<span class="params">text</span>):</span></span><br><span class="line"></span><br><span class="line">    filter_word = [] <span class="comment"># 保存候选关键词列表</span></span><br><span class="line"></span><br><span class="line">    stopword = Stop_words()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#完成文本text的词性标注</span></span><br><span class="line"></span><br><span class="line">    text = jieba.posseg.cut(text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> word, flag <span class="keyword">in</span> text:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> flag.startswith(<span class="string">&#x27;n&#x27;</span>) <span class="keyword">is</span> <span class="literal">False</span>:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> word <span class="keyword">in</span> stopword <span class="keyword">and</span> <span class="built_in">len</span>(word) &gt; <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">            filter_word.append(word)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> filter_word</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载文档集，对文档集过滤词性和停用词</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Filter_words</span>(<span class="params">data_path = <span class="string">&#x27;./data/corpus.txt&#x27;</span></span>):</span></span><br><span class="line"></span><br><span class="line">    document = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">open</span>(data_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>):</span><br><span class="line"></span><br><span class="line">        segment = jieba.posseg.cut(line.strip())</span><br><span class="line"></span><br><span class="line">        filter_words = []</span><br><span class="line"></span><br><span class="line">        stopword = Stop_words()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> word, flag <span class="keyword">in</span> segment:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> flag.startswith(<span class="string">&#x27;n&#x27;</span>) <span class="keyword">is</span> <span class="literal">False</span>:</span><br><span class="line"></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> word <span class="keyword">in</span> stopword <span class="keyword">and</span> <span class="built_in">len</span>(word) &gt; <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">                filter_words.append(word)</span><br><span class="line"></span><br><span class="line">        document.append(filter_words)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> document</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [x + <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line">a</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tf_idf</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 统计TF值</span></span><br><span class="line"></span><br><span class="line">    tf_dict = &#123;&#125; <span class="comment">#保存候选关键词的tf值</span></span><br><span class="line"></span><br><span class="line">    filter_word = Filter_word(text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> filter_word:</span><br><span class="line"></span><br><span class="line">        tfreq = tf_dict.get(word)</span><br><span class="line"></span><br><span class="line">        freq = tfreq + <span class="number">1</span> <span class="keyword">if</span> tfreq <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        tf_dict[word] = freq</span><br><span class="line"></span><br><span class="line">    tf_dict = &#123;word:freq/<span class="built_in">len</span>(text) <span class="keyword">for</span> word, freq <span class="keyword">in</span> tf_dict.items()&#125;</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    for word in filter_word:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        if word not in tf_dict:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            tf_dict[word] = 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        else:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            tf_dict[word] += 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    for word in tf_dict:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        tf_dict[word] = tf_dict[word] / len(text)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 统计IDF值</span></span><br><span class="line"></span><br><span class="line">    idf_dict = &#123;&#125; <span class="comment">#用于保存候选关键词对应的逆文档频率</span></span><br><span class="line"></span><br><span class="line">    document = Filter_words()</span><br><span class="line"></span><br><span class="line">    doc_total = <span class="built_in">len</span>(document)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> doc <span class="keyword">in</span> document:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> <span class="built_in">set</span>(doc):</span><br><span class="line"></span><br><span class="line">            <span class="comment">#这里统计的是包含这个候选关键词的文档数</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> word <span class="keyword">not</span> <span class="keyword">in</span> idf_dict:</span><br><span class="line"></span><br><span class="line">                idf_dict[word] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">                idf_dict[word] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> idf_dict:</span><br><span class="line"></span><br><span class="line">        idf_dict[word] = math.log(doc_total / (idf_dict[word] + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算TF-IDF值</span></span><br><span class="line"></span><br><span class="line">    tf_idf_dict = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> filter_word:</span><br><span class="line"></span><br><span class="line">        <span class="comment">#因为有些词只在text中出现，文档集并没有</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#为了防止出现keyerror，提前把这部分词对应的逆文档频率设置为0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> word <span class="keyword">not</span> <span class="keyword">in</span> idf_dict:</span><br><span class="line"></span><br><span class="line">            idf_dict[word] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        tf_idf_dict[word] = tf_dict[word] * idf_dict[word]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 提取前10个关键词</span></span><br><span class="line"></span><br><span class="line">    keyword = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;TF-IDF模型结果：&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#operator.itemgetter函数获取的不是值，而是一个函数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#通过这个函数获取到tf_idf_dict.items()第二个域的值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> <span class="built_in">sorted</span>(tf_idf_dict.items(), key=operator.itemgetter(<span class="number">1</span>),</span><br><span class="line"></span><br><span class="line">                             reverse=<span class="literal">True</span>)[:keyword]:</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(key + <span class="string">&#x27;/&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tf_idf1</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 统计TF值</span></span><br><span class="line"></span><br><span class="line">    tf_dict = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    filter_word = Filter_word(text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> filter_word:</span><br><span class="line"></span><br><span class="line">        tfreq = tf_dict.get(word)</span><br><span class="line"></span><br><span class="line">        freq = tfreq + <span class="number">1</span> <span class="keyword">if</span> tfreq <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        tf_dict[word] = freq</span><br><span class="line"></span><br><span class="line">    tf_dict = &#123;word:freq/<span class="built_in">len</span>(text) <span class="keyword">for</span> word, freq <span class="keyword">in</span> tf_dict.items()&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 统计IDF值</span></span><br><span class="line"></span><br><span class="line">    idf_dict = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    document = Filter_words()</span><br><span class="line"></span><br><span class="line">    doc_total = <span class="built_in">len</span>(document)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> tf_dict.keys():</span><br><span class="line"></span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> doc <span class="keyword">in</span> document:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> word <span class="keyword">in</span> <span class="built_in">set</span>(doc):</span><br><span class="line"></span><br><span class="line">                flag = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">                tfreq = idf_dict.get(word)</span><br><span class="line"></span><br><span class="line">                freq = tfreq + <span class="number">1</span> <span class="keyword">if</span> tfreq <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                idf_dict[word] = freq</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line"></span><br><span class="line">            idf_dict[word] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    idf_dict = &#123;word:math.log(doc_total/(freq + <span class="number">1</span>)) <span class="keyword">for</span> word, freq <span class="keyword">in</span> idf_dict.items()&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算TF-IDF值</span></span><br><span class="line"></span><br><span class="line">    tf_idf_dict = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(tf_dict.keys())) <span class="comment">#53个</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(idf_dict.keys())) <span class="comment">#29个</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> idf_dict.keys():</span><br><span class="line"></span><br><span class="line">        tf_idf_dict[word] = tf_dict[word] * idf_dict[word]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 提取前10个关键词</span></span><br><span class="line"></span><br><span class="line">    keyword = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;TF-IDF模型结果：&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#operator.itemgetter函数获取的不是值，而是定义了一个函数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#通过该函数获取到tf_idf_dict.items()的第二个域的值。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> <span class="built_in">sorted</span>(tf_idf_dict.items(), key=operator.itemgetter(<span class="number">1</span>),</span><br><span class="line"></span><br><span class="line">                             reverse=<span class="literal">True</span>)[:keyword]:</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(key + <span class="string">&#x27;/&#x27;</span>, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tf_idf()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;/n&quot;</span>)</span><br><span class="line"></span><br><span class="line">tf_idf1()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">TextRank</span>():</span></span><br><span class="line"></span><br><span class="line">    window = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#字典的key是候选关键词，value是这个关键词在无向加权图中的边</span></span><br><span class="line"></span><br><span class="line">    win_dict = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    filter_word = Filter_word(text)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(filter_word)</span><br><span class="line"></span><br><span class="line">    length = <span class="built_in">len</span>(filter_word)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构建每个节点的窗口集合</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> filter_word:</span><br><span class="line"></span><br><span class="line">        index = filter_word.index(word)</span><br><span class="line"></span><br><span class="line">       <span class="comment"># 设置窗口左、右边界，控制边界范围</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> word <span class="keyword">not</span> <span class="keyword">in</span> win_dict:</span><br><span class="line"></span><br><span class="line">            left = index - window + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            right = index + window</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> left &lt; <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">                left = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> right &gt;= length:</span><br><span class="line"></span><br><span class="line">                right = length</span><br><span class="line"></span><br><span class="line">            words = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line">            <span class="comment">#print(&#x27;start&#x27;)</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(left, right):</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> i == index:</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                words.add(filter_word[i])</span><br><span class="line"></span><br><span class="line">                win_dict[word] = words</span><br><span class="line"></span><br><span class="line">            <span class="comment">#print(win_dict)</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">#print(&#x27;end&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构建相连的边的关系矩阵</span></span><br><span class="line"></span><br><span class="line">    word_dict = <span class="built_in">list</span>(<span class="built_in">set</span>(filter_word))</span><br><span class="line"></span><br><span class="line">    lengths = <span class="built_in">len</span>(<span class="built_in">set</span>(filter_word))</span><br><span class="line"></span><br><span class="line">    matrix = pd.DataFrame(np.zeros([lengths,lengths]))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> win_dict:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> win_dict[word]:</span><br><span class="line"></span><br><span class="line">            index1 = word_dict.index(word)</span><br><span class="line"></span><br><span class="line">            index2 = word_dict.index(value)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#因为是无向图，所以矩阵是对称的</span></span><br><span class="line"></span><br><span class="line">            matrix.iloc[index1, index2] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            matrix.iloc[index2, index1] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    summ = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    cols = matrix.shape[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    rows = matrix.shape[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 归一化矩阵</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(cols):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rows):</span><br><span class="line"></span><br><span class="line">            summ += matrix.iloc[i, j]</span><br><span class="line"></span><br><span class="line">        matrix[j] /= summ</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 根据公式计算textrank值</span></span><br><span class="line"></span><br><span class="line">    d = <span class="number">0.85</span></span><br><span class="line"></span><br><span class="line">    iter_num = <span class="number">700</span></span><br><span class="line"></span><br><span class="line">    word_textrank = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    textrank = np.ones([lengths, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(iter_num):</span><br><span class="line"></span><br><span class="line">        textrank = (<span class="number">1</span> - d) + d * np.dot(matrix, textrank)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将词语和textrank值一一对应</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(textrank)):</span><br><span class="line"></span><br><span class="line">        word = word_dict[i]</span><br><span class="line"></span><br><span class="line">        word_textrank[word] = textrank[i, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    keyword = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;------------------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;textrank模型结果：&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> <span class="built_in">sorted</span>(word_textrank.items(), key=operator.itemgetter(<span class="number">1</span>),</span><br><span class="line"></span><br><span class="line">                             reverse=<span class="literal">True</span>)[:keyword]:</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(key + <span class="string">&#x27;/&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TextRank()</span><br></pre></td></tr></table></figure><h2 id="二、尾巴"><a href="#二、尾巴" class="headerlink" title="二、尾巴"></a>二、尾巴</h2><ul><li><p><a href="https://baike.baidu.com/item/tf-idf/8816134">TF-IDF -百度百科</a></p></li><li><p><a href="https://blog.csdn.net/asialee_bird/article/details/96894533">TextRank算法介绍及实现 -CSDN博客</a></p></li><li><p><a href="https://pan.baidu.com/s/170wlOKtJM8gxb7WcpPpEfA">相关数据文件下载 -sgpr</a></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Deep Learning预测5年内皮马印第安人糖尿病发作的概率</title>
      <link href="/posts/6201130a.html"/>
      <url>/posts/6201130a.html</url>
      
        <content type="html"><![CDATA[<h2 id="代码实现如下"><a href="#代码实现如下" class="headerlink" title="代码实现如下"></a>代码实现如下</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> make_scorer,accuracy_score</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> tree</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> graphviz</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载数据集</span></span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">&quot;diabetes.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line">data</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = data.iloc[:,:-<span class="number">1</span>].values</span><br><span class="line"></span><br><span class="line">y = data.iloc[:,-<span class="number">1</span>].values</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义决策树模型，采用10折交叉验证</span></span><br><span class="line"></span><br><span class="line">model_dtc = DecisionTreeClassifier(criterion=<span class="string">&#x27;entropy&#x27;</span>,max_depth=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">acc_score_dtc = cross_val_score(model_dtc,x,y,cv=<span class="number">10</span>,scoring=<span class="string">&#x27;accuracy&#x27;</span>) <span class="comment"># 准确率</span></span><br><span class="line"></span><br><span class="line">precision_score_dtc = cross_val_score(model_dtc,x,y,cv=<span class="number">10</span>,scoring=<span class="string">&#x27;precision&#x27;</span>)  <span class="comment"># 精确率</span></span><br><span class="line"></span><br><span class="line">recall_score_dtc = cross_val_score(model_dtc,x,y,cv=<span class="number">10</span>,scoring=<span class="string">&#x27;recall&#x27;</span>)  <span class="comment"># 召回率</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">acc_score_dtc</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可视化决策树的结构</span></span><br><span class="line"></span><br><span class="line">feature_name = data.columns.values[:-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line">model_dtc.fit(x_train,y_train)</span><br><span class="line"></span><br><span class="line">dot_data = tree.export_graphviz(model_dtc</span><br><span class="line"></span><br><span class="line">                                ,out_file= <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">                                ,feature_names = feature_name</span><br><span class="line"></span><br><span class="line">                                ,class_names=[<span class="string">&#x27;class_0&#x27;</span>,<span class="string">&#x27;class_1&#x27;</span>]</span><br><span class="line"></span><br><span class="line">                                ,filled=<span class="literal">True</span></span><br><span class="line"></span><br><span class="line">                                ,rounded=<span class="literal">True</span></span><br><span class="line"></span><br><span class="line">                               )</span><br><span class="line"></span><br><span class="line">graph = graphviz.Source(dot_data)</span><br><span class="line"></span><br><span class="line">graph.render(<span class="string">&quot;iris&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建随机森林对象</span></span><br><span class="line"></span><br><span class="line">rfClassifier = RandomForestClassifier()</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 网络搜索的模型候选参数，即随机森林的候选参数</span></span><br><span class="line"></span><br><span class="line">paramGrid = <span class="built_in">dict</span>(</span><br><span class="line"></span><br><span class="line">    max_depth = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],             <span class="comment"># 最大数深度候选值</span></span><br><span class="line"></span><br><span class="line">    criterion = [<span class="string">&quot;gini&quot;</span>,<span class="string">&quot;entropy&quot;</span>],      <span class="comment"># 评选节点分裂的候选标准</span></span><br><span class="line"></span><br><span class="line">    max_leaf_nodes = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>],      <span class="comment"># 最大叶子数候选值</span></span><br><span class="line"></span><br><span class="line">    n_estimators = [<span class="number">10</span>,<span class="number">50</span>,<span class="number">100</span>,<span class="number">150</span>,<span class="number">200</span>]   <span class="comment"># 森林中树的候选数量</span></span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建网络搜索对象</span></span><br><span class="line"></span><br><span class="line">gridSearchCV = GridSearchCV(</span><br><span class="line"></span><br><span class="line">    rfClassifier,param_grid=paramGrid,</span><br><span class="line"></span><br><span class="line">    cv=<span class="number">10</span>,verbose=<span class="number">1</span>,n_jobs=<span class="number">2</span>,scoring=make_scorer(accuracy_score)</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开始进行网络搜索，寻找最优参数</span></span><br><span class="line"></span><br><span class="line">grid = gridSearchCV.fit(x,y)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(grid.best_score_)   <span class="comment"># 打印最优准确率得分</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(grid.best_params_)  <span class="comment"># 打印最优超参数</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到最优超参数：&#x27;max_depth&#x27;: 3, &#x27;max_leaf_nodes&#x27;: 8, &#x27;n_estimators&#x27;: 150</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">trees = []   <span class="comment"># 存放树的数量</span></span><br><span class="line"></span><br><span class="line">errs = []    <span class="comment"># 存放错误率</span></span><br><span class="line"></span><br><span class="line">accs = []    <span class="comment"># 准确率</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 划分训练集喝测试集</span></span><br><span class="line"></span><br><span class="line">x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line">t_num = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">0</span>,<span class="number">200</span>,<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">t_num = [i+<span class="number">10</span> <span class="keyword">for</span> i <span class="keyword">in</span> t_num]</span><br><span class="line"></span><br><span class="line">t_num = <span class="built_in">list</span>([<span class="number">1</span>]+t_num)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> t_num:</span><br><span class="line"></span><br><span class="line">    trees.append(t)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建随机森林</span></span><br><span class="line"></span><br><span class="line">    rfClassifier = RandomForestClassifier(max_depth=<span class="number">3</span>,max_leaf_nodes=<span class="number">8</span>,criterion=<span class="string">&quot;gini&quot;</span>,n_estimators=t)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用训练集训练模型</span></span><br><span class="line"></span><br><span class="line">    rfClassifier.fit(x_train,y_train)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用训练后的模型进行预测</span></span><br><span class="line"></span><br><span class="line">    y_test_predict = rfClassifier.predict(x_test)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算准确率</span></span><br><span class="line"></span><br><span class="line">    acc = accuracy_score(y_true=y_test,y_pred=y_test_predict)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 准确率</span></span><br><span class="line"></span><br><span class="line">    accs.append(acc)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算错误率</span></span><br><span class="line"></span><br><span class="line">    err = <span class="number">1</span>-acc</span><br><span class="line"></span><br><span class="line">    errs.append(err)</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;trees&quot;</span>:trees,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;errs&quot;</span>:errs,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;accs&quot;</span>:accs</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">df.plot(x=<span class="string">&quot;trees&quot;</span>,y=<span class="string">&quot;errs&quot;</span>,figsize=(<span class="number">10</span>,<span class="number">5</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;随机森林准确率：&quot;</span>,acc)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;决策树准确率：&quot;</span>,acc_score_dtc.mean())</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h2><ul><li><p><a href="https://aistudio.baidu.com/aistudio/index">飞桨AI Studio - 人工智能学习实训社区</a></p></li><li><p><a href="https://github.com/GiesenC/DeepLearning">GitHub - GiesenC/DeepLearning: DeepLearning model training, evaluation and prediction related code.</a></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Deep Learning波士顿房价数据回归分析</title>
      <link href="/posts/6f8d5f8b.html"/>
      <url>/posts/6f8d5f8b.html</url>
      
        <content type="html"><![CDATA[<h2 id="代码实现如下"><a href="#代码实现如下" class="headerlink" title="代码实现如下"></a>代码实现如下</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_boston</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> DataFrame,Series</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> PolynomialFeatures</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># In[5]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">dataset = load_boston()</span><br><span class="line"></span><br><span class="line">x_data = dataset.data</span><br><span class="line"></span><br><span class="line">y_data = dataset.target <span class="comment"># price</span></span><br><span class="line"></span><br><span class="line">name_data = dataset.feature_names <span class="comment"># 13个列名</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[25]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x_data)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(y_data)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(name_data)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[163]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">x_data = pd.DataFrame(x_data,columns=name_data)</span><br><span class="line"></span><br><span class="line">y_data = pd.DataFrame(y_data,columns=[<span class="string">&#x27;price&#x27;</span>])</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[164]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">data = pd.concat((x_data,y_data),axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[171]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data.describe())</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ### 城市人均犯罪率与房价的分析</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[165]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算相关系数</span></span><br><span class="line"></span><br><span class="line">corr = x_data[<span class="string">&quot;CRIM&quot;</span>].corr(y_data[<span class="string">&quot;price&quot;</span>])  </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(corr)            <span class="comment"># 低度相关</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[170]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制散点图</span></span><br><span class="line"></span><br><span class="line">x=data[[<span class="string">&quot;CRIM&quot;</span>]]  </span><br><span class="line"></span><br><span class="line">y=data[<span class="string">&#x27;price&#x27;</span>]</span><br><span class="line"></span><br><span class="line">data.plot(x=<span class="string">&#x27;CRIM&#x27;</span>,y=<span class="string">&#x27;price&#x27;</span>,kind=<span class="string">&#x27;scatter&#x27;</span>)  </span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[192]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据模型参数，建立线性回归模型</span></span><br><span class="line"></span><br><span class="line">lrModel=LinearRegression()</span><br><span class="line"></span><br><span class="line">lrModel.fit(x,y)   <span class="comment"># 训练模型</span></span><br><span class="line"></span><br><span class="line">a = lrModel.coef_[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[193]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">X = np.linspace(<span class="number">0</span>,<span class="number">100</span>,<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">Y = a*X+b</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[194]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line"></span><br><span class="line">plt.plot(X,Y)</span><br><span class="line"></span><br><span class="line">plt.scatter(x=data[<span class="string">&#x27;CRIM&#x27;</span>],y=data[<span class="string">&#x27;price&#x27;</span>])</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[195]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证模型</span></span><br><span class="line"></span><br><span class="line">s = lrModel.score(x,y)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[196]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测</span></span><br><span class="line"></span><br><span class="line">px = pd.DataFrame(</span><br><span class="line"></span><br><span class="line">    &#123;<span class="string">&#x27;CRIM&#x27;</span>:[<span class="number">0.4</span>,<span class="number">0.5</span>,<span class="number">0.6</span>]&#125;</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">p = lrModel.predict(px)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ### 住宅用地所占比例与房价的分析</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[211]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算相关系数</span></span><br><span class="line"></span><br><span class="line">corr = x_data[<span class="string">&quot;ZN&quot;</span>].corr(y_data[<span class="string">&quot;price&quot;</span>])  </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(corr)            <span class="comment"># 低度相关</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[212]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制散点图</span></span><br><span class="line"></span><br><span class="line">x=data[[<span class="string">&quot;ZN&quot;</span>]]  </span><br><span class="line"></span><br><span class="line">y=data[<span class="string">&#x27;price&#x27;</span>]</span><br><span class="line"></span><br><span class="line">data.plot(x=<span class="string">&#x27;ZN&#x27;</span>,y=<span class="string">&#x27;price&#x27;</span>,kind=<span class="string">&#x27;scatter&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[213]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据模型参数，建立线性回归模型</span></span><br><span class="line"></span><br><span class="line">lrModel=LinearRegression()</span><br><span class="line"></span><br><span class="line">lrModel.fit(x,y)   <span class="comment"># 训练模型</span></span><br><span class="line"></span><br><span class="line">a = lrModel.coef_[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[214]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">X = np.linspace(<span class="number">0</span>,<span class="number">100</span>,<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">Y = a*X+b</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[215]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line"></span><br><span class="line">plt.plot(X,Y)</span><br><span class="line"></span><br><span class="line">plt.scatter(x=data[<span class="string">&#x27;ZN&#x27;</span>],y=data[<span class="string">&#x27;price&#x27;</span>])</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[216]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证模型</span></span><br><span class="line"></span><br><span class="line">s = lrModel.score(x,y)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[217]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测</span></span><br><span class="line"></span><br><span class="line">px = pd.DataFrame(</span><br><span class="line"></span><br><span class="line">    &#123;<span class="string">&#x27;ZN&#x27;</span>:[<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>]&#125;</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">p = lrModel.predict(px)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ### 城镇中非住宅用地所占比例与房价的分析</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[218]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算相关系数</span></span><br><span class="line"></span><br><span class="line">corr = x_data[<span class="string">&quot;INDUS&quot;</span>].corr(y_data[<span class="string">&quot;price&quot;</span>])  </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(corr)            <span class="comment"># 低度相关</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[219]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制散点图</span></span><br><span class="line"></span><br><span class="line">x=data[[<span class="string">&quot;INDUS&quot;</span>]]  </span><br><span class="line"></span><br><span class="line">y=data[<span class="string">&#x27;price&#x27;</span>]</span><br><span class="line"></span><br><span class="line">data.plot(x=<span class="string">&#x27;INDUS&#x27;</span>,y=<span class="string">&#x27;price&#x27;</span>,kind=<span class="string">&#x27;scatter&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[220]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据模型参数，建立线性回归模型</span></span><br><span class="line"></span><br><span class="line">lrModel=LinearRegression()</span><br><span class="line"></span><br><span class="line">lrModel.fit(x,y)   <span class="comment"># 训练模型</span></span><br><span class="line"></span><br><span class="line">a = lrModel.coef_[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[229]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">X = np.linspace(<span class="number">0</span>,<span class="number">30</span>,<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">Y = a*X+b</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[230]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line"></span><br><span class="line">plt.plot(X,Y)</span><br><span class="line"></span><br><span class="line">plt.scatter(x=data[<span class="string">&#x27;INDUS&#x27;</span>],y=data[<span class="string">&#x27;price&#x27;</span>])</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[231]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证模型</span></span><br><span class="line"></span><br><span class="line">s = lrModel.score(x,y)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[232]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测</span></span><br><span class="line"></span><br><span class="line">px = pd.DataFrame(</span><br><span class="line"></span><br><span class="line">    &#123;<span class="string">&#x27;INDUS&#x27;</span>:[<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>]&#125;</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">p = lrModel.predict(px)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ### 环保指数与房价的分析</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[257]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算相关系数</span></span><br><span class="line"></span><br><span class="line">corr = x_data[<span class="string">&quot;NOX&quot;</span>].corr(y_data[<span class="string">&quot;price&quot;</span>])  </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(corr)            <span class="comment"># 低度相关</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[258]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制散点图</span></span><br><span class="line"></span><br><span class="line">x=data[[<span class="string">&quot;NOX&quot;</span>]]  </span><br><span class="line"></span><br><span class="line">y=data[<span class="string">&#x27;price&#x27;</span>]</span><br><span class="line"></span><br><span class="line">data.plot(x=<span class="string">&#x27;NOX&#x27;</span>,y=<span class="string">&#x27;price&#x27;</span>,kind=<span class="string">&#x27;scatter&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[259]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据模型参数，建立线性回归模型</span></span><br><span class="line"></span><br><span class="line">lrModel=LinearRegression()</span><br><span class="line"></span><br><span class="line">lrModel.fit(x,y)   <span class="comment"># 训练模型</span></span><br><span class="line"></span><br><span class="line">a = lrModel.coef_[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">b = lrModel.intercept_</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[272]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">X = np.linspace(<span class="number">0</span>,<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">Y = a*X+b</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[273]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line"></span><br><span class="line">plt.plot(X,Y)</span><br><span class="line"></span><br><span class="line">plt.scatter(x=data[<span class="string">&#x27;NOX&#x27;</span>],y=data[<span class="string">&#x27;price&#x27;</span>])</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[274]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证模型</span></span><br><span class="line"></span><br><span class="line">s = lrModel.score(x,y)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[275]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测</span></span><br><span class="line"></span><br><span class="line">px = pd.DataFrame(</span><br><span class="line"></span><br><span class="line">    &#123;<span class="string">&#x27;NOX&#x27;</span>:[<span class="number">0.4</span>,<span class="number">0.5</span>,<span class="number">0.6</span>]&#125;</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">p = lrModel.predict(px)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ### 每栋住宅的房间数与房价的分析</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[276]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算相关系数</span></span><br><span class="line"></span><br><span class="line">corr = x_data[<span class="string">&quot;RM&quot;</span>].corr(y_data[<span class="string">&quot;price&quot;</span>])  </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(corr)            <span class="comment"># 显著相关</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[277]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">x=data[[<span class="string">&quot;RM&quot;</span>]]  </span><br><span class="line"></span><br><span class="line">y=data[<span class="string">&#x27;price&#x27;</span>]</span><br><span class="line"></span><br><span class="line">data.plot(x=<span class="string">&#x27;RM&#x27;</span>,y=<span class="string">&#x27;price&#x27;</span>,kind=<span class="string">&#x27;scatter&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[278]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据模型参数，建立线性回归模型</span></span><br><span class="line"></span><br><span class="line">lrModel=LinearRegression()</span><br><span class="line"></span><br><span class="line">lrModel.fit(x,y)   <span class="comment"># 训练模型</span></span><br><span class="line"></span><br><span class="line">a = lrModel.coef_[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">b = lrModel.intercept_</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[284]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">X = np.linspace(<span class="number">0</span>,<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">Y = a*X+b</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[285]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line"></span><br><span class="line">plt.plot(X,Y)</span><br><span class="line"></span><br><span class="line">plt.scatter(x=data[<span class="string">&#x27;RM&#x27;</span>],y=data[<span class="string">&#x27;price&#x27;</span>])</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[286]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证模型</span></span><br><span class="line"></span><br><span class="line">s = lrModel.score(x,y)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[287]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测</span></span><br><span class="line"></span><br><span class="line">px = pd.DataFrame(</span><br><span class="line"></span><br><span class="line">    &#123;<span class="string">&#x27;RM&#x27;</span>:[<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]&#125;</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">p = lrModel.predict(px)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ### 1940年以前建成的自住单位的比例与房价的分析</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[288]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算相关系数</span></span><br><span class="line"></span><br><span class="line">corr = x_data[<span class="string">&quot;AGE&quot;</span>].corr(y_data[<span class="string">&quot;price&quot;</span>])  </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(corr)            <span class="comment"># 低度相关</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[289]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">x=data[[<span class="string">&quot;AGE&quot;</span>]]  </span><br><span class="line"></span><br><span class="line">y=data[<span class="string">&#x27;price&#x27;</span>]</span><br><span class="line"></span><br><span class="line">data.plot(x=<span class="string">&#x27;AGE&#x27;</span>,y=<span class="string">&#x27;price&#x27;</span>,kind=<span class="string">&#x27;scatter&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[290]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据模型参数，建立线性回归模型</span></span><br><span class="line"></span><br><span class="line">lrModel=LinearRegression()</span><br><span class="line"></span><br><span class="line">lrModel.fit(x,y)   <span class="comment"># 训练模型</span></span><br><span class="line"></span><br><span class="line">a = lrModel.coef_[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">b = lrModel.intercept_</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[299]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">X = np.linspace(<span class="number">0</span>,<span class="number">100</span>,<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">Y = a*X+b</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[300]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line"></span><br><span class="line">plt.plot(X,Y)</span><br><span class="line"></span><br><span class="line">plt.scatter(x=data[<span class="string">&#x27;AGE&#x27;</span>],y=data[<span class="string">&#x27;price&#x27;</span>])</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[301]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证模型</span></span><br><span class="line"></span><br><span class="line">s = lrModel.score(x,y)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[302]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测</span></span><br><span class="line"></span><br><span class="line">px = pd.DataFrame(</span><br><span class="line"></span><br><span class="line">    &#123;<span class="string">&#x27;AGE&#x27;</span>:[<span class="number">60</span>,<span class="number">70</span>,<span class="number">80</span>]&#125;</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">p = lrModel.predict(px)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ### 距离5个波士顿的就业中心的加权距离与房价的分析</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[157]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算相关系数</span></span><br><span class="line"></span><br><span class="line">corr = x_data[<span class="string">&quot;DIS&quot;</span>].corr(y_data[<span class="string">&quot;price&quot;</span>])  </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(corr)            <span class="comment"># 无相关</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ### 距离高速公路的便利指数与房价的分析</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[303]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算相关系数</span></span><br><span class="line"></span><br><span class="line">corr = x_data[<span class="string">&quot;RAD&quot;</span>].corr(y_data[<span class="string">&quot;price&quot;</span>])  </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(corr)            <span class="comment"># 低度相关</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[304]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">x=data[[<span class="string">&quot;RAD&quot;</span>]]  </span><br><span class="line"></span><br><span class="line">y=data[<span class="string">&#x27;price&#x27;</span>]</span><br><span class="line"></span><br><span class="line">data.plot(x=<span class="string">&#x27;RAD&#x27;</span>,y=<span class="string">&#x27;price&#x27;</span>,kind=<span class="string">&#x27;scatter&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[305]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据模型参数，建立线性回归模型</span></span><br><span class="line"></span><br><span class="line">lrModel=LinearRegression()</span><br><span class="line"></span><br><span class="line">lrModel.fit(x,y)   <span class="comment"># 训练模型</span></span><br><span class="line"></span><br><span class="line">a = lrModel.coef_[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">b = lrModel.intercept_</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[306]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">X = np.linspace(<span class="number">0</span>,<span class="number">25</span>,<span class="number">25</span>)</span><br><span class="line"></span><br><span class="line">Y = a*X+b</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[309]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line"></span><br><span class="line">plt.plot(X,Y)</span><br><span class="line"></span><br><span class="line">plt.scatter(x=data[<span class="string">&#x27;RAD&#x27;</span>],y=data[<span class="string">&#x27;price&#x27;</span>])</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[310]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证模型</span></span><br><span class="line"></span><br><span class="line">s = lrModel.score(x,y)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[311]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测</span></span><br><span class="line"></span><br><span class="line">px = pd.DataFrame(</span><br><span class="line"></span><br><span class="line">    &#123;<span class="string">&#x27;RAD&#x27;</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]&#125;</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">p = lrModel.predict(px)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ### 每一万美元的不动产税率与房价的分析</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[312]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算相关系数</span></span><br><span class="line"></span><br><span class="line">corr = x_data[<span class="string">&quot;TAX&quot;</span>].corr(y_data[<span class="string">&quot;price&quot;</span>])  </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(corr)            <span class="comment"># 低度相关</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[313]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">x=data[[<span class="string">&quot;TAX&quot;</span>]]  </span><br><span class="line"></span><br><span class="line">y=data[<span class="string">&#x27;price&#x27;</span>]</span><br><span class="line"></span><br><span class="line">data.plot(x=<span class="string">&#x27;TAX&#x27;</span>,y=<span class="string">&#x27;price&#x27;</span>,kind=<span class="string">&#x27;scatter&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[314]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据模型参数，建立线性回归模型</span></span><br><span class="line"></span><br><span class="line">lrModel=LinearRegression()</span><br><span class="line"></span><br><span class="line">lrModel.fit(x,y)   <span class="comment"># 训练模型</span></span><br><span class="line"></span><br><span class="line">a = lrModel.coef_[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">b = lrModel.intercept_</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[317]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">X = np.linspace(<span class="number">0</span>,<span class="number">750</span>,<span class="number">750</span>)</span><br><span class="line"></span><br><span class="line">Y = a*X+b</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[318]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line"></span><br><span class="line">plt.plot(X,Y)</span><br><span class="line"></span><br><span class="line">plt.scatter(x=data[<span class="string">&#x27;TAX&#x27;</span>],y=data[<span class="string">&#x27;price&#x27;</span>])</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[319]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证模型</span></span><br><span class="line"></span><br><span class="line">s = lrModel.score(x,y)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[320]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测</span></span><br><span class="line"></span><br><span class="line">px = pd.DataFrame(</span><br><span class="line"></span><br><span class="line">    &#123;<span class="string">&#x27;TAX&#x27;</span>:[<span class="number">220</span>,<span class="number">230</span>,<span class="number">240</span>]&#125;</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">p = lrModel.predict(px)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ### 城镇中的教师学生比例与房价的分析</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[322]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算相关系数</span></span><br><span class="line"></span><br><span class="line">corr = x_data[<span class="string">&quot;PTRATIO&quot;</span>].corr(y_data[<span class="string">&quot;price&quot;</span>])  </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(corr)            <span class="comment"># 显著相关</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[323]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">x=data[[<span class="string">&quot;PTRATIO&quot;</span>]]  </span><br><span class="line"></span><br><span class="line">y=data[<span class="string">&#x27;price&#x27;</span>]</span><br><span class="line"></span><br><span class="line">data.plot(x=<span class="string">&#x27;PTRATIO&#x27;</span>,y=<span class="string">&#x27;price&#x27;</span>,kind=<span class="string">&#x27;scatter&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[324]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据模型参数，建立线性回归模型</span></span><br><span class="line"></span><br><span class="line">lrModel=LinearRegression()</span><br><span class="line"></span><br><span class="line">lrModel.fit(x,y)   <span class="comment"># 训练模型</span></span><br><span class="line"></span><br><span class="line">a = lrModel.coef_[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">b = lrModel.intercept_</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[325]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">X = np.linspace(<span class="number">0</span>,<span class="number">25</span>,<span class="number">25</span>)</span><br><span class="line"></span><br><span class="line">Y = a*X+b</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[326]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line"></span><br><span class="line">plt.plot(X,Y)</span><br><span class="line"></span><br><span class="line">plt.scatter(x=data[<span class="string">&#x27;PTRATIO&#x27;</span>],y=data[<span class="string">&#x27;price&#x27;</span>])</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[327]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证模型</span></span><br><span class="line"></span><br><span class="line">s = lrModel.score(x,y)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[328]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测</span></span><br><span class="line"></span><br><span class="line">px = pd.DataFrame(</span><br><span class="line"></span><br><span class="line">    &#123;<span class="string">&#x27;PTRATIO&#x27;</span>:[<span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>]&#125;</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">p = lrModel.predict(px)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ### 城镇中的黑人比例与房价的分析</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[329]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算相关系数</span></span><br><span class="line"></span><br><span class="line">corr = x_data[<span class="string">&quot;B&quot;</span>].corr(y_data[<span class="string">&quot;price&quot;</span>])  </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(corr)            <span class="comment"># 低度相关</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[330]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">x=data[[<span class="string">&quot;B&quot;</span>]]  </span><br><span class="line"></span><br><span class="line">y=data[<span class="string">&#x27;price&#x27;</span>]</span><br><span class="line"></span><br><span class="line">data.plot(x=<span class="string">&#x27;B&#x27;</span>,y=<span class="string">&#x27;price&#x27;</span>,kind=<span class="string">&#x27;scatter&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[331]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据模型参数，建立线性回归模型</span></span><br><span class="line"></span><br><span class="line">lrModel=LinearRegression()</span><br><span class="line"></span><br><span class="line">lrModel.fit(x,y)   <span class="comment"># 训练模型</span></span><br><span class="line"></span><br><span class="line">a = lrModel.coef_[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">b = lrModel.intercept_</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[332]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">X = np.linspace(<span class="number">0</span>,<span class="number">400</span>,<span class="number">400</span>)</span><br><span class="line"></span><br><span class="line">Y = a*X+b</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[333]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line"></span><br><span class="line">plt.plot(X,Y)</span><br><span class="line"></span><br><span class="line">plt.scatter(x=data[<span class="string">&#x27;B&#x27;</span>],y=data[<span class="string">&#x27;price&#x27;</span>])</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[334]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证模型</span></span><br><span class="line"></span><br><span class="line">s = lrModel.score(x,y)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[335]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测</span></span><br><span class="line"></span><br><span class="line">px = pd.DataFrame(</span><br><span class="line"></span><br><span class="line">    &#123;<span class="string">&#x27;B&#x27;</span>:[<span class="number">380</span>,<span class="number">390</span>,<span class="number">400</span>]&#125;</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">p = lrModel.predict(px)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ### 地区中有多少房东属于低收入人群与房价的分析</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[336]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算相关系数</span></span><br><span class="line"></span><br><span class="line">corr = x_data[<span class="string">&quot;LSTAT&quot;</span>].corr(y_data[<span class="string">&quot;price&quot;</span>])  </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(corr)            <span class="comment"># 显著相关</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[337]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">x=data[[<span class="string">&quot;LSTAT&quot;</span>]]  </span><br><span class="line"></span><br><span class="line">y=data[<span class="string">&#x27;price&#x27;</span>]</span><br><span class="line"></span><br><span class="line">data.plot(x=<span class="string">&#x27;LSTAT&#x27;</span>,y=<span class="string">&#x27;price&#x27;</span>,kind=<span class="string">&#x27;scatter&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[338]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据模型参数，建立线性回归模型</span></span><br><span class="line"></span><br><span class="line">lrModel=LinearRegression()</span><br><span class="line"></span><br><span class="line">lrModel.fit(x,y)   <span class="comment"># 训练模型</span></span><br><span class="line"></span><br><span class="line">a = lrModel.coef_[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">b = lrModel.intercept_</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[341]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">X = np.linspace(<span class="number">0</span>,<span class="number">40</span>,<span class="number">40</span>)</span><br><span class="line"></span><br><span class="line">Y = a*X+b</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[342]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line"></span><br><span class="line">plt.plot(X,Y)</span><br><span class="line"></span><br><span class="line">plt.scatter(x=data[<span class="string">&#x27;LSTAT&#x27;</span>],y=data[<span class="string">&#x27;price&#x27;</span>])</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[343]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证模型</span></span><br><span class="line"></span><br><span class="line">s = lrModel.score(x,y)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In[344]:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测</span></span><br><span class="line"></span><br><span class="line">px = pd.DataFrame(</span><br><span class="line"></span><br><span class="line">    &#123;<span class="string">&#x27;LSTAT&#x27;</span>:[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]&#125;</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">p = lrModel.predict(px)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h2><ul><li><p><a href="https://aistudio.baidu.com/aistudio/index">飞桨AI Studio - 人工智能学习实训社区</a></p></li><li><p><a href="https://github.com/GiesenC/DeepLearning">GitHub - GiesenC/DeepLearning: DeepLearning model training, evaluation and prediction related code.</a></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基于规则中文分词</title>
      <link href="/posts/a3d9dbf7.html"/>
      <url>/posts/a3d9dbf7.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、中文分词技术"><a href="#一、中文分词技术" class="headerlink" title="一、中文分词技术"></a>一、中文分词技术</h2><p>词是中文语言理解中最小的能独立语言的语言单位。</p><p>中文分词上指将汉字序列按照一定规则逐个切分为词序列的过程。由于中文中词与词之间没有明确的分隔标志，因此中文分词需要依靠一定技术和方法找寻类似英文中空格作用的分隔符。</p><h3 id="1-基于规则分词"><a href="#1-基于规则分词" class="headerlink" title="1.基于规则分词"></a>1.基于规则分词</h3><p>基于规则分词是中文分词最先使用的方法，常见的方法有正向最大匹配法、逆向最大匹配法等。</p><p>基于规则的分词方法是一种比较机械的分词方法，其基本思想上讲待分词语句中的字符串和词典逐个匹配，找到匹配的字符串则切分，不匹配则减去边缘的某些字符，从头再次匹配，直至匹配完毕或者没有匹配到词典中的字符串而结束。</p><h4 id="1-1-正向最大匹配法"><a href="#1-1-正向最大匹配法" class="headerlink" title="1.1.正向最大匹配法"></a>1.1.正向最大匹配法</h4><p>假设有一个待分词的中文文本和一个分词词典，词典中最长字符串的长度为l。从左至右切分待分词文本的前l个字符，然后在词典中查找是否有一样的字符串。</p><p>若匹配失败则删去该字符串的最后一个字符，仅保留下前l-1个字符，继续匹配这个字符，以此类推。 </p><p>若匹配成功，那么被切分下来的第二个文本成为新的待分词文本，重复以上操作直至匹配完毕。</p><p>若一个字符串全部匹配失败，那么逐次删去第一个字符，并重复上述操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#dic.utf8</span><br><span class="line">北京市民  </span><br><span class="line">民办高中  </span><br><span class="line">天安门广场  </span><br><span class="line">北京市  </span><br><span class="line">高中  </span><br><span class="line">的</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_dict</span>():</span></span><br><span class="line"></span><br><span class="line">    dictionary = []</span><br><span class="line"></span><br><span class="line">    dic_path = <span class="string">&#x27;./data/dic.utf8&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">open</span>(dic_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8-sig&#x27;</span>):</span><br><span class="line"></span><br><span class="line">        line = line.strip()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> line:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        dictionary.append(line)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">set</span>(dictionary))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_max_length</span>(<span class="params">dictionary</span>):</span></span><br><span class="line"></span><br><span class="line">    max_length = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    word_length = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> dictionary:</span><br><span class="line"></span><br><span class="line">        word_length.append(<span class="built_in">len</span>(word))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(word_length)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MM</span>(<span class="params">text</span>):</span>  <span class="comment"># Maximum Matching</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取词典</span></span><br><span class="line"></span><br><span class="line">    dictionary = get_dict()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取词典最大长度</span></span><br><span class="line"></span><br><span class="line">    max_length = calculate_max_length(dictionary)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 切分文本</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">global</span> MM_cut_list</span><br><span class="line"></span><br><span class="line">    MM_cut_list = []</span><br><span class="line"></span><br><span class="line">    text_length = <span class="built_in">len</span>(text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> text_length &gt; <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">        divide = text[<span class="number">0</span>:max_length]    <span class="comment">#从前向后截取长度为max_length的字符串</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> divide <span class="keyword">not</span> <span class="keyword">in</span> dictionary:      <span class="comment">#当前截取的字符串不在分词字典中，则进循环</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(divide)==<span class="number">1</span>:             <span class="comment">#当前截取的字符串长度为1时，说明分词字典无匹配项</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>                      <span class="comment">#直接保留当前的一个字</span></span><br><span class="line"></span><br><span class="line">            divide=divide[<span class="number">0</span>:<span class="built_in">len</span>(divide)-<span class="number">1</span>] <span class="comment">#当前截取的字符串长度减一</span></span><br><span class="line"></span><br><span class="line">        MM_cut_list.append(divide)         <span class="comment">#记录下当前截取的字符串</span></span><br><span class="line"></span><br><span class="line">        text = text[<span class="built_in">len</span>(divide):]  <span class="comment">#截取未分词的句子</span></span><br><span class="line"></span><br><span class="line">        text_length = <span class="built_in">len</span>(text)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#print(MM_cut_list)</span></span><br><span class="line"></span><br><span class="line">MM(<span class="string">&#x27;北京市民办高中&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/02/7bWA5idKLI4NJs8.png"></p><h4 id="1-2-逆向最大匹配法"><a href="#1-2-逆向最大匹配法" class="headerlink" title="1.2.逆向最大匹配法"></a>1.2.逆向最大匹配法</h4><p>逆向最大匹配法跟正向最大匹配法原理相反。从右至左匹配待分词文本后的L个字符串，在词典中查找是否有一样的字符串。</p><p>若匹配失败，仅留下待分词文本的后L-1个词，继续匹配这个字符串，以此类推。</p><p>若匹配成功，则被切分下来的第一个文本序列成为新的待分词文本，重复以上操作直至匹配完毕。</p><p>若一个词序列完全匹配失败，则逐次删去最后一个字符，并重复上述操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>,<span class="number">0</span>,-<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>,<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">RMM</span>(<span class="params">text</span>):</span> <span class="comment"># Reverse Maximum Matching</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取词典</span></span><br><span class="line"></span><br><span class="line">    dictionary = get_dict()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取词典最大长度</span></span><br><span class="line"></span><br><span class="line">    max_length = calculate_max_length(dictionary)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 切分文本</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">global</span> RMM_cut_list</span><br><span class="line"></span><br><span class="line">    RMM_cut_list = []</span><br><span class="line"></span><br><span class="line">    text_length = <span class="built_in">len</span>(text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> text_length &gt; <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">        match = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># range(start, stop, step):根据start与stop指定范围内以及step设定的步长</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(max_length, <span class="number">0</span>, -<span class="number">1</span>): <span class="comment"># i等于max_langth到1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> text_length - i &lt; <span class="number">0</span>:  <span class="comment"># 考虑到当词典的最长词的长度大于要匹配的文本的长度时，需要对典的最长词的长度进行裁剪，</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">continue</span>   <span class="comment"># 直到词典的最长词的长度=匹配的文本的长度，此时截取位置从0开始</span></span><br><span class="line"></span><br><span class="line">            new_word = text[text_length - i:text_length] <span class="comment"># 截取文本的最后max_length位</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> new_word <span class="keyword">in</span> dictionary: <span class="comment"># 匹配成功</span></span><br><span class="line"></span><br><span class="line">                RMM_cut_list.append(new_word)</span><br><span class="line"></span><br><span class="line">                text_length -= i <span class="comment"># 被切下来的第一个文本序列成为新的待分词文本</span></span><br><span class="line"></span><br><span class="line">                match=<span class="literal">True</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> match: <span class="comment"># 说明没有匹配成功</span></span><br><span class="line"></span><br><span class="line">            text_length -= <span class="number">1</span>  <span class="comment">#切分的长度L要减1，仅留下待分词的后L-1个词</span></span><br><span class="line"></span><br><span class="line">    RMM_cut_list.reverse()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#print(RMM_cut_list)</span></span><br><span class="line"></span><br><span class="line">RMM(<span class="string">&#x27;北京市民办高中&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/02/eAVcJGpqR8BmXtf.png"></p><h4 id="1-3-双向最大匹配法"><a href="#1-3-双向最大匹配法" class="headerlink" title="1.3.双向最大匹配法"></a>1.3.双向最大匹配法</h4><p>双向最大匹配法的基本思想上讲正向最大匹配法和逆向最大匹配法的结果进行对比，选取两种方法中分词数量较少的结果作为切分结果。  </p><p>如果分词数量一致，再判断分词结果是否完全相同，如果分词结果相同，可以返回任何一个；如果分词结果不同，返回单字数比较少的那个。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">text = <span class="string">&#x27;北京市民办高中&#x27;</span></span><br><span class="line"></span><br><span class="line">MM(text)</span><br><span class="line"></span><br><span class="line">RMM(text)</span><br><span class="line"></span><br><span class="line"><span class="comment">#词典元素存储变量</span></span><br><span class="line"></span><br><span class="line">cut_words_list = []</span><br><span class="line"></span><br><span class="line"><span class="comment">#转换分词结果的长度</span></span><br><span class="line"></span><br><span class="line">MM_cut_list_size = <span class="built_in">len</span>(MM_cut_list)</span><br><span class="line"></span><br><span class="line">RMM_cut_list_size = <span class="built_in">len</span>(RMM_cut_list)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较正向最大匹配和逆向最大匹配结果。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果分词数量结果不同，那么取分词数量较少的那个。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> MM_cut_list_size != RMM_cut_list_size:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> MM_cut_list_size &gt; RMM_cut_list_size:</span><br><span class="line"></span><br><span class="line">        cut_words_list = RMM_cut_list</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">        cut_words_list = MM_cut_list</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果分词数量结果相同：</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1.分词结果相同，可以返回任何一个。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.分词结果不同，返回单字数比较少的那个，</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果单字数个数也相同，则任意返回一个。</span></span><br><span class="line"></span><br><span class="line">    fmm_single = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    bmm_single = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    isSame = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(RMM_cut_list)):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> isSame <span class="keyword">and</span> MM_cut_list[i] <span class="keyword">not</span> <span class="keyword">in</span> RMM_cut_list:</span><br><span class="line"></span><br><span class="line">            isSame = <span class="literal">False</span>  <span class="comment"># 此时分词结果不同</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(MM_cut_list[i]) == <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">            fmm_single += <span class="number">1</span>  <span class="comment"># 正向最大匹配结果中单字数加1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(RMM_cut_list[i]) == <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">            bmm_single += <span class="number">1</span> <span class="comment"># 逆向最大匹配结果中单字数加1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> isSame: <span class="comment"># 如果词结果相同，返回任何一个</span></span><br><span class="line"></span><br><span class="line">        cut_words_list = MM_cut_list_size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> fmm_single &gt; bmm_single:</span><br><span class="line"></span><br><span class="line">        cut_words_list = RMM_cut_list</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">        cut_words_list = MM_cut_list</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(cut_words_list)</span><br></pre></td></tr></table></figure><h2 id="二、尾巴"><a href="#二、尾巴" class="headerlink" title="二、尾巴"></a>二、尾巴</h2><ul><li><a href="https://blog.csdn.net/ScarlettYellow/article/details/80458043">NLP|中文分词技术及应用 -CSDN博客</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Deep Learning新闻文本预测分类（多项式贝叶斯分类模型）</title>
      <link href="/posts/e586ee12.html"/>
      <url>/posts/e586ee12.html</url>
      
        <content type="html"><![CDATA[<h2 id="代码实现如下"><a href="#代码实现如下" class="headerlink" title="代码实现如下"></a>代码实现如下</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入所需要的库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> CountVectorizer,TfidfVectorizer</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> MultinomialNB</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> make_scorer,accuracy_score</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#调用jieba进行分词</span></span><br><span class="line"></span><br><span class="line">txt=<span class="string">&quot;我喜欢打高尔夫&quot;</span></span><br><span class="line"></span><br><span class="line">txt_cut=jieba.cut(txt)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(txt_cut))</span><br><span class="line"></span><br><span class="line"><span class="comment">#给“高尔夫”这个词设置较高权重</span></span><br><span class="line"></span><br><span class="line">jieba.add_word(<span class="string">&quot;高尔夫&quot;</span>,freq=<span class="number">99999</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#重新分词</span></span><br><span class="line"></span><br><span class="line">txt_cut=jieba.cut(txt)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(txt_cut))</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用空格在不同词之间分隔，为后面词向量做准备</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; &quot;</span>.join(txt_cut))</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#2.句子的表示 —基于count的表达</span></span><br><span class="line"></span><br><span class="line">txt=<span class="string">&quot;我喜欢看小说和喜欢看电视&quot;</span></span><br><span class="line"></span><br><span class="line">txt_cut=<span class="string">&quot; &quot;</span>.join(jieba.cut(txt))  <span class="comment">#使用jieba分词并用空格隔开每个词</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#新建文本计数向量化器</span></span><br><span class="line"></span><br><span class="line">countVectorizer=CountVectorizer(</span><br><span class="line"></span><br><span class="line">    min_df=<span class="number">0</span>,token_pattern=<span class="string">r&quot;\b\w+\b&quot;</span></span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">txt_cut=pd.DataFrame([txt_cut],columns=[<span class="string">&quot;txt_cut&quot;</span>])</span><br><span class="line"></span><br><span class="line">txt_cut</span><br><span class="line"></span><br><span class="line"><span class="comment"># countVectorizer.fit(txt_cut)  #训练文本计数向量化器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># voc=countVectorizer.vocabulary_   #获取特征词汇表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># voc</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#2.句子的表示 —基于count的表达</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#把文本进行计数向量化</span></span><br><span class="line"></span><br><span class="line">data=pd.read_csv(<span class="string">&quot;CountVectorizerDemo.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line">jieba.add_word(<span class="string">&quot;书&quot;</span>,freq=<span class="number">99999999</span>)</span><br><span class="line"></span><br><span class="line">jieba.add_word(<span class="string">&quot;篮球&quot;</span>,freq=<span class="number">99999999</span>)</span><br><span class="line"></span><br><span class="line">jieba.add_word(<span class="string">&quot;乒乓球&quot;</span>,freq=<span class="number">99999999</span>)</span><br><span class="line"></span><br><span class="line">text_cut=[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index,rows <span class="keyword">in</span> data.iterrows():  <span class="comment">#遍历DataFrame每行数据</span></span><br><span class="line"></span><br><span class="line">    text_cut.append(<span class="string">&quot; &quot;</span>.join(jieba.cut(rows[<span class="string">&quot;text&quot;</span>]))) <span class="comment">#分词并用空格隔开每个词，加入数组</span></span><br><span class="line"></span><br><span class="line">data[<span class="string">&quot;text_cut&quot;</span>]=text_cut  <span class="comment">#在DataFrame新增一列，加入数组</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(text_cut)</span><br><span class="line"></span><br><span class="line"><span class="comment">#计数向量化</span></span><br><span class="line"></span><br><span class="line">countVectorizer=CountVectorizer(</span><br><span class="line"></span><br><span class="line">    min_df=<span class="number">0</span>,token_pattern=<span class="string">r&quot;\b\w+\b&quot;</span></span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">countVectorizer.fit(data[<span class="string">&quot;text_cut&quot;</span>])  <span class="comment">#训练文本计数向量化器</span></span><br><span class="line"></span><br><span class="line">voc=countVectorizer.vocabulary_   <span class="comment">#获取特征词汇表</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(voc)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(voc,key=<span class="keyword">lambda</span> x:x[<span class="number">0</span>]))  <span class="comment">#把voc顺序排序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#把文本转为文本向量</span></span><br><span class="line"></span><br><span class="line">textVector=countVectorizer.transform(data[<span class="string">&quot;text_cut&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出文本向量</span></span><br><span class="line"></span><br><span class="line">textVector=textVector.toarray()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(textVector)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#3.TF-IDF方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#把文本进行计数向量化</span></span><br><span class="line"></span><br><span class="line">data=pd.read_csv(<span class="string">&quot;CountVectorizerDemo.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line">jieba.add_word(<span class="string">&quot;书&quot;</span>,freq=<span class="number">99999999</span>)</span><br><span class="line"></span><br><span class="line">jieba.add_word(<span class="string">&quot;篮球&quot;</span>,freq=<span class="number">99999999</span>)</span><br><span class="line"></span><br><span class="line">jieba.add_word(<span class="string">&quot;乒乓球&quot;</span>,freq=<span class="number">99999999</span>)</span><br><span class="line"></span><br><span class="line">text_cut=[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index,rows <span class="keyword">in</span> data.iterrows():  <span class="comment">#遍历DataFrame每行数据</span></span><br><span class="line"></span><br><span class="line">    text_cut.append(<span class="string">&quot; &quot;</span>.join(jieba.cut(rows[<span class="string">&quot;text&quot;</span>]))) <span class="comment">#分词并用空格隔开每个词，加入数组</span></span><br><span class="line"></span><br><span class="line">data[<span class="string">&quot;text_cut&quot;</span>]=text_cut  <span class="comment">#在DataFrame新增一列，加入数组</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(text_cut)</span><br><span class="line"></span><br><span class="line"><span class="comment">#实例化</span></span><br><span class="line"></span><br><span class="line">tfidf = TfidfVectorizer(min_df=<span class="number">0</span>,token_pattern=<span class="string">r&quot;\b\w+\b&quot;</span>)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">tf_fit=tfidf.fit(data[<span class="string">&quot;text_cut&quot;</span>])</span><br><span class="line"></span><br><span class="line">voc=tf_fit.vocabulary_   <span class="comment">#获取特征词汇表</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(voc)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(voc,key=<span class="keyword">lambda</span> x:x[<span class="number">0</span>]))  <span class="comment">#把voc顺序排序</span></span><br><span class="line"></span><br><span class="line">idf=tfidf.idf_</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(idf)</span><br><span class="line"></span><br><span class="line"><span class="comment">#把文本转为文本向量</span></span><br><span class="line"></span><br><span class="line">textVector=tfidf.transform(data[<span class="string">&quot;text_cut&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出文本向量</span></span><br><span class="line"></span><br><span class="line">textVector=textVector.toarray()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(textVector)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#3.TF-IDF方法</span></span><br><span class="line"></span><br><span class="line">txt=[</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;今天 上 NLP 课程&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;今天 的 课程 有 意思&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;数据 课程 也 有 意思&quot;</span></span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">tfidf = TfidfVectorizer(min_df=<span class="number">0</span>,token_pattern=<span class="string">r&quot;\b\w+\b&quot;</span>)</span><br><span class="line"></span><br><span class="line">voc=tf_fit.vocabulary_   <span class="comment">#获取特征词汇表</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(voc)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(voc,key=<span class="keyword">lambda</span> x:x[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">tf_fit=tfidf.fit(txt)</span><br><span class="line"></span><br><span class="line"><span class="comment">#把文本转为文本向量</span></span><br><span class="line"></span><br><span class="line">textVector=tfidf.transform(txt)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出文本向量</span></span><br><span class="line"></span><br><span class="line">textVector=textVector.toarray()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(textVector)</span><br><span class="line"></span><br><span class="line"><span class="comment">#测试代码end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#案例：新闻文本预测分类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#加载数据</span></span><br><span class="line"></span><br><span class="line">data=pd.read_csv(<span class="string">&quot;多项式贝叶斯.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#划分x,y</span></span><br><span class="line"></span><br><span class="line">x=data[<span class="string">&quot;fileContent&quot;</span>]</span><br><span class="line"></span><br><span class="line">y=data[<span class="string">&quot;class&quot;</span>]</span><br><span class="line"></span><br><span class="line">data</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#对x中文进行分词</span></span><br><span class="line"></span><br><span class="line">fileContents=[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">list</span>(x):</span><br><span class="line"></span><br><span class="line">    fileContent=row</span><br><span class="line"></span><br><span class="line">    segs=jieba.cut(fileContent)</span><br><span class="line"></span><br><span class="line">    fileContents.append(<span class="string">&quot; &quot;</span>.join(segs))</span><br><span class="line"></span><br><span class="line">x=fileContents</span><br><span class="line"></span><br><span class="line">x</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#本文向量化</span></span><br><span class="line"></span><br><span class="line">countVectorizer=CountVectorizer(</span><br><span class="line"></span><br><span class="line">    min_df=<span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    token_pattern=<span class="string">r&quot;\b\w+\b&quot;</span></span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">#训练分词后的文本，提取文本特征</span></span><br><span class="line"></span><br><span class="line">countVectorizer.fit(x)</span><br><span class="line"></span><br><span class="line"><span class="comment">#把文本转为文本向量</span></span><br><span class="line"></span><br><span class="line">x_TextVector=countVectorizer.transform(x).toarray()</span><br><span class="line"></span><br><span class="line">x_TextVector  <span class="comment">#向量化的x</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#建立多项式贝叶斯分类模型，K折交叉验证进行评分</span></span><br><span class="line"></span><br><span class="line">multinomialNB=MultinomialNB()</span><br><span class="line"></span><br><span class="line">cvs=cross_val_score(</span><br><span class="line"></span><br><span class="line">    multinomialNB,</span><br><span class="line"></span><br><span class="line">    x_TextVector,</span><br><span class="line"></span><br><span class="line">    y,</span><br><span class="line"></span><br><span class="line">    cv=<span class="number">3</span>,</span><br><span class="line"></span><br><span class="line">    scoring=make_scorer(accuracy_score)</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">cvs.mean()</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#读取停用词</span></span><br><span class="line"></span><br><span class="line">stop_word=pd.read_csv(<span class="string">&quot;StopwordsCN.txt&quot;</span>,encoding=<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;停用词数据：&quot;</span>,<span class="built_in">len</span>(stop_word))</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment">#本文向量化</span></span><br><span class="line"></span><br><span class="line">countVectorizer=CountVectorizer(</span><br><span class="line"></span><br><span class="line">    min_df=<span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    token_pattern=<span class="string">r&quot;\b\w+\b&quot;</span>,</span><br><span class="line"></span><br><span class="line">    stop_words=<span class="built_in">list</span>(stop_word[<span class="string">&quot;stopword&quot;</span>])  <span class="comment">#加入停用词</span></span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">#训练文本，提取文本特征</span></span><br><span class="line"></span><br><span class="line">countVectorizer.fit(x)</span><br><span class="line"></span><br><span class="line"><span class="comment">#把文本转为文本向量</span></span><br><span class="line"></span><br><span class="line">x_TextVector=countVectorizer.transform(x).toarray()</span><br><span class="line"></span><br><span class="line"><span class="comment">#建立多项式贝叶斯分类模型，K折交叉验证进行评分</span></span><br><span class="line"></span><br><span class="line">multinomialNB=MultinomialNB()</span><br><span class="line"></span><br><span class="line">cvs=cross_val_score(</span><br><span class="line"></span><br><span class="line">    multinomialNB,</span><br><span class="line"></span><br><span class="line">    x_TextVector,</span><br><span class="line"></span><br><span class="line">    y,</span><br><span class="line"></span><br><span class="line">    cv=<span class="number">3</span>,</span><br><span class="line"></span><br><span class="line">    scoring=make_scorer(accuracy_score)</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">cvs.mean()</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在0-99篇向量化后的文章中任选一篇</span></span><br><span class="line"></span><br><span class="line">index=<span class="number">98</span></span><br><span class="line"></span><br><span class="line">news=x_TextVector[index:index+<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">category=y[index:index+<span class="number">1</span>] <span class="comment">#文章类别</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用向量化后的x,和y训练多项式贝叶斯分类模型</span></span><br><span class="line"></span><br><span class="line">multinomialNB.fit(x_TextVector,y)</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用multinomialNB.predict</span></span><br><span class="line"></span><br><span class="line">r=multinomialNB.predict(news)</span><br><span class="line"></span><br><span class="line">r</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h2><ul><li><p><a href="https://aistudio.baidu.com/aistudio/index">飞桨AI Studio - 人工智能学习实训社区</a></p></li><li><p><a href="https://github.com/GiesenC/DeepLearning">GitHub - GiesenC/DeepLearning: DeepLearning model training, evaluation and prediction related code.</a></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker常用命令</title>
      <link href="/posts/29dc6fe8.html"/>
      <url>/posts/29dc6fe8.html</url>
      
        <content type="html"><![CDATA[<p>Docker是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的<a href="https://baike.baidu.com/item/%E9%95%9C%E5%83%8F/1574">镜像</a>中，然后发布到任何流行的<a href="https://baike.baidu.com/item/Linux">Linux</a>或<a href="https://baike.baidu.com/item/Windows/165458">Windows</a>操作系统的机器上，也可以实现<a href="https://baike.baidu.com/item/%E8%99%9A%E6%8B%9F%E5%8C%96/547949">虚拟化</a>。容器是完全使用<a href="https://baike.baidu.com/item/%E6%B2%99%E7%AE%B1/393318">沙箱</a>机制，相互之间不会有任何接口。</p><p>Docker不管是在企业生产中，还是个人小项目中，应用都非常的方便且简单快捷。</p><h3 id="1-常用命令"><a href="#1-常用命令" class="headerlink" title="1.常用命令"></a>1.常用命令</h3><ol><li><p>列出本地的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images -a  </span><br></pre></td></tr></table></figure></li><li><p>搜索mysql的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search mysql --limit 10  </span><br></pre></td></tr></table></figure></li><li><p>拉取到本地，版本号可选。若不带版本号，默认是latest</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql  </span><br><span class="line">docker pull ubuntu  </span><br><span class="line">docker pull redis:6.0.8  </span><br></pre></td></tr></table></figure></li><li><p>列出本地镜像的image_id</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images -q   </span><br></pre></td></tr></table></figure></li><li><p>列出docker目前的磁盘占用情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ docker system df  </span><br><span class="line">TYPE            TOTAL     ACTIVE    SIZE      RECLAIMABLE  </span><br><span class="line">Images          1         0         72.78MB   72.78MB (100%)  </span><br><span class="line">Containers      0         0         0B        0B  </span><br><span class="line">Local Volumes   0         0         0B        0B  </span><br><span class="line">Build Cache     0         0         0B        0B    </span><br></pre></td></tr></table></figure></li><li><p>删除本地镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ docker images  </span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE  </span><br><span class="line">ubuntu        latest    ba6acccedd29   2 months ago   72.8MB  </span><br><span class="line">hello-world   latest    feb5d9fea6a5   3 months ago   13.3kB  </span><br><span class="line">➜  ~ docker rmi hello-world  </span><br><span class="line">Untagged: hello-world:latest  </span><br><span class="line">Untagged: hello-world@sha256:2498fce14358aa50ead0cc6c19990fc6ff866ce72aeb5546e1d59caac3d0d60f  </span><br><span class="line">Deleted: sha256:feb5d9fea6a5e9606aa995e879d862b825965ba48de054caab5ef356dc6b3412  </span><br><span class="line">Deleted: sha256:e07ee1baac5fae6a26f30cabfe54a36d3402f96afda318fe0a96cec4ca393359  </span><br><span class="line">➜  ~ docker images           </span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED        SIZE  </span><br><span class="line">ubuntu       latest    ba6acccedd29   2 months ago   72.8MB    </span><br></pre></td></tr></table></figure></li><li><p>新建并启动容器</p></li></ol><p>-it 代表 interactive tty</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name=myu1 ubuntu /bin/bash  </span><br></pre></td></tr></table></figure><ol start="8"><li><p>列出当前运行的docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a  </span><br></pre></td></tr></table></figure></li><li><p>使用<code>docker run -it</code>启动的容器，自动进入交互式命令行，退出有两种方式：</p><ul><li>  exit命令（容器停止运行）</li><li>  快捷键ctrl+p+q（容器继续后台运行）</li></ul></li><li><p>docker run和docker start的区别：<br>docker run是使用镜像启动一个新的容器，而docker start是启动之前存在的容器。</p></li><li><p>删除已经停止的容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm container_id / name  </span><br></pre></td></tr></table></figure></li><li><p>进入活动状态的容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker attach container_id/name   </span><br></pre></td></tr></table></figure><p>上面命令如果使用exit退出，会使容器停止</p></li><li><p>想要退出时候保持后台运行，可以按快捷键control+p+q (control按住不放，先后按下p和q)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec container_id   </span><br></pre></td></tr></table></figure><p>上面命令进入，使用exit退出，不会使容器退出</p></li><li><p>容器传文件到宿主机（在宿主机执行）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp container_id:/file/to/path    </span><br></pre></td></tr></table></figure></li><li><p>把整个容器导出为一个tar包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker export container_id &gt; ~/abcd.tar    </span><br></pre></td></tr></table></figure></li><li><p>从导出包导入容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/abcd.tar | docker import - 用户名/镜像名字:版本号     </span><br></pre></td></tr></table></figure></li><li><p>把修改好的container进行commit</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit -m=&quot;add vim for ubuntu&quot; -a=&quot;mapxn&quot; d99969a97223 ubuntu-vim:1.0.1 </span><br></pre></td></tr></table></figure></li><li><p>发布到阿里云的私有仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push registry.cn-shanghai.aliyuncs.com/mpn/dkdk:1.0.1  </span><br></pre></td></tr></table></figure></li><li><p>挂载容器数据卷</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --privileged=true -v ~/repo/docker:/tmp:ro ubuntu /bin/bash </span><br></pre></td></tr></table></figure></li><li><p>跑一个mysql实例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3306:3306 --privileged=true \  </span><br><span class="line">-v ~/repo/docker/mysql/log:/var/log/mysql \  </span><br><span class="line">-v ~/repo/docker/mysql/data:/var/lib/mysql \  </span><br><span class="line">-v ~/repo/docker/mysql/conf:/etc/mysql/conf.d \  </span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \  </span><br><span class="line">--name mysql mysql  </span><br></pre></td></tr></table></figure></li></ol><table><thead><tr><th align="center">&amp;nbsp</th><th align="center">宿主机</th><th align="center">容器</th></tr></thead><tbody><tr><td align="center">端口</td><td align="center">3306</td><td align="center">3306</td></tr><tr><td align="center">日志目录</td><td align="center">~/repo/docker/mysql/log</td><td align="center">/var/log/mysql</td></tr><tr><td align="center">数据目录</td><td align="center">~/repo/docker/mysql/data</td><td align="center">/var/lib/mysql</td></tr><tr><td align="center">配置目录</td><td align="center">~/repo/docker/mysql/conf</td><td align="center">/etc/mysql/conf.d</td></tr></tbody></table><ol start="21"><li><p>配置~/repo/docker/mysql/conf/my.cnf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat my.cnf  </span><br><span class="line">[client]  </span><br><span class="line">default_character_set=utf8  </span><br><span class="line">[mysqld]  </span><br><span class="line">collation_server = utf8_general_ci  </span><br><span class="line">character_set_server = utf8  </span><br></pre></td></tr></table></figure><p>重启mysql容器</p></li><li><p>运行一个postgresql实例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name postgres \  </span><br><span class="line">-p 5432:5432 \  </span><br><span class="line">-e POSTGRES_PASSWORD=123456 \  </span><br><span class="line">-v ~/repo/docker/postgres-data/:/var/lib/postgresql/data \  </span><br><span class="line">postgres  </span><br></pre></td></tr></table></figure></li><li><p>查看容器占用的磁盘大小</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker system df -v  </span><br></pre></td></tr></table></figure></li><li><p>docker列出虚悬镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image ls -f dangling=ture  </span><br></pre></td></tr></table></figure></li><li><p>删除虚悬镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image prune  </span><br></pre></td></tr></table></figure></li><li><p>查看docker网络</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network ls  </span><br></pre></td></tr></table></figure></li></ol><h3 id="2-Docker安装实例"><a href="#2-Docker安装实例" class="headerlink" title="2.Docker安装实例"></a>2.Docker安装实例</h3><ol><li><p>docker 安装portainer</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \  </span><br><span class="line">-p 8000:8000 \  </span><br><span class="line">-p 9000:9000 \  </span><br><span class="line">-p 9443:9443 \  </span><br><span class="line">--name portainer \  </span><br><span class="line">--restart=always \  </span><br><span class="line">-v /var/run/docker.sock:/var/run/docker.sock \  </span><br><span class="line">-v portainer_data:/data \  </span><br><span class="line">portainer/portainer-ce:latest  </span><br></pre></td></tr></table></figure></li><li><p>docker 安装tomcat</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \  </span><br><span class="line">-p 8080:8080 \  </span><br><span class="line">--name tomcat \  </span><br><span class="line">tomcat  </span><br></pre></td></tr></table></figure></li><li><p>docker 安装 nginx （开启文件服务器）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/repo/docker/nginx/www  </span><br><span class="line">docker run --name nginx -p 8888:80 -d nginx  </span><br><span class="line">docker cp nginx:/etc/nginx/conf.d ~/repo/docker/nginx  </span><br><span class="line">docker cp nginx:/etc/nginx/nginx.conf ~/repo/docker/nginx  </span><br><span class="line">docker rm -f nginx  </span><br><span class="line">  </span><br><span class="line">docker run -d \  </span><br><span class="line">--name nginx \  </span><br><span class="line">-v ~/repo/docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro \  </span><br><span class="line">-v ~/repo/docker/nginx/conf.d:/etc/nginx/conf.d \  </span><br><span class="line">-v ~/repo/docker/nginx/www:/home/www \  </span><br><span class="line">-p 8888:80 \  </span><br><span class="line">nginx  </span><br></pre></td></tr></table></figure></li><li><p>docker 安装frps</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run \  </span><br><span class="line">--restart=always \  </span><br><span class="line">--network host \  </span><br><span class="line">-v ~/docker/frp:/etc/frp \  </span><br><span class="line">--name frps \  </span><br><span class="line">-it snowdreamtech/frps  </span><br></pre></td></tr></table></figure></li><li><p>docker 查看正在运行的容器日志</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-Docker-资源"><a href="#3-Docker-资源" class="headerlink" title="3.Docker 资源"></a>3.Docker 资源</h3><ul><li>Docker 官方主页: <a href="https://www.docker.com/">https://www.docker.com</a></li><li>Docker 官方博客: <a href="https://blog.docker.com/">https://blog.docker.com/</a></li><li>Docker 官方文档: <a href="https://docs.docker.com/">https://docs.docker.com/</a></li><li>Docker Store: <a href="https://store.docker.com/">https://store.docker.com</a></li><li>Docker Cloud: <a href="https://cloud.docker.com/">https://cloud.docker.com</a></li><li>Docker Hub: <a href="https://hub.docker.com/">https://hub.docker.com</a></li><li>Docker 的源代码仓库: <a href="https://github.com/moby/moby">https://github.com/moby/moby</a></li><li>Docker 发布版本历史: <a href="https://docs.docker.com/release-notes/">https://docs.docker.com/release-notes/</a></li><li>Docker 常见问题: <a href="https://docs.docker.com/engine/faq/">https://docs.docker.com/engine/faq/</a></li><li>Docker 远端应用 API: <a href="https://docs.docker.com/develop/sdk/">https://docs.docker.com/develop/sdk/</a></li></ul><h3 id="4-Docker-国内镜像"><a href="#4-Docker-国内镜像" class="headerlink" title="4.Docker 国内镜像"></a>4.Docker 国内镜像</h3><p>阿里云的加速器：<a href="https://help.aliyun.com/document_detail/60750.html">https://help.aliyun.com/document_detail/60750.html</a></p><p>网易加速器：<a href="http://hub-mirror.c.163.com/">http://hub-mirror.c.163.com</a></p><p>官方中国加速器：<a href="https://registry.docker-cn.com/">https://registry.docker-cn.com</a></p><p>ustc 的镜像：<a href="https://docker.mirrors.ustc.edu.cn/">https://docker.mirrors.ustc.edu.cn</a></p><p>daocloud：<a href="https://www.daocloud.io/mirror#accelerator-doc%EF%BC%88%E6%B3%A8%E5%86%8C%E5%90%8E%E4%BD%BF%E7%94%A8%EF%BC%89">https://www.daocloud.io/mirror#accelerator-doc（注册后使用）</a></p><h3 id="5-尾巴"><a href="#5-尾巴" class="headerlink" title="5.尾巴"></a>5.尾巴</h3><ul><li><a href="https://baike.baidu.com/item/Docker/13344470">Docker_百度百科</a></li><li><a href="https://www.runoob.com/docker/docker-tutorial.html">Docker 教程 | 菜鸟教程</a></li><li><a href="http://c.biancheng.net/docker/">Docker教程：Docker入门实践（精讲版）</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Deep Learning商户续约预测（高斯贝叶斯分类模型）</title>
      <link href="/posts/160f6470.html"/>
      <url>/posts/160f6470.html</url>
      
        <content type="html"><![CDATA[<h2 id="代码实现如下"><a href="#代码实现如下" class="headerlink" title="代码实现如下"></a>代码实现如下</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> GaussianNB</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score,train_test_split</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> make_scorer,accuracy_score,confusion_matrix</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment">#解决中文乱码问题</span></span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;FZSongYi-Z13S&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#解决负号无法正常显示的问题</span></span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>]=<span class="literal">False</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#读入数据，划分训练集和测试集</span></span><br><span class="line"></span><br><span class="line">data=pd.read_csv(<span class="string">&quot;高斯贝叶斯.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data.info)  <span class="comment">#查看data数据信息</span></span><br><span class="line"></span><br><span class="line">features=[<span class="string">&quot;注册时长&quot;</span>,<span class="string">&quot;营收收入&quot;</span>,<span class="string">&quot;成本&quot;</span>]</span><br><span class="line"></span><br><span class="line">x=data[features]</span><br><span class="line"></span><br><span class="line">y=data[<span class="string">&quot;是否续约&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#划分训练集和测试集</span></span><br><span class="line"></span><br><span class="line">x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=<span class="number">0.2</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用于绘制数据特征分布</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DrawHist</span>(<span class="params">s</span>):</span></span><br><span class="line"></span><br><span class="line">    l = <span class="built_in">len</span>(s.columns)</span><br><span class="line">    </span><br><span class="line">    fig = plt.figure(figsize=(<span class="number">10</span>,l*<span class="number">3</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">1</span>):</span><br><span class="line">    </span><br><span class="line">        col_name = s.columns[i]</span><br><span class="line">        </span><br><span class="line">        ax1 = fig.add_subplot(l,<span class="number">1</span>,(i+<span class="number">1</span>))  <span class="comment"># 创建子图</span></span><br><span class="line">        </span><br><span class="line">        ax1.set_title(col_name)</span><br><span class="line">        </span><br><span class="line">        s[col_name].hist(bins=<span class="number">30</span>,ax=ax1)</span><br><span class="line">        </span><br><span class="line">        s[col_name].plot(kind = <span class="string">&#x27;kde&#x27;</span>, secondary_y=<span class="literal">True</span>,ax=ax1)</span><br><span class="line">        </span><br><span class="line">        plt.grid()</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#绘制数据分布，观察数据分布是否符合高斯分布</span></span><br><span class="line">DrawHist(x)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#建立高斯贝叶斯模型，使用全部数据进行K折交叉验证模型得分，K=10</span></span><br><span class="line"></span><br><span class="line">gaussianNB=GaussianNB()</span><br><span class="line"></span><br><span class="line"><span class="comment">#K折交叉验证</span></span><br><span class="line"></span><br><span class="line">kcvs=cross_val_score(gaussianNB,x,y,cv=<span class="number">10</span>,scoring=make_scorer(accuracy_score))</span><br><span class="line"></span><br><span class="line"><span class="comment">#求10次准确率的平均分</span></span><br><span class="line"></span><br><span class="line">kcvs_mean=kcvs.mean()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;kcvs_mean:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(kcvs_mean))</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">labels=[<span class="string">&quot;不续约&quot;</span>,<span class="string">&quot;续约&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用训练集数据，训练模型</span></span><br><span class="line"></span><br><span class="line">gaussianNB.fit(x_train,y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用测试集数据，模型预测</span></span><br><span class="line"></span><br><span class="line">y_test_predict=gaussianNB.predict(x_test)</span><br><span class="line"></span><br><span class="line"><span class="comment">#绘制混淆矩阵</span></span><br><span class="line"></span><br><span class="line">Cm=confusion_matrix(y_test,y_test_predict,labels=labels)</span><br><span class="line"></span><br><span class="line">Cm=pd.DataFrame(Cm,columns=labels,index=labels) <span class="comment">#给混淆矩阵坐标轴加上标签</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#绘制热力图</span></span><br><span class="line"></span><br><span class="line">sns.heatmap(Cm,annot=<span class="literal">True</span>,fmt=<span class="string">&quot;d&quot;</span>)  <span class="comment">#fmt=&quot;d&quot; 让数值不要以科学计数法显示</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对华北地区进行预测</span></span><br><span class="line"></span><br><span class="line">data_north = pd.read_csv(<span class="string">&quot;华北地区.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data_north.describe())</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data_north[<span class="string">&quot;预测续约&quot;</span>] = gaussianNB.predict(data_north[[<span class="string">&quot;注册时长&quot;</span>,<span class="string">&quot;营收收入&quot;</span>,<span class="string">&quot;成本&quot;</span>]])   <span class="comment"># 预测是否续约</span></span><br><span class="line"></span><br><span class="line">data_north</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h2><ul><li><p><a href="https://aistudio.baidu.com/aistudio/index">飞桨AI Studio - 人工智能学习实训社区</a></p></li><li><p><a href="https://github.com/GiesenC/DeepLearning">GitHub - GiesenC/DeepLearning: DeepLearning model training, evaluation and prediction related code.</a></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Deep Learning商户续约预测（KNN模型）</title>
      <link href="/posts/c3cf44be.html"/>
      <url>/posts/c3cf44be.html</url>
      
        <content type="html"><![CDATA[<h2 id="代码实现如下"><a href="#代码实现如下" class="headerlink" title="代码实现如下"></a>代码实现如下</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split,cross_val_score</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> confusion_matrix,accuracy_score,precision_score,recall_score,f1_score,make_scorer</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line"><span class="comment">#解决中文乱码问题</span></span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;FZSongYi-Z13S&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#解决负号无法正常显示的问题</span></span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>]=<span class="literal">False</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data=pd.read_csv(<span class="string">&quot;华南地区.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line">data</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#划分训练集与测试集</span></span><br><span class="line"></span><br><span class="line">x=data[[<span class="string">&quot;注册时长&quot;</span>,<span class="string">&quot;营收收入&quot;</span>,<span class="string">&quot;成本&quot;</span>]]</span><br><span class="line"></span><br><span class="line">y=data[[<span class="string">&quot;是否续约&quot;</span>]]</span><br><span class="line"></span><br><span class="line">x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(x_train))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(x_test))</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建KNN模型</span></span><br><span class="line"></span><br><span class="line">knnModel=KNeighborsClassifier(n_neighbors=<span class="number">3</span>) <span class="comment">#把K设置为3</span></span><br><span class="line"></span><br><span class="line">knnModel.fit(x_train,y_train)</span><br><span class="line"></span><br><span class="line">score=knnModel.score(x_test,y_test) <span class="comment">#模型得分</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;模型得分：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(score))</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#模型评估</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用测试集预测结果</span></span><br><span class="line"></span><br><span class="line">y_test_predict=knnModel.predict(x_test)</span><br><span class="line"></span><br><span class="line">y_test_predict</span><br><span class="line"></span><br><span class="line"><span class="comment">#混淆矩阵</span></span><br><span class="line"></span><br><span class="line">c_matrix=confusion_matrix(y_true=y_test,y_pred=y_test_predict,labels=[<span class="string">&quot;续约&quot;</span>,<span class="string">&quot;不续约&quot;</span>])</span><br><span class="line"></span><br><span class="line">sns.heatmap(c_matrix,annot=<span class="literal">True</span>) <span class="comment">#用热力图展示混淆矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#计算准确率</span></span><br><span class="line"></span><br><span class="line">acc=accuracy_score(y_true=y_test,y_pred=y_test_predict)</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算精确率</span></span><br><span class="line"></span><br><span class="line">precision=precision_score(y_true=y_test,y_pred=y_test_predict,pos_label=<span class="string">&quot;续约&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算召回率</span></span><br><span class="line"></span><br><span class="line">recall=recall_score(y_true=y_test,y_pred=y_test_predict,pos_label=<span class="string">&quot;续约&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算f1</span></span><br><span class="line"></span><br><span class="line">F1=f1_score(y_true=y_test,y_pred=y_test_predict,pos_label=<span class="string">&quot;续约&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;准确率：&#123;&#125;，精确率：&#123;&#125;，召回率：&#123;&#125;，F1：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(acc,precision,recall,F1))</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#K折交叉验证</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#10次的得分，默认得分是计算准确度</span></span><br><span class="line"></span><br><span class="line">kcvs=cross_val_score(knnModel,x,y,cv=<span class="number">10</span>) <span class="comment">#默认得分是计算准确度</span></span><br><span class="line"></span><br><span class="line">kcvs</span><br><span class="line"></span><br><span class="line">kcvs_mean=kcvs.mean() <span class="comment">#求出10次得分的平均值</span></span><br><span class="line"></span><br><span class="line">kcvs_mean</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#保存K</span></span><br><span class="line"></span><br><span class="line">ks=[]</span><br><span class="line"></span><br><span class="line"><span class="comment">#保存准确率</span></span><br><span class="line"></span><br><span class="line">acc_means=[]</span><br><span class="line"></span><br><span class="line"><span class="comment">#精确率</span></span><br><span class="line"></span><br><span class="line">precision_means=[]</span><br><span class="line"></span><br><span class="line"><span class="comment">#召回率</span></span><br><span class="line"></span><br><span class="line">recall_means=[]</span><br><span class="line"></span><br><span class="line"><span class="comment">#F1</span></span><br><span class="line"></span><br><span class="line">f1_means=[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">30</span>):</span><br><span class="line"></span><br><span class="line">ks.append(k) <span class="comment">#把当前k值加入数组ks</span></span><br><span class="line"></span><br><span class="line">knnModel=KNeighborsClassifier(n_neighbors=k) <span class="comment">#以当前k值生成KNN模型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#计算10折交叉验证的准确率</span></span><br><span class="line"></span><br><span class="line">acc_kcvs=cross_val_score(</span><br><span class="line"></span><br><span class="line">knnModel,x,y,cv=<span class="number">10</span>,scoring=make_scorer(accuracy_score)</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">#将10折交叉验证的准确率的均值保存起来</span></span><br><span class="line"></span><br><span class="line">acc_means.append(acc_kcvs.mean())</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment">#计算10折交叉验证的精确率</span></span><br><span class="line"></span><br><span class="line">precision_kcvs=cross_val_score(</span><br><span class="line"></span><br><span class="line">knnModel,x,y,cv=<span class="number">10</span>,scoring=make_scorer(precision_score,pos_label=<span class="string">&quot;续约&quot;</span>)</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">#将10折交叉验证的精确率的均值保存起来</span></span><br><span class="line"></span><br><span class="line">precision_means.append(precision_kcvs.mean())</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment">#计算10折交叉验证的召回率</span></span><br><span class="line"></span><br><span class="line">recall_kcvs=cross_val_score(</span><br><span class="line"></span><br><span class="line">knnModel,x,y,cv=<span class="number">10</span>,scoring=make_scorer(recall_score,pos_label=<span class="string">&quot;续约&quot;</span>)</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">#将10折交叉验证的召回率的均值保存起来</span></span><br><span class="line"></span><br><span class="line">recall_means.append(recall_kcvs.mean())</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment">#计算10折交叉验证的F1</span></span><br><span class="line"></span><br><span class="line">f1_kcvs=cross_val_score(</span><br><span class="line"></span><br><span class="line">knnModel,x,y,cv=<span class="number">10</span>,scoring=make_scorer(f1_score,pos_label=<span class="string">&quot;续约&quot;</span>)</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">#将10折交叉验证的F1的均值保存起来</span></span><br><span class="line"></span><br><span class="line">f1_means.append(f1_kcvs.mean())</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成对应的评分模型</span></span><br><span class="line"></span><br><span class="line">score=pd.DataFrame(&#123;</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;k&quot;</span>:ks,</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;precision&quot;</span>:precision_means,</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;acc&quot;</span>:acc_means,</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;recall&quot;</span>:recall_means,</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;f1&quot;</span>:f1_means</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#figsize=(10,5)设定画布大小</span></span><br><span class="line"></span><br><span class="line">score.plot(x=<span class="string">&quot;k&quot;</span>,y=[<span class="string">&quot;precision&quot;</span>,<span class="string">&#x27;acc&#x27;</span>,<span class="string">&quot;recall&quot;</span>,<span class="string">&quot;f1&quot;</span>],figsize=(<span class="number">10</span>,<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#设定x轴刻度</span></span><br><span class="line"></span><br><span class="line">plt.xticks(<span class="built_in">range</span>(<span class="number">2</span>,<span class="number">30</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#预测未知数据</span></span><br><span class="line"></span><br><span class="line">knnModel=KNeighborsClassifier(n_neighbors=<span class="number">17</span>)<span class="comment">#使用K=17创建KNN模型</span></span><br><span class="line"></span><br><span class="line">knnModel.fit(x,y)<span class="comment">#使用华南数据进行训练</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用华北数据进行预测</span></span><br><span class="line"></span><br><span class="line">data_north=pd.read_csv(<span class="string">&quot;华北地区.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data_north.describe())</span><br><span class="line"></span><br><span class="line">data_north[<span class="string">&quot;预测预约&quot;</span>]=knnModel.predict(data_north[[<span class="string">&quot;注册时长&quot;</span>,<span class="string">&quot;营收收入&quot;</span>,<span class="string">&quot;成本&quot;</span>]]) <span class="comment">#预测是否续约</span></span><br><span class="line"></span><br><span class="line">data_north</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h2><ul><li><p><a href="https://aistudio.baidu.com/aistudio/index">飞桨AI Studio - 人工智能学习实训社区</a></p></li><li><p><a href="https://github.com/GiesenC/DeepLearning">GitHub - GiesenC/DeepLearning: DeepLearning model training, evaluation and prediction related code.</a></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基于Ubuntu20.04搭建伪分布式Hadoop生态圈</title>
      <link href="/posts/75e3a0d6.html"/>
      <url>/posts/75e3a0d6.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-SSH安装及免密配置"><a href="#1-SSH安装及免密配置" class="headerlink" title="1.SSH安装及免密配置"></a>1.SSH安装及免密配置</h2><p>集群、单节点模式都需要用到SSH登陆，Ubuntu默认已安装了SSH client，此外还需要安装SSH server</p><p>输入如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">更新源</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">一般的ubuntu不自带服务器的ssh，都有客服端的ssh，需要安装服务器端的ssh</span></span><br><span class="line">sudo apt-get install openssh-server       </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">启动ssh</span></span><br><span class="line">ssh localhost      </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">下面配置无密码ssh登录</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">若没有该目录，请先执行一次ssh localhost，~表示用户的主文件夹</span></span><br><span class="line">cd ~/.ssh/     </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 会有提示，一直按回车就可以</span></span><br><span class="line">ssh-keygen -t rsa     </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 加入授权</span></span><br><span class="line">cat ./id_rsa.pub &gt;&gt; ./authorized_keys    </span><br></pre></td></tr></table></figure><p>此时再用ssh localhost命令，无需输入密码就可以直接登陆了。</p><hr><h2 id="2-JDK配置"><a href="#2-JDK配置" class="headerlink" title="2.JDK配置"></a>2.JDK配置</h2><p>进入<a href="https://www.oracle.com/java/technologies/downloads/#java8">Java Downloads | Oracle</a>下载页面。（建议使用JDK1.8）</p><p>根据Linux系统的位数选择要下载的压缩包。</p><p>执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getconf LONG_BIT</span><br></pre></td></tr></table></figure><p>如果显示32，则是23位的Linux系统，如果显示64，则是64位的Linux系统。这里是64位的，所以下载<strong>Linux x64</strong></p><p>下载需要注册Oracle的账号，注册邮箱推荐<a href="https://mail.163.com/">网易邮箱</a>。</p><p><strong>注：JDK8或者JDK1.8是由于自从JDK1.5/JDK5命名方式改变后遗留的新旧命令方式问题。所以JDK8和JDK1.8等价。</strong></p><h3 id="2-1-解压安装"><a href="#2-1-解压安装" class="headerlink" title="2.1.解压安装"></a>2.1.解压安装</h3><ol><li><p>创建安装目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/local/java/</span><br></pre></td></tr></table></figure></li><li><p>解压缩到安装目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">注意下载的jdk版本</span></span><br><span class="line">sudo tar -zxvf jdk-8u231-linux-x64.tar.gz -C /usr/local/java/ </span><br></pre></td></tr></table></figure></li><li><p>解压缩以后，进入/usr/local/java/目录后，你会发现多一个目录，它就是JDK所在目录。JDK版本不同，这个目录名有所不同，这里是<strong>jdk1.8.0_231</strong>，那么完整路径就是**/usr/local/java/jdk1.8.0_231**。</p></li></ol><h3 id="2-2-设置环境变量"><a href="#2-2-设置环境变量" class="headerlink" title="2.2.设置环境变量"></a>2.2.设置环境变量</h3><ol><li><p>编辑变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim ~/.profile</span><br></pre></td></tr></table></figure></li><li><p>编辑模式下输入配置的环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">set</span> java1.8</span></span><br><span class="line">    export JAVA_HOME=/usr/local/java/jdk1.8.0_231</span><br><span class="line">    export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class="line">    export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib</span><br><span class="line">    export PATH=.:$&#123;JAVA_HOME&#125;/bin:$PATH</span><br></pre></td></tr></table></figure></li><li><p>使环境变量生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.profile</span><br></pre></td></tr></table></figure></li><li><p>查看Java版本信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure></li><li><p>得到输出结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java version &quot;1.8.0_231&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_231-b12)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.231-b12, mixed mode)</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="3-Hadoop伪分布式配置"><a href="#3-Hadoop伪分布式配置" class="headerlink" title="3.Hadoop伪分布式配置"></a>3.Hadoop伪分布式配置</h2><p>可参照历史博文</p><ul><li><a href="https://giesen.top/posts/4a3195fd.html">基于WSL搭建Hadoop伪分布式</a></li></ul><hr><h2 id="4-Spark配置"><a href="#4-Spark配置" class="headerlink" title="4.Spark配置"></a>4.Spark配置</h2><h3 id="4-1-安装所需软件包"><a href="#4-1-安装所需软件包" class="headerlink" title="4.1.安装所需软件包"></a>4.1.安装所需软件包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install curl mlocate git scala -y</span><br></pre></td></tr></table></figure><h3 id="4-2-下载-Apache-Spark"><a href="#4-2-下载-Apache-Spark" class="headerlink" title="4.2.下载 Apache Spark"></a>4.2.下载 Apache Spark</h3><p>更多最新版本可以查看<a href="https://spark.apache.org/downloads.html">官方下载页面</a>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://archive.apache.org/dist/spark/spark-3.2.1/spark-3.2.1-bin-hadoop3.2.tgz</span><br></pre></td></tr></table></figure><h3 id="4-3-解压安装"><a href="#4-3-解压安装" class="headerlink" title="4.3.解压安装"></a>4.3.解压安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">解压文件</span></span><br><span class="line">sudo tar -zxf spark安装包 -C /usr/local/        </span><br><span class="line"></span><br><span class="line">cd /usr/local</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">将解压后的文件重命名为spark</span></span><br><span class="line">sudo mv ./spark-3.2.1 ./spark       </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">设置用户权限，-R后的参数表示计算机用户名</span></span><br><span class="line">sudo chown -R 用户名 ./spark           </span><br></pre></td></tr></table></figure><h3 id="4-4-使hadoop和spark建立联系"><a href="#4-4-使hadoop和spark建立联系" class="headerlink" title="4.4.使hadoop和spark建立联系"></a>4.4.使hadoop和spark建立联系</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/spark</span><br><span class="line"></span><br><span class="line">cp ./conf/spark-env.sh.template ./conf/spark-env.sh</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">编辑spark-env.sh文件</span></span><br><span class="line">sudo vim ./conf/spark-env.sh               </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">在文件最后一行加入:(来使hadoop和spark建立联系)</span></span><br><span class="line">export SPARK_DIST_CLASSPATH=$(/usr/local/hadoop-3.2.2/bin/hadoop classpath)    </span><br></pre></td></tr></table></figure><h3 id="4-5-编辑profile配置文件"><a href="#4-5-编辑profile配置文件" class="headerlink" title="4.5.编辑profile配置文件"></a>4.5.编辑profile配置文件</h3><p>增加spark安装目录到系统路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo vim ~/.profile</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">添加下面两行到文件并保存</span></span><br><span class="line">export SPARK_HOME=/usr/local/spark</span><br><span class="line">export PATH=$PATH:$SPARK_HOME/bin:$SPARK_HOME/sbin</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">保存文件并生效</span></span><br><span class="line">source ~/.profile</span><br></pre></td></tr></table></figure><h3 id="4-6-启动spark"><a href="#4-6-启动spark" class="headerlink" title="4.6.启动spark"></a>4.6.启动spark</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">在/usr/<span class="built_in">local</span>/spark/目录下输入命令即可启动</span></span><br><span class="line">./bin/pyspark</span><br></pre></td></tr></table></figure><hr><h2 id="5-Zookeeper配置"><a href="#5-Zookeeper配置" class="headerlink" title="5.Zookeeper配置"></a>5.Zookeeper配置</h2><h3 id="5-1-下载安装包"><a href="#5-1-下载安装包" class="headerlink" title="5.1.下载安装包"></a>5.1.下载安装包</h3><p>通过<a href="https://downloads.apache.org/zookeeper/">官方下载页面</a>下载</p><h3 id="5-2-解压安装"><a href="#5-2-解压安装" class="headerlink" title="5.2.解压安装"></a>5.2.解压安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">解压文件</span></span><br><span class="line">sudo tar -zxf apache-zookeeper-3.6.3-bin.tar.gz -C /usr/local</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">将解压后的文件重命名为zookeeper</span></span><br><span class="line">sudo mv ./apache-zookeeper-3.6.3-bin ./zookeeper</span><br></pre></td></tr></table></figure><h3 id="5-3-配置文件zoo-cfg"><a href="#5-3-配置文件zoo-cfg" class="headerlink" title="5.3.配置文件zoo.cfg"></a>5.3.配置文件zoo.cfg</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">将解压后zookeeper目录下的conf目录下的zoo_sample.cfg文件重命名为zoo.cfg</span></span><br><span class="line">mv zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure><h3 id="5-4-配置"><a href="#5-4-配置" class="headerlink" title="5.4.配置"></a>5.4.配置</h3><p>这里是配置单机模式，也就是只有一个机器的集群，所以server只要配置一个即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"># The number of milliseconds of each tick  </span><br><span class="line">  </span><br><span class="line">#这个时间是作为Zookeeper服务器之间或客户端与服务器之间维持心跳的时间间隔  </span><br><span class="line">tickTime=2000  </span><br><span class="line">  </span><br><span class="line"># The number of ticks that the initial   </span><br><span class="line"># synchronization phase can take  </span><br><span class="line">  </span><br><span class="line">#配置 Zookeeper 接受客户端初始化连接时最长能忍受多少个心跳时间间隔数。  </span><br><span class="line">initLimit=10  </span><br><span class="line">  </span><br><span class="line"># The number of ticks that can pass between   </span><br><span class="line"># sending a request and getting an acknowledgement  </span><br><span class="line">  </span><br><span class="line">#Leader 与 Follower 之间发送消息，请求和应答时间长度  </span><br><span class="line">syncLimit=5  </span><br><span class="line">  </span><br><span class="line"># the directory where the snapshot is stored.  </span><br><span class="line"># do not use /tmp for storage, /tmp here is just   </span><br><span class="line"># example sakes.  </span><br><span class="line"># dataDir=/tmp/zookeeper  </span><br><span class="line">  </span><br><span class="line">#数据目录需要提前创建  </span><br><span class="line">dataDir=/usr/local/zookeeper/data  </span><br><span class="line">  </span><br><span class="line">#日志目录需要提前创建  </span><br><span class="line">dataLogDir=/usr/local/zookeeper/log</span><br><span class="line">  </span><br><span class="line"># the port at which the clients will connect  </span><br><span class="line">  </span><br><span class="line">#访问端口号  </span><br><span class="line">clientPort=2181  </span><br><span class="line">  </span><br><span class="line"># the maximum number of client connections.  </span><br><span class="line"># increase this if you need to handle more clients  </span><br><span class="line">#maxClientCnxns=60  </span><br><span class="line">#  </span><br><span class="line"># Be sure to read the maintenance section of the   </span><br><span class="line"># administrator guide before turning on autopurge.  </span><br><span class="line">#  </span><br><span class="line"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance  </span><br><span class="line">#  </span><br><span class="line"># The number of snapshots to retain in dataDir  </span><br><span class="line">#autopurge.snapRetainCount=3  </span><br><span class="line"># Purge task interval in hours  </span><br><span class="line"># Set to &quot;0&quot; to disable auto purge feature  </span><br><span class="line">#autopurge.purgeInterval=1  </span><br><span class="line">  </span><br><span class="line">#server.每个节点服务编号=服务器ip地址：集群通信端口：选举端口  </span><br><span class="line">server.1=ip地址:2888:3888  </span><br><span class="line">#server.2=slave1.hadoop.com:2888:3888  </span><br><span class="line">#server.3=slave2.hadoop.com:2888:3888</span><br></pre></td></tr></table></figure><h3 id="5-5-ip地址填写为ubuntu的主机地址"><a href="#5-5-ip地址填写为ubuntu的主机地址" class="headerlink" title="5.5.ip地址填写为ubuntu的主机地址"></a>5.5.ip地址填写为ubuntu的主机地址</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><h3 id="5-6-编辑profile配置文件"><a href="#5-6-编辑profile配置文件" class="headerlink" title="5.6.编辑profile配置文件"></a>5.6.编辑profile配置文件</h3><p>增加zookeeper安装目录到系统路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo vim ~/.profile</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">添加下面两行到文件并保存</span></span><br><span class="line">export ZOOKEEPER_HOME=/usr/local/zookeeper</span><br><span class="line">export PATH=$&#123;ZOOKEEPER_HOME&#125;/bin:$PATH</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">保存文件并生效</span></span><br><span class="line">source ~/.profile</span><br></pre></td></tr></table></figure><h3 id="5-7-启动-关闭zookeeper"><a href="#5-7-启动-关闭zookeeper" class="headerlink" title="5.7.启动/关闭zookeeper"></a>5.7.启动/关闭zookeeper</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">启动</span></span><br><span class="line">./zkServer.sh start</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看状态</span></span><br><span class="line">zkServer.sh status</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">关闭</span></span><br><span class="line">./zkServer.sh stop</span><br></pre></td></tr></table></figure><hr><h2 id="6-Hbase配置"><a href="#6-Hbase配置" class="headerlink" title="6.Hbase配置"></a>6.Hbase配置</h2><h3 id="6-1-确保版本依赖对应"><a href="#6-1-确保版本依赖对应" class="headerlink" title="6.1.确保版本依赖对应"></a>6.1.确保版本依赖对应</h3><p>在安装HBase之前，因HBase对Hadoop具有版本依赖性，故需确保已经安装了Hadoop3.x.x。</p><h3 id="6-2-解压安装"><a href="#6-2-解压安装" class="headerlink" title="6.2.解压安装"></a>6.2.解压安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">解压安装包hbase-2.2.2-bin.tar.gz至路径 /usr/<span class="built_in">local</span></span></span><br><span class="line">sudo tar -zxf ~/下载/hbase-2.2.2-bin.tar.gz -C /usr/local</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">将解压后的文件重命名为hbase</span></span><br><span class="line">sudo mv ./hbase-2.2.2 ./hbase</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">设置用户权限，-R后的参数表示计算机用户名</span></span><br><span class="line">sudo chown -R 用户名 ./hbase</span><br></pre></td></tr></table></figure><h3 id="6-3-配置环境变量"><a href="#6-3-配置环境变量" class="headerlink" title="6.3.配置环境变量"></a>6.3.配置环境变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">将hbase下的bin目录添加到path中，启动hbase时便无需到/usr/<span class="built_in">local</span>/hbase目录下启动</span></span><br><span class="line">sudo vim ~/.profile</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">添加下面两行到文件并保存</span></span><br><span class="line">export PATH=$PATH:/usr/local/hbase/bin</span><br><span class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$HADOOP_HOME/bin:$HADOOP_HOME/sbin:$HBASE_HOME/bin:$PATH</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">保存文件并生效</span></span><br><span class="line">source ~/.profile</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看HBase版本，确定hbase安装成功</span></span><br><span class="line">/usr/local/hbase/bin/hbase version</span><br></pre></td></tr></table></figure><h3 id="6-4-伪分布式模式配置"><a href="#6-4-伪分布式模式配置" class="headerlink" title="6.4.伪分布式模式配置"></a>6.4.伪分布式模式配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /usr/local/hbase/conf/hbase-env.sh</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">配置JAVA_HOME，HBASE_CLASSPATH，HBASE_MANAGES_ZK.</span> </span><br><span class="line">export JAVA_HOME=/usr/local/java/jdk1.8.0_231</span><br><span class="line">export HBASE_CLASSPATH=/usr/local/hbase/conf</span><br><span class="line">export HBASE_MANAGES_ZK=true</span><br></pre></td></tr></table></figure><h3 id="6-5-配置-usr-local-hbase-conf-hbase-site-xml"><a href="#6-5-配置-usr-local-hbase-conf-hbase-site-xml" class="headerlink" title="6.5.配置/usr/local/hbase/conf/hbase-site.xml"></a>6.5.配置/usr/local/hbase/conf/hbase-site.xml</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /usr/local/hbase/conf/hbase-site.xml</span><br></pre></td></tr></table></figure><p>修改hbase.rootdir，指定HBase数据在HDFS上的存储路径；将属性hbase.cluter.distributed设置为true。假设当前Hadoop集群运行在伪分布式模式下，在本机上运行，且NameNode运行在9000端口。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost:9000/hbase<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.cluster.distributed<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.unsafe.stream.capability.enforce<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-6-测试运行HBase"><a href="#6-6-测试运行HBase" class="headerlink" title="6.6.测试运行HBase"></a>6.6.测试运行HBase</h3><ol><li><p>首先登陆ssh，再切换目录至/usr/local/hadoop ；再启动hadoop，如果已经启动hadoop请跳过此步骤。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ssh localhost</span><br><span class="line"></span><br><span class="line">cd /usr/local/hadoop</span><br><span class="line"></span><br><span class="line">./sbin/start-dfs.sh</span><br></pre></td></tr></table></figure></li><li><p>切换目录至/usr/local/hbase；再启动HBase。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/hbase</span><br><span class="line"></span><br><span class="line">bin/start-hbase.sh</span><br></pre></td></tr></table></figure></li><li><p>输入命令jps，看到以下界面说明hbase启动成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Jps</span><br><span class="line">HMaster</span><br><span class="line">HQuorumPeer</span><br><span class="line">NameNode</span><br><span class="line">HRegionServer</span><br><span class="line">SecondaryNameNode</span><br><span class="line">DataNode</span><br></pre></td></tr></table></figure></li><li><p>进入shell界面</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hbase shell</span><br></pre></td></tr></table></figure></li><li><p>停止HBase运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/stop-hbase.sh</span><br></pre></td></tr></table></figure></li></ol><h3 id="6-7-注意"><a href="#6-7-注意" class="headerlink" title="6.7.注意"></a>6.7.注意</h3><ol><li><p>如果在操作HBase的过程中发生错误，可以通过{HBASE_HOME}目录（/usr/local/hbase）下的logs子目录中的日志文件查看错误原因。  </p></li><li><p>这里启动关闭Hadoop和HBase的顺序一定是：  启动Hadoop—&gt;启动HBase—&gt;关闭HBase—&gt;关闭Hadoop</p></li></ol><hr><h2 id="7-Mysql配置"><a href="#7-Mysql配置" class="headerlink" title="7.Mysql配置"></a>7.Mysql配置</h2><p><a href="http://www.mysql.com/">MySQL</a>是一个关系型数据库管理系统，由瑞典MySQL AB公司开发，目前属于Oracle旗下产品。MySQL最流行的关系型数据库管理系统，在WEB应用方面MySQL是最好的RDBMS(Relational Database Management System，关系数据库管理系统) 应用软件之一。</p><h3 id="7-1-安装Mysql"><a href="#7-1-安装Mysql" class="headerlink" title="7.1.安装Mysql"></a>7.1.安装Mysql</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">更新软件源</span></span><br><span class="line">sudo apt-get update </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">安装mysql</span></span><br><span class="line">sudo apt-get install mysql-server </span><br></pre></td></tr></table></figure><h3 id="7-2-初始化配置"><a href="#7-2-初始化配置" class="headerlink" title="7.2.初始化配置"></a>7.2.初始化配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql_secure_installation</span><br></pre></td></tr></table></figure><ol><li><p>取消对密码的强校验</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">VALIDATE PASSWORD PLUGIN can be used to test passwords...</span><br><span class="line">Press y|Y for Yes, any other key for No: N (选择N ,不会进行密码的强校验)</span><br></pre></td></tr></table></figure></li><li><p>设置密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Please set the password for root here...</span><br><span class="line">New password: (输入密码)</span><br><span class="line">Re-enter new password: (重复输入)</span><br></pre></td></tr></table></figure></li><li><p>不删除匿名用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">By default, a MySQL installation has an anonymous user,</span><br><span class="line">allowing anyone to log into MySQL without having to have</span><br><span class="line">a user account created for them...</span><br><span class="line">Remove anonymous users? (Press y|Y for Yes, any other key for No) : N (选择N，不删除匿名用户)</span><br></pre></td></tr></table></figure></li><li><p>允许root远程连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Normally, root should only be allowed to connect from</span><br><span class="line">&#x27;localhost&#x27;. This ensures that someone cannot guess at</span><br><span class="line">the root password from the network...</span><br><span class="line">Disallow root login remotely? (Press y|Y for Yes, any other key for No) : N (选择N，允许root远程连接)</span><br></pre></td></tr></table></figure></li><li><p>保留test数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">By default, MySQL comes with a database named &#x27;test&#x27; that</span><br><span class="line">anyone can access...</span><br><span class="line">Remove test database and access to it? (Press y|Y for Yes, any other key for No) : N (选择N，保留test数据库)</span><br></pre></td></tr></table></figure></li><li><p>使修改权限立即生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Reloading the privilege tables will ensure that all changes</span><br><span class="line">made so far will take effect immediately.</span><br><span class="line">Reload privilege tables now? (Press y|Y for Yes, any other key for No) : Y (选择Y，使修改权限立即生效)</span><br></pre></td></tr></table></figure></li></ol><h3 id="7-3-检查Mysql服务状态"><a href="#7-3-检查Mysql服务状态" class="headerlink" title="7.3.检查Mysql服务状态"></a>7.3.检查Mysql服务状态</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status mysql.service</span><br></pre></td></tr></table></figure><h3 id="7-4-配置远程访问"><a href="#7-4-配置远程访问" class="headerlink" title="7.4.配置远程访问"></a>7.4.配置远程访问</h3><p>在Ubuntu下MySQL是只允许本地访问的，若需要远程访问，则需要进行配置；</p><ol><li><p>找到 bind-address 修改值为 0.0.0.0</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">找到 bind-address 修改值为 0.0.0.0</span></span><br><span class="line">sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure></li><li><p>重启Mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/mysql restart</span><br></pre></td></tr></table></figure></li><li><p>登录Mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql -u root -p</span><br></pre></td></tr></table></figure></li><li><p>输入用户密码并查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#切换数据库 </span><br><span class="line">mysql<span class="operator">&gt;</span>use mysql; </span><br><span class="line"></span><br><span class="line">#查询用户表命令</span><br><span class="line">mysql<span class="operator">&gt;</span><span class="keyword">select</span> <span class="keyword">User</span>,authentication_string,Host <span class="keyword">from</span> <span class="keyword">user</span>; </span><br><span class="line"></span><br><span class="line">#查看状态 </span><br><span class="line">mysql<span class="operator">&gt;</span><span class="keyword">select</span> host,<span class="keyword">user</span>,plugin <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure></li><li><p>设置权限与密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#使用mysql_native_password修改加密规则</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;密码&#x27;</span>; </span><br><span class="line"></span><br><span class="line">#更新一下用户的密码</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;密码&#x27;</span> PASSWORD EXPIRE NEVER; </span><br><span class="line"></span><br><span class="line">#允许远程访问</span><br><span class="line">mysql<span class="operator">&gt;</span> UPDATE <span class="keyword">user</span> <span class="keyword">SET</span> host <span class="operator">=</span> <span class="string">&#x27;%&#x27;</span> <span class="keyword">WHERE</span> <span class="keyword">user</span> <span class="operator">=</span> <span class="string">&#x27;root&#x27;</span>; </span><br></pre></td></tr></table></figure></li><li><p>刷新cache中配置 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#刷新权限 </span><br><span class="line">mysql<span class="operator">&gt;</span>flush privileges; mysql<span class="operator">&gt;</span>quit;</span><br></pre></td></tr></table></figure></li></ol><h3 id="7-5-Mysql8-x-x配置JDBC"><a href="#7-5-Mysql8-x-x配置JDBC" class="headerlink" title="7.5.Mysql8.x.x配置JDBC"></a>7.5.Mysql8.x.x配置JDBC</h3><ol><li><p>找到系统对应版本的java JDBC:<a href="https://dev.mysql.com/downloads/connector/j/">MySQL :: Download Connector/J</a></p></li><li><p>操作系统选择<code>Platform Independent</code>或<code>Ubuntu Linux</code>，下载<code>mysql-connector-java-8.x.x.tar.gz</code>或<code>mysql-connector-java_8.x.x-1ubuntu20.04_all.deb</code>文件。</p></li><li><p>把该驱动程序解压拷贝到spark的安装目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">只需mysql-connector-java-8.x.x-bin.jar文件即可</span></span><br><span class="line">sudo tar -zxf ~/Downloads/mysql-connector-java-8.x.x.tar.gz -C /usr/local/spark/jars</span><br></pre></td></tr></table></figure></li></ol><h3 id="7-6-使用pyspark连接mysql数据库"><a href="#7-6-使用pyspark连接mysql数据库" class="headerlink" title="7.6.使用pyspark连接mysql数据库"></a>7.6.使用pyspark连接mysql数据库</h3><ol><li><p>连接之前需要先添加信息，打开数据库向数据库添加表格和信息：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span><span class="keyword">create</span> database spark ;</span><br><span class="line">mysql<span class="operator">&gt;</span>use spark;</span><br><span class="line">mysql<span class="operator">&gt;</span><span class="keyword">create</span> <span class="keyword">table</span> student (id <span class="type">int</span>(<span class="number">4</span>), name <span class="type">char</span>(<span class="number">20</span>), gender <span class="type">char</span>(<span class="number">4</span>),age <span class="type">int</span>(<span class="number">4</span>));</span><br><span class="line">mysql<span class="operator">&gt;</span><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;Xueqian&#x27;</span>,<span class="string">&#x27;F&#x27;</span>,<span class="number">23</span>);</span><br><span class="line">mysql<span class="operator">&gt;</span><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;Weiliang&#x27;</span>,<span class="string">&#x27;M&#x27;</span>,<span class="number">24</span>);</span><br><span class="line">mysql<span class="operator">&gt;</span><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student ;</span><br></pre></td></tr></table></figure></li><li><p>pyspark通过jdbc连接MySQL数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">打开spark</span></span><br><span class="line">sudo cd /usr/local/spark/bin</span><br><span class="line"></span><br><span class="line">./pyspark</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">注意是在spark中</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;jdbcDF=spark.read.format(<span class="string">&quot;jdbc&quot;</span>).option(<span class="string">&quot;driver&quot;</span>,<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>).option(<span class="string">&quot;url&quot;</span>,<span class="string">&quot;jdbc:mysql://localhost:3306/spark&quot;</span>).option(<span class="string">&quot;dbtable&quot;</span>,<span class="string">&quot;student&quot;</span>).option(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;root&quot;</span>).option(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;密码&quot;</span>).load()</span></span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;jdbcDF.show()</span></span><br></pre></td></tr></table></figure></li><li><p>正确连接即可显示mysql刚刚新建的表格信息</p></li></ol><h3 id="7-7-Mysql命令"><a href="#7-7-Mysql命令" class="headerlink" title="7.7.Mysql命令"></a>7.7.Mysql命令</h3><ol><li><p>检查服务状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl status mysql.service</span><br><span class="line"><span class="meta">#</span><span class="bash">or</span></span><br><span class="line">sudo service mysql status</span><br></pre></td></tr></table></figure></li><li><p>mysql服务启动停止</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">启动</span> </span><br><span class="line">sudo service mysql start</span><br><span class="line"><span class="meta">#</span><span class="bash">停止</span></span><br><span class="line">sudo service mysql stop</span><br></pre></td></tr></table></figure></li></ol><p>3.其他详细命令可参照历史博文</p><ul><li><a href="https://giesen.top/posts/3db3b806.html">MySQL命令汇总</a></li></ul><h3 id="7-8-Mysql登录报错解决方案"><a href="#7-8-Mysql登录报错解决方案" class="headerlink" title="7.8.Mysql登录报错解决方案"></a>7.8.Mysql登录报错解决方案</h3><ol><li><p>mysql登录时报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR 1045 (28000): Access denied for user &#x27;root&#x27;@&#x27;localhost&#x27; (using password: YES)</span><br></pre></td></tr></table></figure></li><li><p>解决方案</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/mysql/my.cnf </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">登录时跳过权限检查,添加在末尾</span></span><br><span class="line">[mysqld] </span><br><span class="line">skip-grant-tables</span><br></pre></td></tr></table></figure></li><li><p>重启mysql服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart mysqld</span><br></pre></td></tr></table></figure></li><li><p>修改密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#登录mysql，直接回车（Enter）</span><br><span class="line">mysql –u root –p</span><br><span class="line"></span><br><span class="line">#修改</span><br><span class="line">mysql<span class="operator">&gt;</span><span class="keyword">set</span> password <span class="keyword">for</span> ‘root’@‘localhost’<span class="operator">=</span>password(‘密码’);</span><br><span class="line"></span><br><span class="line">#如果报错</span><br><span class="line">ERROR <span class="number">1290</span> (HY000): The MySQL server <span class="keyword">is</span> <span class="keyword">running</span> <span class="keyword">with</span> the <span class="comment">--skip-grant-tables option so it cannot execute this statement</span></span><br><span class="line"></span><br><span class="line">#输入</span><br><span class="line">mysql<span class="operator">&gt;</span>flush privileges;</span><br><span class="line"></span><br><span class="line">#再次输入</span><br><span class="line">mysql<span class="operator">&gt;</span><span class="keyword">set</span> password <span class="keyword">for</span> ‘root’@‘localhost’<span class="operator">=</span>password(‘密码’);</span><br><span class="line"></span><br><span class="line">#为避免麻烦，再次设置远程访问</span><br><span class="line">mysql<span class="operator">&gt;</span><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span>IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;Admin123@qwe&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;</span><br><span class="line"></span><br><span class="line">#输入</span><br><span class="line">mysql<span class="operator">&gt;</span>flush privileges;</span><br><span class="line"></span><br><span class="line">#退出</span><br><span class="line">mysql<span class="operator">&gt;</span>exit</span><br></pre></td></tr></table></figure></li><li><p>取消跳过权限检查</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/mysql/my.cnf </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">注释或删除</span></span><br><span class="line">[mysqld] </span><br><span class="line">skip-grant-tables</span><br></pre></td></tr></table></figure></li><li><p>重启mysql即可使用新密码连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart mysqld</span><br></pre></td></tr></table></figure></li></ol><h3 id="7-9-sqoop导入MySQL中文乱码解决方案"><a href="#7-9-sqoop导入MySQL中文乱码解决方案" class="headerlink" title="7.9.sqoop导入MySQL中文乱码解决方案"></a>7.9.sqoop导入MySQL中文乱码解决方案</h3><ol><li><p>导致导入（可以插入中文，但不能用sqoop导入中文）时中文乱码的原因是character_set_server默认设置是latin1。</p></li><li><p>解决方案</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">编辑配置文件</span></span><br><span class="line">sudo vi /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">在[mysqld]下添加一行</span></span><br><span class="line">character_set_server=utf8</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>重启mysql服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql restart</span><br></pre></td></tr></table></figure></li><li><p>登陆mysql，查看mysql目前设置的编码为utf8即可解决。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#注意在mysql中执行命令</span><br><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> &quot;char%&quot;;</span><br></pre></td></tr></table></figure></li><li><p>关于utf8mb3 &amp; uft8mb4</p></li></ol><ul><li><a href="https://blog.csdn.net/htuhxf/article/details/90676341">MYSQL（8.0版本及以上）- utf8mb3，utf8mb4 和utf8的含义和由来</a></li></ul><hr><h2 id="8-Mongodb配置"><a href="#8-Mongodb配置" class="headerlink" title="8.Mongodb配置"></a>8.Mongodb配置</h2><h3 id="8-1-配置安装"><a href="#8-1-配置安装" class="headerlink" title="8.1.配置安装"></a>8.1.配置安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装依赖包</span></span><br><span class="line">sudo apt-get install libcurl4 openssl</span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭和卸载原有的mongodb</span></span><br><span class="line">service mongodb stop</span><br><span class="line">sudo apt-get remove mongodb</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 导入包管理系统使用的公钥</span></span><br><span class="line">wget -qO - https://www.mongodb.org/static/pgp/server-4.4.asc | sudo apt-key add -</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果命令执行结果没有显示OK，则执行此命令在把上一句重新执行：sudo apt-get install gnupg</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注册mongodb源</span></span><br><span class="line">echo &quot;deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.4 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-4.4.list</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新源</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装mongodb</span></span><br><span class="line">sudo apt-get install -y mongodb-org=4.4.2 mongodb-org-server=4.4.2 mongodb-org-shell=4.4.2 mongodb-org-mongos=4.4.2 mongodb-org-tools=4.4.2</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装过程中如果提示: mongodb-org-tools : 依赖: mongodb-database-tools 但是它将不会被安装</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 终端下运行以下命令,解决:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sudo apt-get autoremove mongodb-org-mongos mongodb-org-tools mongodb-org</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sudo apt-get install -y mongodb-org=4.4.2</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建数据存储目录</span></span><br><span class="line">sudo mkdir -p /data/db</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改配置，开放27017端口</span></span><br><span class="line">sudo vim /etc/mongod.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 把12行附近的port=27017左边的<span class="comment">#号去掉</span></span></span><br></pre></td></tr></table></figure><h3 id="8-2-启动和关闭MongoDB"><a href="#8-2-启动和关闭MongoDB" class="headerlink" title="8.2.启动和关闭MongoDB"></a>8.2.启动和关闭MongoDB</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 重新加载配置，并启动mongodb</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl start mongod</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看运行状态</span></span><br><span class="line">sudo systemctl status mongod</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果mongodb状态为stop，则运行 sudo systemctl <span class="built_in">enable</span> mongod</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止mongodb</span></span><br><span class="line">sudo systemctl stop mongod</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启mongodb</span></span><br><span class="line">sudo systemctl restart mongod</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入交互终端</span></span><br><span class="line">mongo</span><br></pre></td></tr></table></figure><h3 id="8-3-尾巴"><a href="#8-3-尾巴" class="headerlink" title="8.3.尾巴"></a>8.3.尾巴</h3><ul><li><a href="https://blog.csdn.net/yutu75/article/details/110941936">Ubuntu20.04安装MongoDB及其基本使用</a></li></ul><hr><h2 id="9-Hive配置"><a href="#9-Hive配置" class="headerlink" title="9.Hive配置"></a>9.Hive配置</h2><h3 id="9-1-下载Hive-3-1-2"><a href="#9-1-下载Hive-3-1-2" class="headerlink" title="9.1.下载Hive-3.1.2"></a>9.1.下载Hive-3.1.2</h3><p><a href="http://mirror.bit.edu.cn/apache/hive/hive-3.1.2/apache-hive-3.1.2-bin.tar.gz">apache-hive-3.1.2-bin.tar.gz</a></p><h3 id="9-2-解压安装"><a href="#9-2-解压安装" class="headerlink" title="9.2.解压安装"></a>9.2.解压安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">解压安装包apache-hive-3.1.2-bin.tar.gz至路径 /usr/<span class="built_in">local</span></span></span><br><span class="line">sudo tar -zxf ~/下载/apache-hive-3.1.2-bin.tar.gz -C /usr/local</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">将解压后的文件重命名为hbase</span></span><br><span class="line">sudo mv ./apache-hive-3.1.2-bin.tar.gz ./hive</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">设置用户权限，-R后的参数表示计算机用户名</span></span><br><span class="line">sudo chown -R 用户名 ./hive</span><br></pre></td></tr></table></figure><h3 id="9-3-配置环境变量"><a href="#9-3-配置环境变量" class="headerlink" title="9.3.配置环境变量"></a>9.3.配置环境变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo vim ~/.profile</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">添加下面两行到文件并保存</span></span><br><span class="line">export HIVE_HOME=/usr/local/hive</span><br><span class="line">export PATH=$PATH:$HIVE_HOME/bin</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">保存文件并生效</span></span><br><span class="line">source ~/.profile</span><br></pre></td></tr></table></figure><h3 id="9-4-创建编辑hive-site-xml"><a href="#9-4-创建编辑hive-site-xml" class="headerlink" title="9.4.创建编辑hive-site.xml"></a>9.4.创建编辑hive-site.xml</h3><p>在/usr/local/hive/conf目录下，创建hive-site.xml。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建文件</span></span><br><span class="line">touch hive-site.xml  </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">修改编辑</span></span><br><span class="line">sudo vim hive-site.xml </span><br></pre></td></tr></table></figure><h3 id="9-5-添加以下代码"><a href="#9-5-添加以下代码" class="headerlink" title="9.5.添加以下代码"></a>9.5.添加以下代码</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.schema.verification<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">description</span>&gt;</span></span><br><span class="line">          Enforce metastore schema version consistency.</span><br><span class="line">          True: Verify that version information stored in metastore matches with one from Hive jars.  Also disable automatic</span><br><span class="line">          schema migration attempt. Users are required to manully migrate schema after Hive upgrade which ensures</span><br><span class="line">          proper metastore schema migration. (Default)</span><br><span class="line">          False: Warn if the version information stored in metastore doesn&#x27;t match with one from in Hive jars.</span><br><span class="line">      <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 存储在hdfs上的数据路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.warehouse.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/hive/warehouse<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>location of default database for the warehouse<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.exec.scratchdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/hadoop-3.2.2/tmp/hdfs/hive<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>HDFS root scratch dir for Hive jobs which gets created with write all (733) permission. For each connecting user, an HDFS scratch dir: $&#123;hive.exec.scratchdir&#125;/<span class="symbol">&amp;lt;</span>username<span class="symbol">&amp;gt;</span> is created, with $&#123;hive.scratch.dir.permission&#125;.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 本地mysql --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://localhost:3306/myhive?createDatabaseIfNotExist=true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">description</span>&gt;</span>JDBC connect string for a JDBC metastore<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 如果 mysql 和 hive 在同一个服务器节点，那么请更改 hadoop02 为 localhost --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">description</span>&gt;</span>Driver class name for a JDBC metastore<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">description</span>&gt;</span>username to use against metastore database<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>数据库密码<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>password to use against metastore database<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9-6-创建两个对应的目录并赋予读写权限"><a href="#9-6-创建两个对应的目录并赋予读写权限" class="headerlink" title="9.6.创建两个对应的目录并赋予读写权限"></a>9.6.创建两个对应的目录并赋予读写权限</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo -mkdir -p /usr/local/hive/warehouse</span><br><span class="line">sudo -mkdir -p /usr/local/hadoop-3.2.2/tmp/hdfs/hive</span><br><span class="line">sudo -chmod -R 777 /usr/local/hive/warehouse</span><br><span class="line">sudo -chmod -R 777 /usr/local/hadoop-3.2.2/tmp/hdfs/hive</span><br></pre></td></tr></table></figure><h3 id="9-7-注意不同版本的数据库对应不同数据库的驱动类名称"><a href="#9-7-注意不同版本的数据库对应不同数据库的驱动类名称" class="headerlink" title="9.7.注意不同版本的数据库对应不同数据库的驱动类名称"></a>9.7.注意不同版本的数据库对应不同数据库的驱动类名称</h3><ul><li>新版本8.0版本的驱动为com.mysql.cj.jdbc.Driver  </li><li>旧版本5.x版本的驱动为com.mysql.jdbc.Driver</li></ul><h3 id="9-8-配置hive-env-sh文件"><a href="#9-8-配置hive-env-sh文件" class="headerlink" title="9.8.配置hive-env.sh文件"></a>9.8.配置hive-env.sh文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">在/usr/<span class="built_in">local</span>/hive/conf下执行该命令</span></span><br><span class="line">sudo cp hive-env.sh.template hive-env.sh</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">添加下面三行到文件并保存</span></span><br><span class="line">export HADOOP_HOME=/usr/local/hadoop-3.2.2</span><br><span class="line">export HIVE_CONF_DIR=/usr/local/hive/conf</span><br><span class="line">export HIVE_AUX_JARS_PATH=/usr/local/hive/lib</span><br></pre></td></tr></table></figure><h3 id="9-9-将JDBC的jar包拷贝在-usr-local-hive-lib目录下"><a href="#9-9-将JDBC的jar包拷贝在-usr-local-hive-lib目录下" class="headerlink" title="9.9.将JDBC的jar包拷贝在/usr/local/hive/lib目录下"></a>9.9.将JDBC的jar包拷贝在/usr/local/hive/lib目录下</h3><ul><li><a href="https://dev.mysql.com/downloads/file/?id=494887">mysql-connector-java_8.0.20-1ubuntu20.04_all.deb</a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">解压文件，将文件中的mysql-connector-java-8.0.20.jar复制到/usr/<span class="built_in">local</span>/hive/lib中</span></span><br><span class="line">sudo tar zxvf mysql-connector-java_8.0.20-1ubuntu20.04_all.deb</span><br><span class="line">sudo mv mysql-connector-java-8.0.20.jar /usr/local/hive/lib</span><br></pre></td></tr></table></figure></li></ul><h3 id="9-10-在-usr-local-hive-bin目录下执行以下命令"><a href="#9-10-在-usr-local-hive-bin目录下执行以下命令" class="headerlink" title="9.10.在/usr/local/hive/bin目录下执行以下命令"></a>9.10.在/usr/local/hive/bin目录下执行以下命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">schematool -dbType mysql -initSchema</span><br><span class="line">schematool -dbType mysql -info</span><br><span class="line">hive</span><br></pre></td></tr></table></figure><h3 id="9-11-注意"><a href="#9-11-注意" class="headerlink" title="9.11.注意"></a>9.11.注意</h3><p>启动hive时需先启动hadoop集群、zookeeper和mysql，关闭则倒序执行。</p><h3 id="9-12-报错原因"><a href="#9-12-报错原因" class="headerlink" title="9.12.报错原因"></a>9.12.报错原因</h3><h4 id="9-12-1-报错原因1"><a href="#9-12-1-报错原因1" class="headerlink" title="9.12.1.报错原因1"></a>9.12.1.报错原因1</h4><ol><li><p>Jar包冲突<br>因为跟hadoop的jar包存在冲突，主要有两个jar包冲突，一个log4j-slf4j-impl-2.10.0.jar跟hadoop冲突，可以删除。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mv $HIVE_HOME/lib/log4j-slf4j-impl-2.10.0.jar $HIVE_HOME/lib/log4j-slf4j-impl-2.10.0.bak</span><br></pre></td></tr></table></figure></li><li><p>另一个是guava-19.0.jar，跟hadoop里面的guava-27.0-jre.jar冲突，故采用高版本替换低版本的方式。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo cp $HADOOP_HOME/share/hadoop/common/lib/guava-27.0-jre.jar $HIVE_HOME/lib</span><br><span class="line"></span><br><span class="line">sudo rm $HIVE_HOME/lib/guava-19.0.jar</span><br></pre></td></tr></table></figure></li></ol><h4 id="9-12-2-报错原因2"><a href="#9-12-2-报错原因2" class="headerlink" title="9.12.2.报错原因2"></a>9.12.2.报错原因2</h4><p>hive-site.xml配置文件中，3278行（见报错记录第二行）有特殊字符。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.RuntimeException: com.ctc.wstx.exc.WstxParsingException: Illegal character entity: expansion character (code 0x8  </span><br><span class="line">at [row,col,system-id]: [3278,96,&quot;file:/export/servers/apache-hive-3.1.2-bin/conf/hive-site.xml&quot;]</span><br></pre></td></tr></table></figure><p>进入hive-site.xml文件，跳转到对应行，删除里面的<code>&amp;#8</code>特殊字符即可。</p><h3 id="9-13-尾巴"><a href="#9-13-尾巴" class="headerlink" title="9.13.尾巴"></a>9.13.尾巴</h3><ul><li><a href="https://www.cnblogs.com/lehoso/p/15596193.html">hive3.1.2_博客园</a></li><li><a href="https://dblab.xmu.edu.cn/blog/2440-2/">Hive3.1.2安装指南_厦大数据库实验室博客</a></li></ul><hr><h2 id="10-Sqoop配置"><a href="#10-Sqoop配置" class="headerlink" title="10.Sqoop配置"></a>10.Sqoop配置</h2><p>Sqoop是一款开源的工具，主要用于在Hadoop(Hive)与传统的数据库(mysql、postgresql…)间进行数据的传递，可以将一个关系型数据库（例如 ： MySQL ,Oracle ,Postgres等）中的数据导进到Hadoop的HDFS中，也可以将HDFS的数据导进到关系型数据库中。Sqoop项目开始于2009年，最早是作为Hadoop的一个第三方模块存在，后来为了让使用者能够快速部署，也为了让开发人员能够更快速的迭代开发，Sqoop独立成为一个Apache项目。</p><h3 id="10-1-下载sqoop1-4-7"><a href="#10-1-下载sqoop1-4-7" class="headerlink" title="10.1.下载sqoop1.4.7"></a>10.1.下载sqoop1.4.7</h3><p><a href="https://archive.apache.org/dist/sqoop/1.4.7/">Index of /dist/sqoop/1.4.7</a></p><h3 id="10-2-解压安装"><a href="#10-2-解压安装" class="headerlink" title="10.2.解压安装"></a>10.2.解压安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">解压安装包hbase-2.2.2-bin.tar.gz至路径 /usr/<span class="built_in">local</span></span></span><br><span class="line">sudo tar -zxvf sqoop-1.4.7.bin__hadoop-2.6.0.tar.gz -C /usr/local</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">将解压后的文件重命名为sqoop</span></span><br><span class="line">sudo mv ./sqoop-1.4.7.bin__hadoop-2.6.0 ./sqoop</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">设置用户权限，-R后的参数表示计算机用户名</span></span><br><span class="line">sudo chown -R 用户名 ./sqoop</span><br></pre></td></tr></table></figure><h3 id="10-3-配置环境变量"><a href="#10-3-配置环境变量" class="headerlink" title="10.3.配置环境变量"></a>10.3.配置环境变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sudo vim ~/.profile</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">添加下面三行到文件并保存</span></span><br><span class="line">export SQOOP_HOME=/usr/local/sqoop </span><br><span class="line">export PATH=$PATH:$SQOOP_HOME/bin</span><br><span class="line">export CLASSPATH=$CLASSPATH:$SQOOP_HOME/lib</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">保存文件并生效</span></span><br><span class="line">source ~/.profile</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看HBase版本，确定hbase安装成功</span></span><br><span class="line">/usr/local/hbase/bin/hbase version</span><br></pre></td></tr></table></figure><h3 id="10-4-修改配置文件sqoop-env-sh"><a href="#10-4-修改配置文件sqoop-env-sh" class="headerlink" title="10.4.修改配置文件sqoop-env.sh"></a>10.4.修改配置文件sqoop-env.sh</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cd /sqoop/conf/</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">将sqoop-env-template.sh复制一份并命名为sqoop-env.sh</span></span><br><span class="line">sudo cat sqoop-env-template.sh  &gt;&gt; sqoop-env.sh  </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">编辑sqoop-env.sh</span></span><br><span class="line">sudo vim sqoop-env.sh </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">添加下面六行到文件并保存</span></span><br><span class="line">export HADOOP_COMMON_HOME=/usr/local/hadoop-3.2.2</span><br><span class="line">export HADOOP_MAPRED_HOME=/usr/local/hadoop-3.2.2</span><br><span class="line">export HBASE_HOME=/usr/local/hbase</span><br><span class="line">export HIVE_HOME=/usr/local/hive</span><br><span class="line">export ZOOKEEPER_HOME=/usr/local/zookeeper</span><br><span class="line">export ZOOCFGDIR=/usr/local/zookeeper/conf</span><br></pre></td></tr></table></figure><h3 id="10-5-验证Sqoop安装"><a href="#10-5-验证Sqoop安装" class="headerlink" title="10.5.验证Sqoop安装"></a>10.5.验证Sqoop安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/sqoop version</span><br></pre></td></tr></table></figure><h3 id="10-6-将mysql驱动包拷贝到-SQOOP-HOME-lib"><a href="#10-6-将mysql驱动包拷贝到-SQOOP-HOME-lib" class="headerlink" title="10.6.将mysql驱动包拷贝到$SQOOP_HOME/lib"></a>10.6.将mysql驱动包拷贝到$SQOOP_HOME/lib</h3><ul><li><a href="https://dev.mysql.com/downloads/connector/j/">MySQL :: Download Connector/J</a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -zxvf mysql-connector-java_8.0.28-1ubuntu20.04_all.deb</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">将mysql-connector-java_8.0.28-bin.jar拷贝到/usr/<span class="built_in">local</span>/sqoop/lib</span></span><br><span class="line">sudo cp mysql-connector-java_8.0.28-bin.jar /usr/local/sqoop/lib</span><br></pre></td></tr></table></figure></li></ul><h3 id="10-7-测试与MySQL的连接"><a href="#10-7-测试与MySQL的连接" class="headerlink" title="10.7.测试与MySQL的连接"></a>10.7.测试与MySQL的连接</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">首先请确保hadoop和mysql服务已经启动</span></span><br><span class="line"><span class="meta">#</span><span class="bash">mysql启动命令，hadoop需切换至hadoop/sbin下执行启动命令</span></span><br><span class="line">service mysql start</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">测试sqoop与MySQL之间的连接是否成功</span></span><br><span class="line">sqoop list-databases --connect jdbc:mysql://127.0.0.1:3306/ --username root -P</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">mysql的数据库列表显示在屏幕上表示连接成功</span></span><br></pre></td></tr></table></figure><h3 id="10-8-报错解决"><a href="#10-8-报错解决" class="headerlink" title="10.8.报错解决"></a>10.8.报错解决</h3><p>错误: 找不到或无法加载主类 org.apache.sqoop.Sqoop</p><p>解决方法：</p><ol><li><p>sqoop-1.4.x.tar.gz在1.4.5以上的安装包已经没有了这个jar包，解压sqoop-1.4.7.bin__hadoop-2.6.0.tar.gz</p></li><li><p>取出sqoop-1.4.7.jar放在/hadoop/share/hadoop/mapreduce/lib下，并且也放到/usr/local/sqoop/lib下。</p></li><li><p>然后重新导入数据</p></li><li><p>如果还解决不了，就在/usr/local/sqoop/bin里找到sqoop脚本，vim sqoop，修改最下面的配置。</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">将</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">exec</span> <span class="variable">$&#123;HADOOP_COMMON_HOME&#125;</span>/bin/hadoop org.apache.sqoop.Sqoop <span class="string">&quot;<span class="variable">$@</span>&quot;</span><span class="built_in">exec</span></span></span><br><span class="line"></span><br><span class="line">改为</span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;HADOOP_COMMON_HOME&#125;/bin/hadoop jar /usr/<span class="built_in">local</span>/sqoop/lib/sqoop-1.4.7.jar org.apache.sqoop.Sqoop <span class="string">&quot;<span class="variable">$@</span>&quot;</span></span></span><br></pre></td></tr></table></figure><hr><h2 id="11-尾巴"><a href="#11-尾巴" class="headerlink" title="11.尾巴"></a>11.尾巴</h2><ul><li><p><a href="https://dblab.xmu.edu.cn/blog/2630-2/">大数据软件安装和基础编程实践指南（2020年6月版）-厦大数据库实验室博客</a></p></li><li><p><a href="https://blog.csdn.net/sa726663676/article/details/113046277">ubuntu20.04.1安装java-hadoop-spark-python-hbase-mysql-kafka及伪分布式配置 -CSDN博客</a></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Deep Learning议员投票记录预测其所属党派（伯努利贝叶斯分类模型）</title>
      <link href="/posts/6393cf4a.html"/>
      <url>/posts/6393cf4a.html</url>
      
        <content type="html"><![CDATA[<h2 id="代码实现如下"><a href="#代码实现如下" class="headerlink" title="代码实现如下"></a>代码实现如下</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> OneHotEncoder</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> BernoulliNB</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score,make_scorer,confusion_matrix</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">X=[[<span class="string">&quot;男&quot;</span>,<span class="string">&quot;红&quot;</span>],[<span class="string">&quot;女&quot;</span>,<span class="string">&quot;绿&quot;</span>],[<span class="string">&quot;女&quot;</span>,<span class="string">&quot;蓝&quot;</span>],[<span class="string">&quot;男&quot;</span>,<span class="string">&quot;绿&quot;</span>],[<span class="string">&quot;女&quot;</span>,<span class="string">&quot;红&quot;</span>]]</span><br><span class="line"></span><br><span class="line">df=pd.DataFrame(X,columns=[<span class="string">&quot;性别&quot;</span>,<span class="string">&quot;颜色&quot;</span>])</span><br><span class="line"></span><br><span class="line">df</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建独热编码器</span></span><br><span class="line"></span><br><span class="line">onehot=OneHotEncoder()</span><br><span class="line"></span><br><span class="line">onehot.fit(df)<span class="comment">#训练独热编码器，得到转换规则</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#转换数据</span></span><br><span class="line"></span><br><span class="line">d=onehot.transform(df).toarray()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">X=[[<span class="string">&quot;男&quot;</span>,<span class="string">&quot;蓝&quot;</span>],[<span class="string">&quot;女&quot;</span>,<span class="string">&quot;红&quot;</span>],[<span class="string">&quot;女&quot;</span>,<span class="string">&quot;红&quot;</span>],[<span class="string">&quot;男&quot;</span>,<span class="string">&quot;蓝&quot;</span>],[<span class="string">&quot;女&quot;</span>,<span class="string">&quot;蓝&quot;</span>]]</span><br><span class="line"></span><br><span class="line">df=pd.DataFrame(X,columns=[<span class="string">&quot;性别&quot;</span>,<span class="string">&quot;颜色&quot;</span>])</span><br><span class="line"></span><br><span class="line">onehot=OneHotEncoder()</span><br><span class="line"></span><br><span class="line">onehot.fit(df[[<span class="string">&quot;性别&quot;</span>]])<span class="comment">#训练独热编码器，得到转换规则</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#转换数据</span></span><br><span class="line"></span><br><span class="line">d=onehot.transform(df[[<span class="string">&quot;性别&quot;</span>]]).toarray()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line"><span class="comment">#数组转数据框</span></span><br><span class="line"></span><br><span class="line">df_sex=pd.DataFrame(d,columns=[<span class="string">&quot;性别x1&quot;</span>,<span class="string">&quot;性别x2&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#把df_sex拼接在df后</span></span><br><span class="line"></span><br><span class="line">df=df.join(df_sex)</span><br><span class="line"></span><br><span class="line">df</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">data=pd.read_csv(<span class="string">&quot;议案投票.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(data.info()) #查看数据信息,可以看出大部分列都有缺失值的情况</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#把所有缺失值填充None</span></span><br><span class="line"></span><br><span class="line">data=data.fillna(<span class="string">&quot;None&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(data.info()) #查看数据信息,可以看出大部分列都有缺失值的情况</span></span><br><span class="line"></span><br><span class="line">x=data.iloc[:,<span class="number">3</span>:]<span class="comment">#从第4列开始获取到最后一列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#features_name=list(x.columns)  #获取特征名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#独热编码处理</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建独热编码对象</span></span><br><span class="line"></span><br><span class="line">onehot=OneHotEncoder()</span><br><span class="line"></span><br><span class="line"><span class="comment">#训练独热编码器，得到转换规则</span></span><br><span class="line"></span><br><span class="line">onehot.fit(x)</span><br><span class="line"></span><br><span class="line"><span class="comment">#转换数据</span></span><br><span class="line"></span><br><span class="line">oneHotData=onehot.transform(x).toarray()</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(oneHotData) #打印转换后的数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#划分特征和类别</span></span><br><span class="line"></span><br><span class="line">x=oneHotData</span><br><span class="line"></span><br><span class="line">y=data[<span class="string">&quot;Party&quot;</span>]   <span class="comment">#党派只有D,R两个党派</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建伯努利贝叶斯分类模型</span></span><br><span class="line"></span><br><span class="line">BNBModel=BernoulliNB()</span><br><span class="line"></span><br><span class="line"><span class="comment">#K折交叉验证，验证模型的准确率</span></span><br><span class="line"></span><br><span class="line">cvs=cross_val_score(</span><br><span class="line"></span><br><span class="line">    BNBModel,x,y,cv=<span class="number">10</span>,scoring=make_scorer(accuracy_score)</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;10次交叉验证的平均准确率：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(cvs.mean()))</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#对数据进行预测，通过混淆矩阵观察总体效果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#训练模型</span></span><br><span class="line"></span><br><span class="line">BNBModel.fit(x,y)</span><br><span class="line"></span><br><span class="line">data[<span class="string">&quot;Predict Party&quot;</span>]=BNBModel.predict(x)</span><br><span class="line"></span><br><span class="line">cm=confusion_matrix(data[<span class="string">&quot;Party&quot;</span>],data[<span class="string">&quot;Predict Party&quot;</span>],labels=[<span class="string">&quot;D&quot;</span>,<span class="string">&quot;R&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#混淆矩阵加轴标签</span></span><br><span class="line"></span><br><span class="line">cm=pd.DataFrame(cm,columns=[<span class="string">&quot;D&quot;</span>,<span class="string">&quot;R&quot;</span>],index=[<span class="string">&quot;D&quot;</span>,<span class="string">&quot;R&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过热力图显示混淆矩阵</span></span><br><span class="line"></span><br><span class="line">sns.heatmap(cm,annot=<span class="literal">True</span>,fmt=<span class="string">&quot;d&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h2><ul><li><p><a href="https://aistudio.baidu.com/aistudio/index">飞桨AI Studio - 人工智能学习实训社区</a></p></li><li><p><a href="https://github.com/GiesenC/DeepLearning">GitHub - GiesenC/DeepLearning: DeepLearning model training, evaluation and prediction related code.</a></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows11卡顿及崩溃问题解决</title>
      <link href="/posts/fbecf928.html"/>
      <url>/posts/fbecf928.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Windows11资源管理器卡顿"><a href="#1-Windows11资源管理器卡顿" class="headerlink" title="1.Windows11资源管理器卡顿"></a>1.Windows11资源管理器卡顿</h2><p>可能由于Windows11咖喱bug导致，只需将资源管理器设置回Windows10模式即可恢复正常。</p><p>参考以下文章</p><ul><li><a href="https://www.cnblogs.com/equals/p/15393608.html">解决 Win11 打开文件夹很慢-资源管理器卡顿</a></li></ul><p>文章提到注册表的内容：保存为<code>xxx.reg</code>，双击运行导入即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Shell Extensions\Blocked]</span><br><span class="line">&quot;&#123;e2bf9676-5f8f-435c-97eb-11607a5bedf7&#125;&quot;=&quot;&quot;</span><br></pre></td></tr></table></figure><h2 id="2-Microsoft-Store崩溃"><a href="#2-Microsoft-Store崩溃" class="headerlink" title="2.Microsoft Store崩溃"></a>2.Microsoft Store崩溃</h2><h3 id="2-1-微软官方论坛恢复办法"><a href="#2-1-微软官方论坛恢复办法" class="headerlink" title="2.1.微软官方论坛恢复办法"></a>2.1.微软官方论坛恢复办法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">您可以尝试以下方案进行操作，看看是否有效：</span><br><span class="line"> </span><br><span class="line">设置&gt;&gt;应用&gt;&gt;应用和功能&gt;&gt;找到应用商店&gt;&gt;高级选项&gt;&gt;重置。</span><br><span class="line"> </span><br><span class="line">另外，您还可以尝试清理应用商店的缓存，看看是否可以恢复正常：</span><br><span class="line"> </span><br><span class="line">按“Win+R”键，在运行窗口中，键入 WSReset.exe并点击“ 运行 ”。</span><br><span class="line"> </span><br><span class="line">如果问题依旧，建议您尝试以下方案重新部署您的应用商店：</span><br><span class="line"> </span><br><span class="line">在打开的“管理员：Windows Powershell”窗口中输入以下命令：</span><br><span class="line"> </span><br><span class="line">get-appxpackage *store* | remove-Appxpackage</span><br><span class="line"> </span><br><span class="line">再次安装：</span><br><span class="line"> </span><br><span class="line">add-appxpackage -register &quot;C:\Program Files\WindowsApps\*Store*\AppxManifest.xml&quot; -disabledevelopmentmode</span><br></pre></td></tr></table></figure><h3 id="2-2-升级系统"><a href="#2-2-升级系统" class="headerlink" title="2.2.升级系统"></a>2.2.升级系统</h3><p>若在Windows10遭遇Microsoft Store崩溃，可在设置&gt;&gt;Windows更新中将Windows10升级为Windows11，Microsoft Store便可恢复。</p><h3 id="2-3-通过Xbox"><a href="#2-3-通过Xbox" class="headerlink" title="2.3.通过Xbox"></a>2.3.通过Xbox</h3><p>Xbox会在加载的过程中，提示此电脑上缺少此应用程序需要的一些内容，在“设置”中修复他们。</p><p><img src="https://s2.loli.net/2022/03/24/qtSbzQvyjU9xsTK.jpg"></p><p>剩下的就是按照提示的内容，把需要安装的部分都安装上即可恢复Microsoft Store。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>World Peace</title>
      <link href="/posts/355cd18f.html"/>
      <url>/posts/355cd18f.html</url>
      
        <content type="html"><![CDATA[<p>Если вы действительно заботитесь о войне, вы будете сочувствовать тем, кто пострадал от бедствий. Я не буду шутить, пересылать скучные сообщения и говорить ничего высокомерного. Если вас совсем не волнует война, вас не волнует смысл этих слов. Давайте помолимся за мир во всем мире.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Deep Learning高中生数据预测是否计划升学（决策树）</title>
      <link href="/posts/4464a0a2.html"/>
      <url>/posts/4464a0a2.html</url>
      
        <content type="html"><![CDATA[<h2 id="代码实现如下"><a href="#代码实现如下" class="headerlink" title="代码实现如下"></a>代码实现如下</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> OneHotEncoder</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入数据</span></span><br><span class="line"></span><br><span class="line">data=pd.read_csv(<span class="string">&quot;决策树.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#需要进行独热编码的列</span></span><br><span class="line"></span><br><span class="line">oneHotColumns=[<span class="string">&quot;性别&quot;</span>,<span class="string">&quot;父母鼓励&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建独热编码对象</span></span><br><span class="line"></span><br><span class="line">oneHotEncoder=OneHotEncoder()</span><br><span class="line"></span><br><span class="line"><span class="comment">#训练热度编码器</span></span><br><span class="line"></span><br><span class="line">oneHotEncoder.fit(data[oneHotColumns])</span><br><span class="line"></span><br><span class="line"><span class="comment">#转换数据为独热编码，二维数组</span></span><br><span class="line"></span><br><span class="line">oneHotData=oneHotEncoder.transform(data[oneHotColumns]).toarray()</span><br><span class="line"></span><br><span class="line">oneHotData</span><br><span class="line"></span><br><span class="line"><span class="comment">#把二维数组转DataFrame，oneHotEncoder.get_feature_names()获取独热编码器训练数据后所产生的列名</span></span><br><span class="line"></span><br><span class="line">df_onehotData=pd.DataFrame(oneHotData,columns=oneHotEncoder.get_feature_names())</span><br><span class="line"></span><br><span class="line">df_onehotData</span><br><span class="line"></span><br><span class="line"><span class="comment">#把独热编码DataFrame与&quot;父母收入&quot;,&quot;IQ&quot;的Dataframe拼接</span></span><br><span class="line"></span><br><span class="line">x=df_onehotData.join(data[[<span class="string">&quot;父母收入&quot;</span>,<span class="string">&quot;IQ&quot;</span>]])</span><br><span class="line"></span><br><span class="line">y=data[<span class="string">&quot;升学计划&quot;</span>]</span><br><span class="line"></span><br><span class="line">x</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x.info())</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#网络搜索，寻找最优参数</span></span><br><span class="line"></span><br><span class="line">paramGrid=<span class="built_in">dict</span>(</span><br><span class="line"></span><br><span class="line">    max_depth=<span class="built_in">range</span>(<span class="number">4</span>,<span class="number">20</span>),   <span class="comment">#0-19</span></span><br><span class="line"></span><br><span class="line">    max_leaf_nodes=<span class="built_in">range</span>(<span class="number">4</span>,<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">dtModel=DecisionTreeClassifier()</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建网络搜索对象，设置参数</span></span><br><span class="line"></span><br><span class="line">grid=GridSearchCV(</span><br><span class="line"></span><br><span class="line">    dtModel,param_grid=paramGrid,</span><br><span class="line"></span><br><span class="line">    cv=<span class="number">10</span>,return_train_score=<span class="literal">True</span>,</span><br><span class="line"></span><br><span class="line">    n_jobs=<span class="number">10</span></span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">#开始训练</span></span><br><span class="line"></span><br><span class="line">grid=grid.fit(x,y)</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印最优准确率</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(grid.best_score_)</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印最优的超参数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(grid.best_params_)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建决策树的深度为3，最大叶子节点数为7</span></span><br><span class="line"></span><br><span class="line">dtModel=DecisionTreeClassifier(</span><br><span class="line"></span><br><span class="line">    criterion=<span class="string">&quot;entropy&quot;</span>,</span><br><span class="line"></span><br><span class="line">    max_depth=<span class="number">6</span>,</span><br><span class="line"></span><br><span class="line">    max_leaf_nodes=<span class="number">14</span></span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">cvs=cross_val_score(dtModel,x,y,cv=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">cvs.mean()</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装pydot_ng</span></span><br><span class="line"></span><br><span class="line">!pip install pydot_ng</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pydot_ng <span class="keyword">as</span> pydot</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.externals.six <span class="keyword">import</span> StringIO</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> export_graphviz</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#训练模型</span></span><br><span class="line"></span><br><span class="line">dtModel.fit(x,y)</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建StringIO,准备把dot写入StringIO</span></span><br><span class="line"></span><br><span class="line">dot_data=StringIO()</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取x列名</span></span><br><span class="line"></span><br><span class="line">f=<span class="built_in">list</span>(x.columns)</span><br><span class="line"></span><br><span class="line"><span class="comment">#把决策树转为dot文件写入StringIO</span></span><br><span class="line"></span><br><span class="line">export_graphviz(</span><br><span class="line"></span><br><span class="line">    dtModel,</span><br><span class="line"></span><br><span class="line">    out_file=dot_data,</span><br><span class="line"></span><br><span class="line">    class_names=[<span class="string">&quot;不计划&quot;</span>,<span class="string">&quot;计划&quot;</span>],</span><br><span class="line"></span><br><span class="line">    feature_names=f,</span><br><span class="line"></span><br><span class="line">    filled=<span class="literal">True</span>,rounded=<span class="literal">True</span>,special_characters=<span class="literal">True</span></span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">#把dot转png</span></span><br><span class="line"></span><br><span class="line">graph=pydot.graph_from_dot_data(</span><br><span class="line"></span><br><span class="line">    dot_data.getvalue()</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">graph.write_png(</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;opt.png&quot;</span></span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">px=pd.DataFrame(&#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;性别&quot;</span>:[<span class="string">&quot;男&quot;</span>],</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;父母收入&quot;</span>:[<span class="number">40000</span>],</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;IQ&quot;</span>:[<span class="number">120</span>],</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;父母鼓励&quot;</span>:[<span class="string">&quot;鼓励&quot;</span>],</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;升学计划&quot;</span>:[<span class="string">&quot;不计划&quot;</span>]</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用上面训练好的独热编码器，对性别、父母鼓励进行独热编码</span></span><br><span class="line"></span><br><span class="line">px_oneHotData=oneHotEncoder.transform(px[[<span class="string">&quot;性别&quot;</span>,<span class="string">&quot;父母鼓励&quot;</span>]]).toarray()</span><br><span class="line"></span><br><span class="line">px_oneHotData</span><br><span class="line"></span><br><span class="line"><span class="comment">#把独热编码后的数组转为DataFrame</span></span><br><span class="line"></span><br><span class="line">df_px_oneHotData=pd.DataFrame(px_oneHotData,columns=oneHotEncoder.get_feature_names())</span><br><span class="line"></span><br><span class="line">df_px_oneHotData</span><br><span class="line"></span><br><span class="line"><span class="comment">#加入&quot;父母收入&quot;,&quot;IQ&quot;</span></span><br><span class="line"></span><br><span class="line">px=px[[<span class="string">&quot;父母收入&quot;</span>,<span class="string">&quot;IQ&quot;</span>]].join(df_px_oneHotData)</span><br><span class="line"></span><br><span class="line">px</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用训练好的决策树模型进行预测</span></span><br><span class="line"></span><br><span class="line">r=dtModel.predict(px)</span><br><span class="line"></span><br><span class="line">r</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h2><ul><li><p><a href="https://aistudio.baidu.com/aistudio/index">飞桨AI Studio - 人工智能学习实训社区</a></p></li><li><p><a href="https://github.com/GiesenC/DeepLearning">GitHub - GiesenC/DeepLearning: DeepLearning model training, evaluation and prediction related code.</a></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL命令汇总</title>
      <link href="/posts/3db3b806.html"/>
      <url>/posts/3db3b806.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>数据库名=demo；表名=user；字符集=utf8；</p></blockquote><h3 id="1-操作数据库"><a href="#1-操作数据库" class="headerlink" title="1.操作数据库"></a>1.操作数据库</h3><h4 id="1-1-数据库连接"><a href="#1-1-数据库连接" class="headerlink" title="1.1.数据库连接"></a>1.1.数据库连接</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>u 用户名 <span class="operator">-</span>p 用户密码</span><br><span class="line"></span><br><span class="line">#mysql <span class="operator">-</span>u root <span class="operator">-</span>p</span><br></pre></td></tr></table></figure><h4 id="1-2-创建数据库"><a href="#1-2-创建数据库" class="headerlink" title="1.2.创建数据库"></a>1.2.创建数据库</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database demo;</span><br></pre></td></tr></table></figure><h4 id="1-3-判断是否存在并创建"><a href="#1-3-判断是否存在并创建" class="headerlink" title="1.3.判断是否存在并创建"></a>1.3.判断是否存在并创建</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">exists</span> demo;</span><br></pre></td></tr></table></figure><h4 id="1-4-指定字符集创建"><a href="#1-4-指定字符集创建" class="headerlink" title="1.4.指定字符集创建"></a>1.4.指定字符集创建</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database demo <span class="type">character</span> <span class="keyword">set</span> utf8;</span><br></pre></td></tr></table></figure><h4 id="1-5-查看所有数据库"><a href="#1-5-查看所有数据库" class="headerlink" title="1.5.查看所有数据库"></a>1.5.查看所有数据库</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br></pre></td></tr></table></figure><h4 id="1-6-查看某个数据库定义信息"><a href="#1-6-查看某个数据库定义信息" class="headerlink" title="1.6.查看某个数据库定义信息"></a>1.6.查看某个数据库定义信息</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> database demo;</span><br></pre></td></tr></table></figure><h4 id="1-7-修改数据库字符集"><a href="#1-7-修改数据库字符集" class="headerlink" title="1.7.修改数据库字符集"></a>1.7.修改数据库字符集</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> database demo <span class="keyword">default</span> <span class="type">character</span> <span class="keyword">set</span> utf8;</span><br></pre></td></tr></table></figure><h4 id="1-8-删除数据库"><a href="#1-8-删除数据库" class="headerlink" title="1.8.删除数据库"></a>1.8.删除数据库</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> database demo;</span><br></pre></td></tr></table></figure><h4 id="1-9-查看正在使用的数据库"><a href="#1-9-查看正在使用的数据库" class="headerlink" title="1.9.查看正在使用的数据库"></a>1.9.查看正在使用的数据库</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> database();</span><br></pre></td></tr></table></figure><h4 id="1-10-使用数据库"><a href="#1-10-使用数据库" class="headerlink" title="1.10.使用数据库"></a>1.10.使用数据库</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use demo;</span><br></pre></td></tr></table></figure><hr><h3 id="2-操作表和列"><a href="#2-操作表和列" class="headerlink" title="2.操作表和列"></a>2.操作表和列</h3><h4 id="2-1-创建表"><a href="#2-1-创建表" class="headerlink" title="2.1.创建表"></a>2.1.创建表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> (  </span><br><span class="line">id <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,  </span><br><span class="line">name <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> comment ‘用户名’,  </span><br><span class="line">age <span class="type">int</span>(<span class="number">3</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> comment ‘年龄’,  </span><br><span class="line">createtime <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span> comment ‘创建时间’,  </span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (id)  </span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/18/7IeTZKaJq4RNsUx.png"></p><h4 id="2-2-查看该数据库中所有表"><a href="#2-2-查看该数据库中所有表" class="headerlink" title="2.2.查看该数据库中所有表"></a>2.2.查看该数据库中所有表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> tables;</span><br></pre></td></tr></table></figure><h4 id="2-3-查看表结构"><a href="#2-3-查看表结构" class="headerlink" title="2.3.查看表结构"></a>2.3.查看表结构</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">desc</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><h4 id="2-4-查看建表语句"><a href="#2-4-查看建表语句" class="headerlink" title="2.4.查看建表语句"></a>2.4.查看建表语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><h4 id="2-5-快速创建表结构相同的表"><a href="#2-5-快速创建表结构相同的表" class="headerlink" title="2.5.快速创建表结构相同的表"></a>2.5.快速创建表结构相同的表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> new_user <span class="keyword">like</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><h4 id="2-6-删除表"><a href="#2-6-删除表" class="headerlink" title="2.6.删除表"></a>2.6.删除表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><h4 id="2-7-判断存在再删除"><a href="#2-7-判断存在再删除" class="headerlink" title="2.7.判断存在再删除"></a>2.7.判断存在再删除</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><h4 id="2-8-添加表列"><a href="#2-8-添加表列" class="headerlink" title="2.8.添加表列"></a>2.8.添加表列</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 列名 类型;</span><br><span class="line">#<span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">add</span> remark <span class="type">varchar</span>(<span class="number">20</span>);</span><br></pre></td></tr></table></figure><h4 id="2-9-修改列类型"><a href="#2-9-修改列类型" class="headerlink" title="2.9.修改列类型"></a>2.9.修改列类型</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> modify remark <span class="type">varchar</span>(<span class="number">20</span>);</span><br></pre></td></tr></table></figure><h4 id="2-10-修改列名"><a href="#2-10-修改列名" class="headerlink" title="2.10.修改列名"></a>2.10.修改列名</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 change 旧列名 新列名 类型;</span><br><span class="line">#<span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> change remark new_remark <span class="type">varchar</span>(<span class="number">20</span>);</span><br></pre></td></tr></table></figure><h4 id="2-11-删除列"><a href="#2-11-删除列" class="headerlink" title="2.11.删除列"></a>2.11.删除列</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">drop</span> remark;</span><br></pre></td></tr></table></figure><h4 id="2-12-修改表名"><a href="#2-12-修改表名" class="headerlink" title="2.12.修改表名"></a>2.12.修改表名</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rename <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">to</span> new_user;</span><br></pre></td></tr></table></figure><h4 id="2-13-修改字符集"><a href="#2-13-修改字符集" class="headerlink" title="2.13.修改字符集"></a>2.13.修改字符集</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="type">character</span> <span class="keyword">set</span> utf8;</span><br></pre></td></tr></table></figure><hr><h3 id="3-插入操作"><a href="#3-插入操作" class="headerlink" title="3.插入操作"></a>3.插入操作</h3><h4 id="3-1-插入全部字段"><a href="#3-1-插入全部字段" class="headerlink" title="3.1.插入全部字段"></a>3.1.插入全部字段</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(key1, key2, key3…) <span class="keyword">values</span>(val1, val2, val3);  </span><br><span class="line">#<span class="keyword">or</span></span><br><span class="line">#<span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span>(val1, val2, val3);</span><br></pre></td></tr></table></figure><h4 id="3-2-插入部分字段"><a href="#3-2-插入部分字段" class="headerlink" title="3.2.插入部分字段"></a>3.2.插入部分字段</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>( key2, key3…) <span class="keyword">values</span>(val2, val3);</span><br></pre></td></tr></table></figure><hr><h3 id="4-蠕虫复制"><a href="#4-蠕虫复制" class="headerlink" title="4.蠕虫复制"></a>4.蠕虫复制</h3><p>蠕虫复制：<strong>在已有的数据基础上，将原来的数据进行复制，插入到新表中</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> new_user <span class="keyword">like</span> <span class="keyword">user</span>;  </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> new_user <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><hr><h3 id="5-修改操作"><a href="#5-修改操作" class="headerlink" title="5.修改操作"></a>5.修改操作</h3><h4 id="5-1-不带条件修改"><a href="#5-1-不带条件修改" class="headerlink" title="5.1.不带条件修改"></a>5.1.不带条件修改</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update <span class="keyword">user</span> <span class="keyword">set</span> age <span class="operator">=</span> <span class="number">18</span>;</span><br></pre></td></tr></table></figure><h4 id="5-2-带条件修改"><a href="#5-2-带条件修改" class="headerlink" title="5.2.带条件修改"></a>5.2.带条件修改</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update <span class="keyword">user</span> <span class="keyword">set</span> age <span class="operator">=</span> <span class="number">18</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><hr><h3 id="6-删除操作"><a href="#6-删除操作" class="headerlink" title="6.删除操作"></a>6.删除操作</h3><h4 id="6-1-不带条件删除"><a href="#6-1-不带条件删除" class="headerlink" title="6.1.不带条件删除"></a>6.1.不带条件删除</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><h4 id="6-2-带条件删除"><a href="#6-2-带条件删除" class="headerlink" title="6.2.带条件删除"></a>6.2.带条件删除</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> age <span class="operator">=</span> <span class="number">18</span>;</span><br></pre></td></tr></table></figure><hr><h4 id="6-3-删除表记录"><a href="#6-3-删除表记录" class="headerlink" title="6.3.删除表记录"></a>6.3.删除表记录</h4><p>truncate将表删除后，创建一张与原来表结构相同的新表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><hr><h3 id="7-简单查询"><a href="#7-简单查询" class="headerlink" title="7.简单查询"></a>7.简单查询</h3><h4 id="7-1-查询所有列"><a href="#7-1-查询所有列" class="headerlink" title="7.1.查询所有列"></a>7.1.查询所有列</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><h4 id="7-2-查询指定列"><a href="#7-2-查询指定列" class="headerlink" title="7.2.查询指定列"></a>7.2.查询指定列</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id, age <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><h4 id="7-3-去除列重复值"><a href="#7-3-去除列重复值" class="headerlink" title="7.3.去除列重复值"></a>7.3.去除列重复值</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> age <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><hr><h3 id="8-条件查询"><a href="#8-条件查询" class="headerlink" title="8.条件查询"></a>8.条件查询</h3><h4 id="8-1-大于"><a href="#8-1-大于" class="headerlink" title="8.1.大于"></a>8.1.大于</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id <span class="operator">&gt;</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h4 id="8-2-小于"><a href="#8-2-小于" class="headerlink" title="8.2.小于"></a>8.2.小于</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id <span class="operator">&lt;</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h4 id="8-3-等于"><a href="#8-3-等于" class="headerlink" title="8.3.等于"></a>8.3.等于</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h4 id="8-4-不等于"><a href="#8-4-不等于" class="headerlink" title="8.4.不等于"></a>8.4.不等于</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id <span class="operator">&lt;&gt;</span> <span class="number">10</span>;  </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id <span class="operator">!=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h4 id="8-5-逻辑运算"><a href="#8-5-逻辑运算" class="headerlink" title="8.5.逻辑运算"></a>8.5.逻辑运算</h4><table><thead><tr><th align="center">运算符</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">NOT 或 !</td><td align="center">逻辑非</td></tr><tr><td align="center">AND 或 &amp;&amp;</td><td align="center">逻辑与</td></tr><tr><td align="center">OR 或 ||</td><td align="center">逻辑或</td></tr><tr><td align="center">XOR</td><td align="center">逻辑异或</td></tr></tbody></table><ul><li><a href="https://www.cnblogs.com/xuchunlin/p/6235373.html">Mysql 逻辑运算符详解 - 博客园</a></li></ul><h4 id="8-6-范围查询"><a href="#8-6-范围查询" class="headerlink" title="8.6.范围查询"></a>8.6.范围查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">between</span> <span class="number">1</span> <span class="keyword">and</span> <span class="number">18</span>;</span><br></pre></td></tr></table></figure><h4 id="8-7-模糊查询"><a href="#8-7-模糊查询" class="headerlink" title="8.7.模糊查询"></a>8.7.模糊查询</h4><ol><li><code>%</code>：表示任意字符</li><li><code>_</code>：表示一个字符</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> name <span class="keyword">like</span> ‘<span class="operator">%</span>Bosen<span class="operator">%</span>’;</span><br></pre></td></tr></table></figure><h4 id="8-8-结果排序"><a href="#8-8-结果排序" class="headerlink" title="8.8.结果排序"></a>8.8.结果排序</h4><ol><li><code>asc</code>：升序（默认）</li><li><code>desc</code>：降序</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">order</span> <span class="keyword">by</span> id <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><h4 id="8-9-聚合函数"><a href="#8-9-聚合函数" class="headerlink" title="8.9.聚合函数"></a>8.9.聚合函数</h4><h5 id="8-9-1-count"><a href="#8-9-1-count" class="headerlink" title="8.9.1.count"></a>8.9.1.count</h5><p>记录为 NULL 的不统计</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(age) <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id <span class="operator">&gt;</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h5 id="8-9-2-sum"><a href="#8-9-2-sum" class="headerlink" title="8.9.2.sum"></a>8.9.2.sum</h5><p>指定列不是数值类型，返回结果为0</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(age) <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id <span class="operator">&gt;</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h5 id="8-9-3-max"><a href="#8-9-3-max" class="headerlink" title="8.9.3.max"></a>8.9.3.max</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(age) <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id <span class="operator">&gt;</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h5 id="8-9-4-min"><a href="#8-9-4-min" class="headerlink" title="8.9.4.min"></a>8.9.4.min</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(age) <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id <span class="operator">&gt;</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h5 id="8-9-5-avg"><a href="#8-9-5-avg" class="headerlink" title="8.9.5.avg"></a>8.9.5.avg</h5><p>指定列不是数值类型，返回结果为0</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(age) <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id <span class="operator">&gt;</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h4 id="8-10-分组查询"><a href="#8-10-分组查询" class="headerlink" title="8.10.分组查询"></a>8.10.分组查询</h4><p>通常与聚合函数配合使用，如下查询男性和女性的年龄总和</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sex, <span class="built_in">sum</span>(age) <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">group</span> <span class="keyword">by</span> sex;</span><br></pre></td></tr></table></figure><h4 id="8-11-分页查询"><a href="#8-11-分页查询" class="headerlink" title="8.11.分页查询"></a>8.11.分页查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#跳过<span class="number">10</span>条数据，显示往后的<span class="number">10</span>条记录  </span><br><span class="line">#即显示<span class="number">11</span><span class="operator">~</span><span class="number">20</span>的数据  </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> limit <span class="number">10</span>, <span class="number">10</span>;</span><br></pre></td></tr></table></figure><hr><h3 id="9-数据库约束"><a href="#9-数据库约束" class="headerlink" title="9.数据库约束"></a>9.数据库约束</h3><h4 id="9-1-主键约束"><a href="#9-1-主键约束" class="headerlink" title="9.1.主键约束"></a>9.1.主键约束</h4><h5 id="9-1-1-创建主键"><a href="#9-1-1-创建主键" class="headerlink" title="9.1.1.创建主键"></a>9.1.1.创建主键</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">add</span> <span class="keyword">primary</span> key;</span><br></pre></td></tr></table></figure><h5 id="9-1-2-删除主键"><a href="#9-1-2-删除主键" class="headerlink" title="9.1.2.删除主键"></a>9.1.2.删除主键</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">drop</span> <span class="keyword">primary</span> key;</span><br></pre></td></tr></table></figure><h5 id="9-1-3-主键自增"><a href="#9-1-3-主键自增" class="headerlink" title="9.1.3.主键自增"></a>9.1.3.主键自增</h5><p>**<code>auto_increment</code>  **</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#主键约束设置自增  </span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> modify id <span class="type">int</span> auto_increment; </span><br><span class="line"></span><br><span class="line">#修改自增起始值  </span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> auto_increment<span class="operator">=</span> <span class="number">100</span>;</span><br></pre></td></tr></table></figure><h4 id="9-2-唯一约束"><a href="#9-2-唯一约束" class="headerlink" title="9.2.唯一约束"></a>9.2.唯一约束</h4><h5 id="9-2-1-创建唯一约束"><a href="#9-2-1-创建唯一约束" class="headerlink" title="9.2.1.创建唯一约束"></a>9.2.1.创建唯一约束</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">add</span> <span class="keyword">unique</span>(`username`);</span><br></pre></td></tr></table></figure><h5 id="9-2-2-删除唯一约束"><a href="#9-2-2-删除唯一约束" class="headerlink" title="9.2.2.删除唯一约束"></a>9.2.2.删除唯一约束</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">drop</span> <span class="keyword">constraint</span> username;</span><br></pre></td></tr></table></figure><h4 id="9-3-非空约束"><a href="#9-3-非空约束" class="headerlink" title="9.3.非空约束"></a>9.3.非空约束</h4><h5 id="9-3-1-创建非空约束"><a href="#9-3-1-创建非空约束" class="headerlink" title="9.3.1.创建非空约束"></a>9.3.1.创建非空约束</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> modify age <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure><h5 id="9-3-2-删除非空约束"><a href="#9-3-2-删除非空约束" class="headerlink" title="9.3.2.删除非空约束"></a>9.3.2.删除非空约束</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> modify age <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">null</span></span><br></pre></td></tr></table></figure><hr><h3 id="10-连接查询"><a href="#10-连接查询" class="headerlink" title="10.连接查询"></a>10.连接查询</h3><h4 id="10-1-内连接查询"><a href="#10-1-内连接查询" class="headerlink" title="10.1.内连接查询"></a>10.1.内连接查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user1 <span class="keyword">inner</span> <span class="keyword">join</span> user2 <span class="keyword">on</span> user1.id <span class="operator">=</span> user2.id;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/18/YBxFn1vGhRbezCP.png"></p><h4 id="10-2-左连接查询"><a href="#10-2-左连接查询" class="headerlink" title="10.2.左连接查询"></a>10.2.左连接查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user1 <span class="keyword">left</span> <span class="keyword">join</span> user2 <span class="keyword">on</span> user1.id <span class="operator">=</span> user2.id;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/18/TdxjgNKCJ2p46Wn.png"></p><h4 id="10-3-右连接查询"><a href="#10-3-右连接查询" class="headerlink" title="10.3.右连接查询"></a>10.3.右连接查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user1 <span class="keyword">right</span> <span class="keyword">join</span> user2 <span class="keyword">on</span> user1.id <span class="operator">=</span> user2.id;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/18/mIMP9yXH5FbuwiC.png"></p><h4 id="10-4-全连接"><a href="#10-4-全连接" class="headerlink" title="10.4.全连接"></a>10.4.全连接</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">select</span> colum1,colum2…<span class="keyword">columN</span> <span class="keyword">from</span> user1) <span class="keyword">union</span> (<span class="keyword">select</span> colum1,colum2…<span class="keyword">columN</span> <span class="keyword">from</span> user2)</span><br></pre></td></tr></table></figure><h4 id="10-5-子查询"><a href="#10-5-子查询" class="headerlink" title="10.5.子查询"></a>10.5.子查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user1 <span class="keyword">join</span> user2;</span><br></pre></td></tr></table></figure><hr><h3 id="11-修改数据库密码"><a href="#11-修改数据库密码" class="headerlink" title="11.修改数据库密码"></a>11.修改数据库密码</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin <span class="operator">-</span>u root <span class="operator">-</span>p password <span class="number">654321</span></span><br><span class="line">#回车后输入原密码确认身份</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/18/sra7AS8yohbnDFq.png"></p><h3 id="12-尾巴"><a href="#12-尾巴" class="headerlink" title="12.尾巴"></a>12.尾巴</h3><ul><li><p><a href="https://www.runoob.com/mysql/mysql-tutorial.html">MySQL 教程 | 菜鸟教程</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/UJJYMd2a5pqJTAWy9MjaYQ">聊聊 sql 优化的 15 个小技巧</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/5LSc5kXMqwb2koE9-SkZKA">MySQL 中，21 个写 SQL 的好习惯</a></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Deep Learning美食评分</title>
      <link href="/posts/3b10e4ba.html"/>
      <url>/posts/3b10e4ba.html</url>
      
        <content type="html"><![CDATA[<h2 id="代码实现如下"><a href="#代码实现如下" class="headerlink" title="代码实现如下"></a>代码实现如下</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#解压图像文件,用Linux命令</span></span><br><span class="line"></span><br><span class="line">!unzip data_foodscore.<span class="built_in">zip</span> -d data/datafood</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> paddle</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> paddle.io <span class="keyword">import</span> Dataset</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="comment">#自定义数据集</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FoodDataset</span>(<span class="params">Dataset</span>):</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">#初始化数据集</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,train=<span class="literal">True</span>,transforms=<span class="literal">None</span></span>):</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">#调用基类构造函数</span></span><br><span class="line"></span><br><span class="line"> <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line"> <span class="comment">#传入数据预处理</span></span><br><span class="line"></span><br><span class="line"> self.transforms=transforms</span><br><span class="line"></span><br><span class="line"> <span class="comment">#导入csv</span></span><br><span class="line"></span><br><span class="line"> df_foodscore=pd.read_csv(<span class="string">&quot;data/datafood/FoodScore.csv&quot;</span>) <span class="comment">#dataframe类型数据</span></span><br><span class="line"></span><br><span class="line"> offset=<span class="built_in">int</span>(<span class="built_in">len</span>(df_foodscore)*<span class="number">0.7</span>)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> train==<span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line"> df_foodscore=df_foodscore[:offset]</span><br><span class="line"></span><br><span class="line"> <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line"> df_foodscore=df_foodscore[offset:]</span><br><span class="line"></span><br><span class="line"> self.score=np.array(df_foodscore[<span class="string">&quot;score&quot;</span>]).astype(<span class="string">&quot;float32&quot;</span>) <span class="comment">#把dataframe转化numpy.array   标签数据集</span></span><br><span class="line"></span><br><span class="line"> picname=df_foodscore[<span class="string">&quot;ID&quot;</span>]</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"> self.data=[] <span class="comment">#图像数据集</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> name <span class="keyword">in</span> picname:</span><br><span class="line"></span><br><span class="line"> filepath=<span class="string">&quot;data/datafood/data_foodscore/&#123;&#125;.jpg&quot;</span>.<span class="built_in">format</span>(name)</span><br><span class="line"></span><br><span class="line"> photo=Image.<span class="built_in">open</span>(filepath)</span><br><span class="line"></span><br><span class="line"> matrix=np.array(photo).astype(<span class="string">&quot;float32&quot;</span>)</span><br><span class="line"></span><br><span class="line"> self.data.append(matrix)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"> <span class="comment">#获取单个数据</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span>(<span class="params">self,index</span>):</span></span><br><span class="line"></span><br><span class="line"> data=self.data[index]</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> self.transforms!=<span class="literal">None</span>:</span><br><span class="line"></span><br><span class="line"> data=self.transforms(data) <span class="comment">#把数据预处理应用到每个图像</span></span><br><span class="line"></span><br><span class="line"> label=self.score[index]</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> data,label</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"> <span class="comment">#回去数据集长度</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">__len__</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">len</span>(self.score)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#数据预处理，图像统一尺寸、归一化、张量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> paddle.vision.transforms <span class="keyword">as</span> T</span><br><span class="line"></span><br><span class="line"><span class="comment">#数据预处理组合</span></span><br><span class="line"></span><br><span class="line">trans=T.Compose([T.Resize([<span class="number">128</span>,<span class="number">128</span>]),T.Normalize(mean=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],std=[<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>],data_format=<span class="string">&quot;HWC&quot;</span>),T.ToTensor()])</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建数据集对象</span></span><br><span class="line"></span><br><span class="line">train_dataset=FoodDataset(train=<span class="literal">True</span>,transforms=trans)</span><br><span class="line"></span><br><span class="line">eval_dataset=FoodDataset(train=<span class="literal">False</span>,transforms=trans)</span><br><span class="line"></span><br><span class="line"><span class="comment">#数据加载，分批</span></span><br><span class="line"></span><br><span class="line">train_loader=paddle.io.DataLoader(dataset=train_dataset,batch_size=<span class="number">20</span>,shuffle=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">eval_loader=paddle.io.DataLoader(dataset=eval_dataset,batch_size=<span class="number">20</span>,shuffle=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#组建网络</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FoodNet</span>(<span class="params">paddle.nn.Layer</span>):</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">#初始化每层结构对象</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line"> <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line"> self.flatten=paddle.nn.Flatten()</span><br><span class="line"></span><br><span class="line"> self.linear=paddle.nn.Linear(<span class="number">128</span>*<span class="number">128</span>*<span class="number">3</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"> <span class="comment">#前向传播</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self,x</span>):</span></span><br><span class="line"></span><br><span class="line"> y=self.flatten(x)</span><br><span class="line"></span><br><span class="line"> y=self.linear(y)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment">#实例化网络</span></span><br><span class="line"></span><br><span class="line">foodNet=FoodNet()</span><br><span class="line"></span><br><span class="line">paddle.summary(foodNet,(<span class="number">10</span>,<span class="number">3</span>,<span class="number">128</span>,<span class="number">128</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用高层API</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#封装模型对象</span></span><br><span class="line"></span><br><span class="line">model=paddle.Model(foodNet)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment">#配置训练</span></span><br><span class="line"></span><br><span class="line">model.prepare(optimizer=paddle.optimizer.Adam(parameters=model.parameters(),learning_rate=<span class="number">0.001</span>),</span><br><span class="line"></span><br><span class="line"> loss=paddle.nn.MSELoss())</span><br><span class="line"></span><br><span class="line"><span class="comment">#训练模型</span></span><br><span class="line"></span><br><span class="line">model.fit(train_data=train_loader,batch_size=<span class="number">20</span>,verbose=<span class="number">1</span>,epochs=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#保存模型</span></span><br><span class="line"></span><br><span class="line">model.save(<span class="string">&quot;mymodel/FoodNet&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建模型对象</span></span><br><span class="line"></span><br><span class="line">foodNet=FoodNet()</span><br><span class="line"></span><br><span class="line">model=paddle.Model(foodNet) <span class="comment">#调用高层API对模型对象封装</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#加载模型参数</span></span><br><span class="line"></span><br><span class="line">model.load(<span class="string">&quot;mymodel/FoodNet&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#加载图片</span></span><br><span class="line"></span><br><span class="line">photo=Image.<span class="built_in">open</span>(<span class="string">&quot;myfood/1.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#把图像显示出来</span></span><br><span class="line"></span><br><span class="line">plt.imshow(photo)</span><br><span class="line"></span><br><span class="line"><span class="comment">#把图片数字化</span></span><br><span class="line"></span><br><span class="line">im=np.array(photo).astype(<span class="string">&quot;float32&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#把新的图像数据进行预处理</span></span><br><span class="line"></span><br><span class="line">im=trans(im)</span><br><span class="line"></span><br><span class="line">im=im.reshape([<span class="number">1</span>,<span class="number">3</span>,<span class="number">128</span>,<span class="number">128</span>])</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment">#进行预测</span></span><br><span class="line"></span><br><span class="line">result=model.predict_batch(im)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;分数：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(result[<span class="number">0</span>]))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h2><ul><li><p><a href="https://aistudio.baidu.com/aistudio/index">飞桨AI Studio - 人工智能学习实训社区</a></p></li><li><p><a href="https://github.com/GiesenC/DeepLearning">GitHub - GiesenC/DeepLearning: DeepLearning model training, evaluation and prediction related code.</a></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Deep Learning手写数字识别 (LeNet)</title>
      <link href="/posts/b5284acc.html"/>
      <url>/posts/b5284acc.html</url>
      
        <content type="html"><![CDATA[<h2 id="代码实现如下"><a href="#代码实现如下" class="headerlink" title="代码实现如下"></a>代码实现如下</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> paddle</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image <span class="comment">#用于图像载入</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt <span class="comment">#用于图像显示</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> paddle.vision.transforms <span class="keyword">as</span> T <span class="comment">#用于图像预处理</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入框架自带Mnist数据集</span></span><br><span class="line"></span><br><span class="line">transforms=T.Compose([T.Resize(<span class="number">32</span>),T.ToTensor()]) <span class="comment">#图像预处理组合，把图像转为向量</span></span><br><span class="line"></span><br><span class="line">Train_Dataset=paddle.vision.datasets.MNIST(mode=<span class="string">&quot;train&quot;</span>,transform=transforms) <span class="comment">#加载训练集</span></span><br><span class="line"></span><br><span class="line">Test_Dataset=paddle.vision.datasets.MNIST(mode=<span class="string">&quot;test&quot;</span>,transform=transforms) <span class="comment">#加载测试集</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#模型建立（LeNet）</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mnist_Net</span>(<span class="params">paddle.nn.Layer</span>):</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line"> <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line"> self.conv1=paddle.nn.Conv2D(in_channels=<span class="number">1</span>,out_channels=<span class="number">6</span>,kernel_size=[<span class="number">5</span>,<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"> self.maxpool1=paddle.nn.MaxPool2D(kernel_size=[<span class="number">2</span>,<span class="number">2</span>],stride=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"> self.conv2=paddle.nn.Conv2D(in_channels=<span class="number">6</span>,out_channels=<span class="number">16</span>,kernel_size=[<span class="number">5</span>,<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"> self.maxpool2=paddle.nn.MaxPool2D(kernel_size=[<span class="number">2</span>,<span class="number">2</span>],stride=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"> self.conv3=paddle.nn.Conv2D(in_channels=<span class="number">16</span>,out_channels=<span class="number">120</span>,kernel_size=[<span class="number">5</span>,<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"> self.flatten=paddle.nn.Flatten()</span><br><span class="line"></span><br><span class="line"> self.fc2=paddle.nn.Linear(<span class="number">120</span>,<span class="number">84</span>)</span><br><span class="line"></span><br><span class="line"> self.fc3=paddle.nn.Linear(<span class="number">84</span>,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"> self.softmax=paddle.nn.Softmax()</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"> self.relu=paddle.nn.ReLU()</span><br><span class="line"></span><br><span class="line"> self.sigmoid=paddle.nn.Sigmoid()</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self,x</span>):</span></span><br><span class="line"></span><br><span class="line"> x=self.conv1(x)</span><br><span class="line"></span><br><span class="line"> x=self.relu(x)</span><br><span class="line"></span><br><span class="line"> x=self.maxpool1(x)</span><br><span class="line"></span><br><span class="line"> x=self.conv2(x)</span><br><span class="line"></span><br><span class="line"> x=self.relu(x)</span><br><span class="line"></span><br><span class="line"> x=self.maxpool2(x)</span><br><span class="line"></span><br><span class="line"> x=self.conv3(x)</span><br><span class="line"></span><br><span class="line"> x=self.relu(x)</span><br><span class="line"></span><br><span class="line"> x=self.flatten(x)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"> x=self.fc2(x)</span><br><span class="line"></span><br><span class="line"> x=self.relu(x)</span><br><span class="line"></span><br><span class="line"> x=self.fc3(x)</span><br><span class="line"></span><br><span class="line"> y=self.softmax(x)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">mnist_net=Mnist_Net()</span><br><span class="line"></span><br><span class="line">paddle.summary(mnist_net,(<span class="number">1</span>,<span class="number">1</span>,<span class="number">32</span>,<span class="number">32</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#高层API模型对象化</span></span><br><span class="line"></span><br><span class="line">model=paddle.Model(mnist_net)</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置模型</span></span><br><span class="line"></span><br><span class="line">model.prepare(optimizer=paddle.optimizer.Adam(learning_rate=<span class="number">0.001</span>,parameters=model.parameters()), <span class="comment">#优化器</span></span><br><span class="line"></span><br><span class="line"> loss=paddle.nn.CrossEntropyLoss(),<span class="comment">#损失函数</span></span><br><span class="line"></span><br><span class="line"> metrics =paddle.metric.Accuracy()) <span class="comment">#准确度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#训练模型</span></span><br><span class="line"></span><br><span class="line">callback=paddle.callbacks.VisualDL(<span class="string">&quot;log_dir&quot;</span>) <span class="comment">#定义callback对象，保存可视化数据日志</span></span><br><span class="line"></span><br><span class="line">model.fit(train_data=Train_Dataset,epochs=<span class="number">10</span>,batch_size=<span class="number">200</span>,callbacks=callback,verbose=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#评估模型</span></span><br><span class="line"></span><br><span class="line">eval_result=model.evaluate(Test_Dataset,verbose=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">model.save(<span class="string">&quot;mymodel/mnist_net&quot;</span>) <span class="comment">#保存模型</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#载入图像</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">image_load</span>(<span class="params">img_path</span>):</span></span><br><span class="line"></span><br><span class="line"> photo=Image.<span class="built_in">open</span>(img_path).convert(<span class="string">&quot;L&quot;</span>) <span class="comment">#以灰度图方式读入图像</span></span><br><span class="line"></span><br><span class="line"> photo=photo.resize([<span class="number">32</span>,<span class="number">32</span>]) <span class="comment">#图像统一大小32*32</span></span><br><span class="line"></span><br><span class="line"> im=np.array(photo).astype(<span class="string">&quot;float32&quot;</span>) <span class="comment">#图像数字化</span></span><br><span class="line"></span><br><span class="line"> im=np.where(im &gt; <span class="number">150</span>, <span class="number">0</span>, im) <span class="comment">#把像素点大于150的置为0，去掉背景</span></span><br><span class="line"></span><br><span class="line"> im=im/<span class="number">255</span> <span class="comment">#归一化</span></span><br><span class="line"></span><br><span class="line"> im=paddle.to_tensor(im) <span class="comment">#张量</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> im</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">model.load(<span class="string">&quot;mymodel/mnist_net&quot;</span>) <span class="comment">#加载模型参数</span></span><br><span class="line"></span><br><span class="line">im=image_load(<span class="string">&quot;mydata/5.JPG&quot;</span>) <span class="comment">#载入图像</span></span><br><span class="line"></span><br><span class="line">plt.imshow(im) <span class="comment">#显示图像</span></span><br><span class="line"></span><br><span class="line">im=im.reshape([<span class="number">1</span>,<span class="number">1</span>,<span class="number">32</span>,<span class="number">32</span>]) <span class="comment">#图像变形为1张1通道28*28大小</span></span><br><span class="line"></span><br><span class="line">result=model.predict_batch(im) <span class="comment">#使用model.predict_batch对图像进行预测</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.argmax(result))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h2><ul><li><p><a href="https://aistudio.baidu.com/aistudio/index">飞桨AI Studio - 人工智能学习实训社区</a></p></li><li><p><a href="https://github.com/GiesenC/DeepLearning">GitHub - GiesenC/DeepLearning: DeepLearning model training, evaluation and prediction related code.</a></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基于Matlab实现RFID阅读器与标签间通信数据分析</title>
      <link href="/posts/99d6ae05.html"/>
      <url>/posts/99d6ae05.html</url>
      
        <content type="html"><![CDATA[<h2 id="RFID阅读器与标签间通信数据分析"><a href="#RFID阅读器与标签间通信数据分析" class="headerlink" title="RFID阅读器与标签间通信数据分析"></a>RFID阅读器与标签间通信数据分析</h2><p>RFID系统由阅读器和标签组成，阅读器通过无线方式向标签发送读取命令，标签在接收到阅读器的命令后，会通过无线信号向阅读器回传EPC码，阅读器通过天线（Antenna）在接收到EPC码同时，还能够接收到三个无线通信参数：信号强度RSSI、相位角Phase、多谱勒Doppler。数据测试场景如下图所示，测试得到的数据存放在附件EXCEL文件 “ZWSJ” 中，表中 “辐射方向线” 为图中从天线 (Antenna)出来辐射线编号，表中“径向距离”为某编号的方向上标签与天线 (Antenna) 间的距离，表中 “标签平面方向” 编号分别表示标签平面和天线平面夹角的三种情况。</p><p><img src="https://s2.loli.net/2021/12/10/CU5ajSPqXloTrvK.png"></p><h3 id="（1）统计径向距离为10cm，标签平面方向为其平面垂直于天线平面时RSSI平均值、方差。"><a href="#（1）统计径向距离为10cm，标签平面方向为其平面垂直于天线平面时RSSI平均值、方差。" class="headerlink" title="（1）统计径向距离为10cm，标签平面方向为其平面垂直于天线平面时RSSI平均值、方差。"></a>（1）统计径向距离为10cm，标签平面方向为其平面垂直于天线平面时RSSI平均值、方差。</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%导入数据</span></span><br><span class="line">ZWSJ=xlsread(<span class="string">&#x27;ZWSJ.xlsx&#x27;</span>);</span><br><span class="line">A=xlsread(<span class="string">&#x27;ZWSJ.xlsx&#x27;</span>,<span class="string">&#x27;A4:A3481&#x27;</span>);</span><br><span class="line">B=xlsread(<span class="string">&#x27;ZWSJ.xlsx&#x27;</span>,<span class="string">&#x27;B4:B3481&#x27;</span>);</span><br><span class="line">C=xlsread(<span class="string">&#x27;ZWSJ.xlsx&#x27;</span>,<span class="string">&#x27;C4:C3481&#x27;</span>);</span><br><span class="line">D=xlsread(<span class="string">&#x27;ZWSJ.xlsx&#x27;</span>,<span class="string">&#x27;D4:D3481&#x27;</span>);</span><br><span class="line">E=xlsread(<span class="string">&#x27;ZWSJ.xlsx&#x27;</span>,<span class="string">&#x27;E4:E3481&#x27;</span>);</span><br><span class="line">F=xlsread(<span class="string">&#x27;ZWSJ.xlsx&#x27;</span>,<span class="string">&#x27;F4:F3481&#x27;</span>);</span><br><span class="line"><span class="comment">%调用工作区的变量</span></span><br><span class="line">A_data=evalin(<span class="string">&#x27;base&#x27;</span>,<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">B_data=evalin(<span class="string">&#x27;base&#x27;</span>,<span class="string">&#x27;B&#x27;</span>);</span><br><span class="line">C_data=evalin(<span class="string">&#x27;base&#x27;</span>,<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">D_data=evalin(<span class="string">&#x27;base&#x27;</span>,<span class="string">&#x27;D&#x27;</span>);</span><br><span class="line">E_data=evalin(<span class="string">&#x27;base&#x27;</span>,<span class="string">&#x27;E&#x27;</span>);</span><br><span class="line">F_data=evalin(<span class="string">&#x27;base&#x27;</span>,<span class="string">&#x27;F&#x27;</span>);</span><br><span class="line"><span class="comment">%求RSSI平均值、方差</span></span><br><span class="line">X_10=<span class="built_in">find</span>(B_data==<span class="number">10</span>&amp;C_data==<span class="number">1</span>);</span><br><span class="line">RSSI=E_data(X_10);</span><br><span class="line">R_mean=<span class="built_in">mean</span>(RSSI)</span><br><span class="line">R_var=var(RSSI)</span><br></pre></td></tr></table></figure><h3 id="（2）分析径向距离为20cm，标签平面方向为其平面平行于天线平面时Phase与RSSI间相关系数。"><a href="#（2）分析径向距离为20cm，标签平面方向为其平面平行于天线平面时Phase与RSSI间相关系数。" class="headerlink" title="（2）分析径向距离为20cm，标签平面方向为其平面平行于天线平面时Phase与RSSI间相关系数。"></a>（2）分析径向距离为20cm，标签平面方向为其平面平行于天线平面时Phase与RSSI间相关系数。</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%Phase与RSSI间相关系数</span></span><br><span class="line">X_20=<span class="built_in">find</span>(B_data==<span class="number">20</span>&amp;C_data==<span class="number">3</span>);</span><br><span class="line">phase=F_data(X_20);</span><br><span class="line">RSSI_1=E_data(X_20);</span><br><span class="line">r=corrcoef(phase,RSSI_1)</span><br></pre></td></tr></table></figure><h3 id="（3）分析径向距离为30cm，标签平面方向为其平面与天线平面夹角45度时Phase与dopper间相关系数。"><a href="#（3）分析径向距离为30cm，标签平面方向为其平面与天线平面夹角45度时Phase与dopper间相关系数。" class="headerlink" title="（3）分析径向距离为30cm，标签平面方向为其平面与天线平面夹角45度时Phase与dopper间相关系数。"></a>（3）分析径向距离为30cm，标签平面方向为其平面与天线平面夹角45度时Phase与dopper间相关系数。</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%Phase与dopper间相关系数</span></span><br><span class="line">X_30=<span class="built_in">find</span>(B_data==<span class="number">30</span>&amp;C_data==<span class="number">2</span>);</span><br><span class="line">phase_1=F_data(X_30);</span><br><span class="line">dopper=D_data(X_30);</span><br><span class="line">r_1=corrcoef(phase_1,dopper)</span><br></pre></td></tr></table></figure><h3 id="（4）在辐射方向线10，以径向距离、标签平面方向和RSSI作三维曲面。"><a href="#（4）在辐射方向线10，以径向距离、标签平面方向和RSSI作三维曲面。" class="headerlink" title="（4）在辐射方向线10，以径向距离、标签平面方向和RSSI作三维曲面。"></a>（4）在辐射方向线10，以径向距离、标签平面方向和RSSI作三维曲面。</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%以径向距离、标签平面方向和RSSI作三维曲面</span></span><br><span class="line">f_10=<span class="built_in">find</span>(A_data==<span class="number">10</span>);</span><br><span class="line">x=B_data(f_10);</span><br><span class="line">y=C_data(f_10);</span><br><span class="line">z=E_data(f_10);</span><br><span class="line">[X,Y,Z]=griddata(x,y,z,<span class="built_in">linspace</span>(<span class="built_in">min</span>(x),<span class="built_in">max</span>(x))&#x27;,<span class="built_in">linspace</span>(<span class="built_in">min</span>(y),<span class="built_in">max</span>(y)),<span class="string">&#x27;v4&#x27;</span>);</span><br><span class="line"><span class="comment">%绘图</span></span><br><span class="line"><span class="built_in">figure</span>,surf(X,Y,Z)</span><br><span class="line"> title(<span class="string">&#x27;三维曲面&#x27;</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;X(径向距离)&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;Y(标签平面方向)&#x27;</span>);</span><br><span class="line">zlabel(<span class="string">&#x27;Z(RSSI)&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2021/12/10/7agjpG5crbf3dJw.png"></p><h3 id="（5）在辐射方向线10，由于丢失径向距离为290且标签平面方向为其平面与天线平面夹角45度时的RSSI数据，采用两种方式补充该数据：通过插值方式补充该数据；通过曲线拟合方式补充该数据。"><a href="#（5）在辐射方向线10，由于丢失径向距离为290且标签平面方向为其平面与天线平面夹角45度时的RSSI数据，采用两种方式补充该数据：通过插值方式补充该数据；通过曲线拟合方式补充该数据。" class="headerlink" title="（5）在辐射方向线10，由于丢失径向距离为290且标签平面方向为其平面与天线平面夹角45度时的RSSI数据，采用两种方式补充该数据：通过插值方式补充该数据；通过曲线拟合方式补充该数据。"></a>（5）在辐射方向线10，由于丢失径向距离为290且标签平面方向为其平面与天线平面夹角45度时的RSSI数据，采用两种方式补充该数据：通过插值方式补充该数据；通过曲线拟合方式补充该数据。</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%插值方式补充数据</span></span><br><span class="line">index=<span class="built_in">find</span>(B_data==<span class="number">290</span>&amp;C_data==<span class="number">2</span>);</span><br><span class="line">a_line=A_data(index);</span><br><span class="line">rssi=E_data(index);</span><br><span class="line"><span class="comment">%线性插值</span></span><br><span class="line">intp1=interp1(a_line,rssi,<span class="number">10</span>)</span><br><span class="line"><span class="comment">%最近点插值</span></span><br><span class="line">intp2=interp1(a_line,rssi,<span class="number">10</span>,<span class="string">&#x27;nearest&#x27;</span>)</span><br><span class="line"><span class="comment">%分段3次埃尔米特插值</span></span><br><span class="line">intp3=interp1(a_line,rssi,<span class="number">10</span>,<span class="string">&#x27;pchip&#x27;</span>)</span><br><span class="line"><span class="comment">%3次样条插值</span></span><br><span class="line">intp4=interp1(a_line,rssi,<span class="number">10</span>,<span class="string">&#x27;spline&#x27;</span>)</span><br><span class="line"><span class="comment">%曲线插值</span></span><br><span class="line">P=polyfit(a_line,rssi,<span class="number">3</span>);</span><br><span class="line">result=polyval(P,<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h3 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h3><ul><li><a href="https://pan.baidu.com/s/1Zf0qoffsffsF2ehTLc35vg">相关数据文件下载 -1208</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git笔记归档</title>
      <link href="/posts/23a2de3e.html"/>
      <url>/posts/23a2de3e.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-快捷别名"><a href="#1-快捷别名" class="headerlink" title="1.快捷别名"></a>1.快捷别名</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">`st`就表示`status`</span><br><span class="line"></span><br><span class="line">`co`表示`checkout`</span><br><span class="line"></span><br><span class="line">`ci`表示`commit`</span><br><span class="line"></span><br><span class="line">`br`表示`branch`</span><br><span class="line"></span><br><span class="line">`aborting commit dur to emptu commit message unstage name`表示`git reset HEAD name`</span><br><span class="line"></span><br><span class="line">`git last`表示`git config --global alias.last &#x27;log -1&#x27;`显示最近一次的提交</span><br><span class="line"></span><br><span class="line">`git lg`表示`git config --global alias.lg &quot;log --color --graph --pretty=format:&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#x27; --abbrev-commit&quot;`</span><br></pre></td></tr></table></figure><p>如图：</p><p><img src="https://s2.loli.net/2022/01/06/ICjHkhaJlEmXNwW.png"></p><h3 id="2-时光机穿梭"><a href="#2-时光机穿梭" class="headerlink" title="2.时光机穿梭"></a>2.时光机穿梭</h3><h4 id="2-1-版本回退"><a href="#2-1-版本回退" class="headerlink" title="2.1.版本回退"></a>2.1.版本回退</h4><p>要随时掌控工作区状态，使用<code>git status</code>命令</p><p>如果有文件被修改过用<code>git diff</code>可以查看修改内容</p><p><code>HEAD</code>指向的版本就是当前版本，使用命令<code>git reset --hard commit_id</code>id号一般是前七位</p><p>回退用<code>git log</code>查看提交历史</p><p>前滚用<code>git reflog</code>查看命令历史</p><h4 id="2-2-工作区和暂缓区"><a href="#2-2-工作区和暂缓区" class="headerlink" title="2.2.工作区和暂缓区"></a>2.2.工作区和暂缓区</h4><p>Git管理的文件分为：工作区，版本库，版本库又分为暂存区stage和暂存区分支master(仓库)</p><p>工作区&gt;&gt;&gt;&gt;暂存区&gt;&gt;&gt;&gt;仓库</p><p><code>git add .</code>把文件从工作区&gt;&gt;&gt;&gt;暂存区，<code>git commit</code>把文件从暂存区&gt;&gt;&gt;&gt;仓库，</p><p><code>git diff</code>查看工作区和暂存区差异，</p><p><code>git diff --cached</code>查看暂存区和仓库差异，</p><p><code>git diff HEAD -- name</code> 查看工作区和仓库的差异，</p><p><code>git add</code>的反向命令<code>git checkout</code>，撤销工作区修改，即把暂存区最新版本转移到工作区，</p><p><code>git commit</code>的反向命令<code>git reset HEAD name</code>，就是把仓库最新版本转移到暂存区。</p><h4 id="2-3-管理修改"><a href="#2-3-管理修改" class="headerlink" title="2.3.管理修改"></a>2.3.管理修改</h4><p>必须<code>git add</code>到暂缓区，才能<code>git commit -m ‘xxx’   </code>到仓库</p><h4 id="2-4-撤销修改"><a href="#2-4-撤销修改" class="headerlink" title="2.4.撤销修改"></a>2.4.撤销修改</h4><p>1.没有<code>git add</code>时，用<code>git checkout -- file</code></p><p>2.已经<code>git add</code>时，先<code>git reset HEAD &lt;file&gt;</code>回退到1.，再按1.操作</p><p>3.已经<code>git commit</code>时，用<code>git reset</code>回退版本</p><p>从暂存区恢复工作区，</p><p><code>git resotre --worktree readme.txt</code></p><p>从master恢复暂存区 </p><p><code>git restore --staged readme.txt</code></p><p>从master同时恢复工作区和暂存区</p><p><code>warning :LF will be replaced by CRLF in sssgit restore --source=HEAD --staged --worktree readme.txt</code></p><p>==checkout=restore==</p><h4 id="2-5-删除文件"><a href="#2-5-删除文件" class="headerlink" title="2.5.删除文件"></a>2.5.删除文件</h4><p>1.如果你用的rm删除文件，那就相当于只删除了工作区的文件，如果想要恢复，直接用<code>git checkout -- &lt;file&gt;</code>就可以了</p><p> 2.如果你用的是<code>git rm</code>删除文件，那就相当于不仅删除了文件，而且还添加到了暂存区，需要先<code>git reset HEAD &lt;file&gt;</code>，然后再<code>git checkout -- &lt;file&gt;</code> </p><p>3.如果你想彻底把版本库的删除掉，先<code>git rm</code>，再<code>git commit </code>就可以了</p><h6 id="2-5-1-不存在不能恢复-除非把版本记录打乱"><a href="#2-5-1-不存在不能恢复-除非把版本记录打乱" class="headerlink" title="2.5.1.不存在不能恢复 除非把版本记录打乱"></a>2.5.1.不存在不能恢复 除非把版本记录打乱</h6><p><code>git rm file</code>并且<code>git commit</code>并不是删除了版本库里的某个版本号，而是对工作目录下的删除操作进行了一个记录，会在仓库里生成一个新的版本号，在该版本下没有该文件。但是可以用<code>git reset --hard commit_id</code>进行版本回退，回退到有这个文件的版本号。而<code>git checkout commit_id file</code>命令是从含有该文件的旧版本号里把该文件拿出来，放到现版本里，版本号不改变。</p><h3 id="3-远程仓库"><a href="#3-远程仓库" class="headerlink" title="3.远程仓库"></a>3.远程仓库</h3><h4 id="3-1-添加到远程库"><a href="#3-1-添加到远程库" class="headerlink" title="3.1.添加到远程库"></a>3.1.添加到远程库</h4><p>要关联一个远程库，使用命令<code>git remote add origin git@server-name:path/repo-name.git</code></p><p>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容</p><p>此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改</p><p>若出现==fatal: not a git repository (or any of the parent directories): .git==</p><p>先输入：</p><p><code>git init</code></p><p>出现<code>Initialized empty Git repository in C:/Users/name/.git/</code></p><p>再重新连接远程库：<code>git remote add origin git@https://github.com/xxx/xxx.git</code></p><p>即可添加</p><h4 id="3-2-从远程库克隆"><a href="#3-2-从远程库克隆" class="headerlink" title="3.2.从远程库克隆"></a>3.2.从远程库克隆</h4><p>要克隆一个仓库，首先必须知道仓库的地址，然后使用<code>git clone name</code>命令克隆</p><p>Git支持多种协议，包括<code>https</code>，但<code>ssh</code>协议速度最快</p><h3 id="4-分支管理"><a href="#4-分支管理" class="headerlink" title="4.分支管理"></a>4.分支管理</h3><h4 id="4-1-创建与合并分支"><a href="#4-1-创建与合并分支" class="headerlink" title="4.1.创建与合并分支"></a>4.1.创建与合并分支</h4><p>查看分支：<code>git branch</code></p><p>创建分支：<code>git branch &lt;name&gt;</code></p><p>切换分支：<code>git checkout &lt;name&gt;</code>或者<code>git switch &lt;name&gt;</code></p><p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code>或者<code>git switch -c &lt;name&gt;</code></p><p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p><p>删除分支：<code>git branch -d &lt;name&gt;</code></p><h4 id="4-2-解决冲突"><a href="#4-2-解决冲突" class="headerlink" title="4.2.解决冲突"></a>4.2.解决冲突</h4><p>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成</p><p>解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交</p><p>用<code>git log --graph</code>命令可以看到分支合并图</p><h4 id="4-3-分支管理策略"><a href="#4-3-分支管理策略" class="headerlink" title="4.3.分支管理策略"></a>4.3.分支管理策略</h4><p>首先，<code>master</code>分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活</p><p>那在哪干活呢？干活都在<code>dev</code>分支上，也就是说，<code>dev</code>分支是不稳定的，到某个时候，比如1.0版本发布时，再把<code>dev</code>分支合并到<code>master</code>上，在<code>master</code>分支发布1.0版本</p><p>你和你的小伙伴们每个人都在<code>dev</code>分支上干活，每个人都有自己的分支，时不时地往<code>dev</code>分支上合并就可以了</p><p>所以，团队合作的分支看起来就像这样：</p><p><img src="https://s2.loli.net/2022/01/06/wk5sDubxaigXqRH.png"></p><p>合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并例如<code>git merge --no-ff -m &quot;xxx&quot; dev</code>，合并后的历史有分支，能看出来曾经做过合并，而<code>fast forward</code>合并就看不出来曾经做过合并</p><h4 id="4-4-BUG分支"><a href="#4-4-BUG分支" class="headerlink" title="4.4.BUG分支"></a>4.4.BUG分支</h4><p>修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；</p><p>当手头工作没有完成时，先把工作现场<code>git stash</code>一下，然后去修复bug，修复后，一是用<code>git stash apply</code>恢复，但是恢复后，stash内容并不删除，你需要用<code>git stash drop</code>来删除；</p><p>用<code>git stash list</code>命令查看<code>stash</code>内容</p><p>另一种方式是用<code>git stash pop</code>，恢复的同时把stash内容也删了：</p><p>在master分支上修复的bug，想要合并到当前dev分支，可以用<code>git cherry-pick commit_id</code>命令，把bug提交的修改“复制”到当前分支，避免重复劳动。</p><h4 id="4-5-Feature分支"><a href="#4-5-Feature分支" class="headerlink" title="4.5.Feature分支"></a>4.5.Feature分支</h4><p>开发一个新feature，最好新建一个分支</p><p>如果要丢弃一个没有被合并过的分支，可以通过<code>git branch -D &lt;name&gt;</code>强行删除</p><h4 id="4-6-多人协助"><a href="#4-6-多人协助" class="headerlink" title="4.6.多人协助"></a>4.6.多人协助</h4><ul><li>查看远程库信息，使用<code>git remote -v</code></li><li>本地新建的分支如果不推送到远程，对其他人就是不可见的</li><li>从本地推送分支，使用<code>git push origin branch-name</code>，如果推送失败，先用<code>git pull</code>抓取远程的新提交</li><li>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致</li><li>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code></li><li>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突</li></ul><h4 id="4-7-Rebase"><a href="#4-7-Rebase" class="headerlink" title="4.7.Rebase"></a>4.7.Rebase</h4><p><code>git rebase</code>操作可以把本地未push的分叉提交历史整理成==直线==</p><p><code>rebase</code>的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比</p><h3 id="5-标签管理"><a href="#5-标签管理" class="headerlink" title="5.标签管理"></a>5.标签管理</h3><h4 id="5-1-创建标签"><a href="#5-1-创建标签" class="headerlink" title="5.1.创建标签"></a>5.1.创建标签</h4><ul><li>命令<code>git tag &lt;tagname&gt;</code>用于新建一个标签，默认为<code>HEAD</code>，也可以指定一个commit id</li><li>命令<code>git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以指定标签信息</li><li>命令<code>git tag</code>可以查看所有标签</li></ul><p>==注意：标签总是和某个commit挂钩。如果这个commit既出现在master分支，又出现在dev分支，那么在这两个分支上都可以看到这个标签==</p><h4 id="5-2-操作标签"><a href="#5-2-操作标签" class="headerlink" title="5.2.操作标签"></a>5.2.操作标签</h4><ul><li><p>命令<code>git push origin &lt;tagname&gt;</code>可以推送一个本地标签</p></li><li><p>命令<code>git push origin --tags</code>可以推送全部未推送过的本地标签</p><p>如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：</p></li><li><p>命令<code>git tag -d &lt;tagname&gt;</code>可以删除一个本地标签</p></li><li><p>命令<code>git push origin :refs/tags/&lt;tagname&gt;</code>可以删除一个远程标签</p></li></ul><p>==refs=reference(参考)==</p><h4 id="5-3-使用GitHub"><a href="#5-3-使用GitHub" class="headerlink" title="5.3.使用GitHub"></a>5.3.使用GitHub</h4><p>如何参与一个开源项目呢？比如人气极高的bootstrap项目，这是一个非常强大的CSS框架，你可以访问它的项目主页<a href="https://github.com/twbs/bootstrap">https://github.com/twbs/bootstrap</a> ，点<code>Fork</code>就在自己的账号下克隆了一个bootstrap仓库，然后，从自己的账号下clone：</p><p><code>git clone git@github.com:xxx/xxx.git</code></p><p>一定要从自己的账号下clone仓库，这样你才能推送修改。如果从bootstrap的作者的仓库地址<code>git@github.com:twbs/bootstrap.git</code>克隆，==因为没有权限==，你将不能推送修改，原理如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">┌─ GitHub ────────────────────────────────────┐</span><br><span class="line">│                                             │</span><br><span class="line">│ ┌─────────────────┐     ┌─────────────────┐ │</span><br><span class="line">│ │ twbs/bootstrap  │────&gt;│  my/bootstrap   │ │</span><br><span class="line">│ └─────────────────┘     └─────────────────┘ │</span><br><span class="line">│                                  ▲          │</span><br><span class="line">└──────────────────────────────────┼──────────┘</span><br><span class="line">                                   ▼</span><br><span class="line">                          ┌─────────────────┐</span><br><span class="line">                          │ local/bootstrap │</span><br><span class="line">                          └─────────────────┘</span><br></pre></td></tr></table></figure><p>可以推送<code>pull request</code>给官方仓库来贡献代码</p><ul><li><a href="https://www.ruanyifeng.com/blog/2017/07/pull_request.html">阮一峰pull request教程</a></li></ul><h3 id="6-使用Gitee"><a href="#6-使用Gitee" class="headerlink" title="6.使用Gitee"></a>6.使用Gitee</h3><p>如果在使用命令<code>git remote add</code>时报错:==fatal: remote origin already exists==</p><p>这说明本地库已经关联了一个名叫<code>origin</code>的远程库，此时，可以先用<code>git remote -v</code>查看远程库信息</p><p>如果有多个远程库，我们需要用不同的名称来标识不同的远程库。</p><p>仍然以<code>xxx</code>本地库为例，我们先删除已关联的名为<code>origin</code>的远程库：</p><p><code>git remote rm origin</code></p><p>然后，先关联GitHub的远程库：</p><p><code>git remote add github git@github.com:xxx/xxx.git</code></p><p>==注意，远程库的名称叫github，不叫origin了。==</p><p>接着，再关联Gitee的远程库：</p><p><code>git remote add gitee git@gitee.com:xxx/xxx.git</code></p><p>==同样注意，远程库的名称叫gitee，不叫origin。==</p><p>现在，我们用<code>git remote -v</code>查看远程库信息，可以看到两个远程库</p><p>如果要推送到GitHub，使用命令：</p><p><code>git push github master</code></p><p>如果要推送到Gitee，使用命令：</p><p><code>git push gitee master</code></p><h3 id="7-自定义Git"><a href="#7-自定义Git" class="headerlink" title="7.自定义Git"></a>7.自定义Git</h3><p>可以Git不同的主题</p><ul><li><a href="https://draculatheme.com/iterm/">Drakula</a></li></ul><h4 id="7-1-忽略特殊文件"><a href="#7-1-忽略特殊文件" class="headerlink" title="7.1.忽略特殊文件"></a>7.1.忽略特殊文件</h4><ul><li> <a href="https://www.liaoxuefeng.com/wiki/896043488029600/900004590234208">忽略特殊文件 - 廖雪峰的官方网站</a></li></ul><h3 id="8-配置别名"><a href="#8-配置别名" class="headerlink" title="8.配置别名"></a>8.配置别名</h3><h4 id="8-1-配置文件"><a href="#8-1-配置文件" class="headerlink" title="8.1.配置文件"></a>8.1.配置文件</h4><p>配置Git的时候，加上<code>--global</code>是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。</p><p>配置文件放哪了？每个仓库的Git配置文件都放在<code>.git/config</code>文件中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat .git/config</span> </span><br><span class="line">[core]</span><br><span class="line">    repositoryformatversion = 0</span><br><span class="line">    filemode = true</span><br><span class="line">    bare = false</span><br><span class="line">    logallrefupdates = true</span><br><span class="line">    ignorecase = true</span><br><span class="line">    precomposeunicode = true</span><br><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">    url = git@github.com:michaelliao/learngit.git</span><br><span class="line">    fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">[branch &quot;master&quot;]</span><br><span class="line">    remote = origin</span><br><span class="line">    merge = refs/heads/master</span><br><span class="line">[alias]</span><br><span class="line">    last = log -1</span><br></pre></td></tr></table></figure><p>别名就在<code>[alias]</code>后面，要删除别名，直接把对应的行删掉即可。</p><p>而当前用户的Git配置文件放在用户主目录下的一个隐藏文件<code>.gitconfig</code>中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat .gitconfig</span></span><br><span class="line">[alias]</span><br><span class="line">    co = checkout</span><br><span class="line">    ci = commit</span><br><span class="line">    br = branch</span><br><span class="line">    st = status</span><br><span class="line">[user]</span><br><span class="line">    name = Your Name</span><br><span class="line">    email = your@email.com</span><br></pre></td></tr></table></figure><p>配置别名也可以直接修改这个文件，如果改错了，可以删掉文件重新通过命令配置。</p><h3 id="9-搭建Git服务器"><a href="#9-搭建Git服务器" class="headerlink" title="9.搭建Git服务器"></a>9.搭建Git服务器</h3><ul><li><a href="https://www.liaoxuefeng.com/wiki/896043488029600/899998870925664">搭建Git服务器 - 廖雪峰的官方网站</a></li></ul><h3 id="10-常用命令总结"><a href="#10-常用命令总结" class="headerlink" title="10.常用命令总结"></a>10.常用命令总结</h3><p><img src="https://s2.loli.net/2022/01/06/9MpT5gQnRXyULaq.jpg"></p><ul><li><p><a href="https://gitee.com/liaoxuefeng/learn-java/raw/master/teach/git-cheatsheet.pdf">Gitaborting commit due to empty commit message (pdf)</a></p></li><li><p><a href="https://www.runoob.com/note/56524">Git 常用命令大全 - 菜鸟教程</a></p></li><li><p><a href="https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">常用 Git 命令清单 - 阮一峰的网络日志</a></p></li></ul><h3 id="11-尾巴"><a href="#11-尾巴" class="headerlink" title="11.尾巴"></a>11.尾巴</h3><ul><li><p><a href="https://git-scm.com/">Git官网</a></p></li><li><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖雪峰教程</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/Ezvyt-I0xTHK0r2TOLTIdA">菜鸟教程</a></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>逆向理解知行合一</title>
      <link href="/posts/57e783b0.html"/>
      <url>/posts/57e783b0.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2021/11/07/PfT2iaq4Vt3bKnE.jpg"></p><blockquote><p>知是行之始，行是知之成。<br>-王守仁</p></blockquote><p>“不虑而知为良知”。所谓“不虑而知”，不加思索就知道的。什么是不加思索就知道的？就是朗朗坐在他的钢琴前，是乒乓球运动员握着球拍的时候。王阳明是朗朗，心学是他的钢琴，你想要像他一样，是要去实践去做的，这不是有些人误解的唯心，否则老王上哪儿立功立德立言成圣，不是应该成仙吗？也不是有些人解读的随时思考随时分辨，扶老奶奶过马路你能分辨善恶，但是弹钢琴的时候你也把时间停止器打开，把这不虑而知的、一瞬间的、下意识的事情，用意识分析对错弄个几千字的总结再行动？如果你觉得谈钢琴这种事儿和知行合一无关，那难道这经世致用的屠龙之术，只能用来扶老奶奶过马路吗？一辈子又能扶几个？真的要你去判断的、时常用来举例的那些事儿，过马路啊，邻居家小孩掉井里之类的，你除了在这种例子里从道德良心方面自嗨一下，生活中有多少用得到的地方呢？</p><p>“知痛，必已自痛了方知痛；知寒，必已自寒了；知饥，必已自饥了；知行如何分得开？”连痛和寒之类里，都有知行合一。知行一体，知来自实践，不全是善恶好坏，冷暖也属于知。现在的很多解读，都有点狭隘，无法把知行融入到生活的点点滴滴、分分秒秒。我也不可能一番话下来就让你能像朗朗一样弹琴了，他对钢琴的感觉，是无法用语言传达给任何一个人的。所以我只是帮你把自己身上的东西挖掘出来，引导你思考，自己去体悟，不能跳着看，也不要看一点就急于下结论。很多东西你有想过，但是可能没人像我这样跟你坐下来好好谈谈这些方面的事情。也有一些，你想过，但是却从未试过从其它方面其它角度考虑过。</p><p>知行一体，应该怎样去理解？王阳明相信每个人都能成为圣贤的信念根基是什么？真的每个人都可以吗？我只能回答你，真的每个人都可以，其它问题的答案，你自己会得到的。以下内容，找个有时间的可以思考的时候看。</p><p>先让你想明白，这个知是什么。你得先回答我一个问题，好好考虑，你喜欢刘德华吗？</p><p>在脑子里回答我。喜欢或者不喜欢，都把这两个字在脑子里说出来，现在我们是在对话。  </p><p>如果你喜欢，那我们继续下一步，如果你不喜欢，自行脑补一个别的人，然后问自己一遍。</p><p>好，你的答案是喜欢。那我接着问你，你什么时候开始喜欢他的？</p><p>还是这样，在脑子里回答我一遍。</p><p>你的答案是哪部电影吗？还是那次去看他演唱会？还是哪一次看到新闻，他的言行感染了你？······</p><p>好吧无论你的答案是什么，都是错误的。</p><p>事实是，当初你看那部电影的时候，从来不会突然停下来脑子里想一遍，我喜欢他。</p><p>你看演唱会的时候，也是，你当时专注于眼前的令人震撼的现场。</p><p>这一切都是我问了你问题之后，你现在思考出来的结果。世界上有了这个问题之后，才有了这个问题的答案。我问了你之后，你开始回想脑子里关于他的信息，最终整合出了这个答案。神奇的是你真的相信自己是从那时候就喜欢上他的。虽然这是此时此刻你脑子里整合信息得出的结论，根本与你当时的行为无关，跟你当时看电影看演唱会一点关系都没有。</p><p>你的现在也是，未来也会被自己加上点什么想法，但是你的现在就是你的现在，你做着自己的事儿呢，天知道未来的你会怎么描述现在的你。</p><p>你的这个回答问题的意识，根本不是知行合一的知。不管是你过去的行为，还是现在的行为，大部分都不取决于这个意识。意识只是整合你的信息，让你思考，不是完全决定你下一秒行为的东西。</p><p>你的意识是语言和一部分感觉，是一种后天学会的用来彼此交流的东西。你说我现在抬抬手，说完之后，这句话在你脑海中，要转换成信号，你才会抬手。</p><p>天马行空的意识，不但会蒙蔽你对过去的感知，还有未来。未来的行为也并不完全受意识控制。控制你的是此时此刻的感觉，只存在于此时此刻，没有过去未来。假如你今天想要吃冰淇淋，下班之后，你经过便利店，想起来这件事，就去买了。你看到便利店，想起来这件事的感觉，带着你去买，就是这种感觉，才是知。我举这个例子是与意识有关的，你想吃，然后后来就去吃了，你想的时候不是知，到你看到便利店的时候，那种带着你行动的感觉才是。之所以举一个与意识有关的例子，是为了你更好的体验这种感觉。可是知来自世间万物，不只来自意识。你出门的时候，到门口，下意识的转动门把手开门，这也是知带领着你去做的，是眼前的环境决定了你的知，决定了你处于什么状态，你有什么感觉，决定了你此刻的行为。 </p><p>这个知绝不会是语言，哪怕描述为一种感觉，还比较接近。你看到东西，先有知，就是先有感觉，然后才有意识。就比如你吃一口冰淇淋，感觉很好吃，然后你要表达出来，才有意识整理成语言，让你说出来好吃这两个字。好吃的这种感觉就是知。只要你醒着，就有知，就有感觉，感觉带着你行动，意识是其中的一部分，它不能完全控制你。<br>这一点你必须仔细考虑仔细体验。</p><p>我帮你捋一捋，难道你每次抬手都要在意识里跟自己说一遍，我要抬手了？你平常走路，每走一步，都在意识里告诉自己，我接下来要迈左脚了，然后右脚？然后左脚右脚一个慢动作？一个你讨厌的人跟你表白，你各种理由拒绝，这由意识思考来的各种理由，是你拒绝对方的原因吗？不是的，是你对ta讨厌的感觉，先有感觉，才有了各种理由，然后你说出了理由，你就觉得真的是这个理由决定了你过去的行为，对方也信了。可是语言带着目的，你要考虑对方的情绪，考虑当时的场合，考虑对方的颜面等等等等。这和你考虑你喜欢刘德华这个问题一样的，当你说出来之后自己也信了，但是其实促使你做出行为的是感觉。我得再强调一遍，它不是文字，不是语言，不是意识，正因为你意识对自己的欺骗性，你才从来没有发现它，可是要发现它，必须抛弃意识抛弃语言抛弃文字。 </p><p>决定你行为的是此时此刻的感觉，就是此时此刻的知，它发于瞬间，又转瞬即逝，我举的例子，只是某个瞬间而已，某些你更容易捕捉到，体会到的瞬间。</p><p>连小孩子都遵循这一规律。</p><p>可是，毕竟知行合一。你现在的行为，肯定带着知，既然说知就是行，行就是知，这个行该怎么去理解呢？</p><p>知行一体，你的知决定行，行又决定了知。知不来自于意识，来自面前的世界，来自你的视觉听觉触觉，来自你过去的行。你难受了，不会想一下我不要难受，你就真的不难受了。</p><p>举个例子。假如你失恋分手了，现在很难受。</p><p>你处于一种难受的状态。此时你的知就是难受的感觉，这种感觉让你无法行动，什么都做不下去，让你沉浸于痛苦中不能自拔。可是，通常，这种时候，道理你都懂，但是你还是难受。平常跟别人讲道理一套一套的，到自己身上了，还是不可避免。</p><p>此时你的知是这种难受的感觉，你难受，听道理为什么改变不了呢？  </p><p>因为只有行才能改变知。意识层面的空想99%都没有用，不是说什么，想什么就能轻易改变的。</p><p>前面你已经知道了，意识会按照遇到的问题，加工以前的行，可是这并不代表以前的行真的是带着你以为的目的去做的，也不代表你以为的那种时空感，你以为你很早就喜欢上刘德华了，但是在我问你之前，你根本没考虑过这个问题。此刻你难受，但是不代表你今天一整天都难受，工作学习的时候，你当时都没有想到这个问题的，都在做眼前的事情，当时就不难受。从你早上起床洗脸刷牙，回想你的一整天，并没有时时刻刻都处于这种状态。所谓的一直喜欢，爱一个人好多年，还有那种事后诸葛亮的，其实我一开始就怎么怎么样的说法，都是自我欺骗，都是在说的那一刻临时思考的而已，过去该干嘛还是在干嘛。</p><p>所以，只有你摆脱这种感觉，拖着身体，真切的现实的去做点什么，才能改变目前的状态。这是最简单，但是也是世界上唯一的走出痛苦的方式。 </p><p>我还没说完，你的行，会成为你未来的知。</p><p>本来你下班回家独处之后，会开始难受，但是当你今天做了别的事情之后。明天你就会好很多。因为明天，你的知会带着你的身体，控制的行，去做上次你在这个环境做的事情。</p><p>简单的描述就是，这次你在这个环境的行为，下次再到这个环境，你的知就会带着你，按照上次的行为来做。昨天你没有沉浸在痛苦中，今天就也不会。</p><p>我举几个具体的例子给你。假如你第一天上班，到了新的工位，然后你把东西放好，看了一下觉得杯子放在左手边比较好，于是你放了过去。</p><p>然后你下次喝完水，你的知会让你情不自禁的还放在那里。这个还放在那里的过程，是不经过思考的，不经过意识的行为。</p><p>你的物品摆放也是这样。</p><p>你对待任何事情都是这样。回家有很多路，你每次都不假思索的走自己之前走的路。</p><p>想起个高中宿舍夜谈时候的事情，也可以拿来举例。当时舍友说，如果你问一个姑娘是不是处女，怎么判断她有没有骗你？当时几个舍友各抒己见我都忘记了，但是记得他最后说，回答的快的就是骗你，因为因为真的处女没有想过这个问题，突然被问会愣一下，而不是处女的，早就想过这个问题的答案了。（本人没有处女情结，仅仅拿来举例而已）</p><p>对，不管是面对一个人，一个环境，一件事，一个问题，一个想法，等等（下文统称为媒介，不再一一列举）你的知都会让你联系到上次的行。你想过一个问题的答案，有人问你就能马上回答出来。别人问一个问题，周围人都不知道，只有你能答出来，不是因为你聪明，是你曾经接触过，或者思考过。</p><p>这就是你的行为规律，这就是知行合一。知不来自你的意识，来自于你上一次对这个媒介做出的行。你要建立一个模型，一个一一对应，但是又不断被替代的模型。</p><p>大到行为，小到一个想法，都遵循这个规律，会被替代。不然就没有习惯这一说了。反过来推，你在一个环境的行为，是不是大部分都取决于之前你在这里的行为？我是说所有的行为，包含下意识的，比如你在公司肯定不会用在家的坐姿。你对一个人的态度，或者说一个人给你的感觉，是不是来自之前他给你的感觉？难道你今天见到父亲，会突然把他当成你的铁哥们对待，勾肩搭背的？除非你皮糙肉厚，挨一顿毒打也要证明我说的不对。</p><p>一个人出现在你面前，你一眼看到，一瞬间给你的感觉来自之前，每个人都是，每个人都不一样，都是独一无二的媒介。那这个之前，是哪一次呢？刚认识？还是哪次出去玩的时候？可是生物本能来说，一瞬间的事儿，哪可能给你选啊，这不是你用意识能选的东西。只能来自上一次。可能是上次他的行为给你留下的印象，也可能是上次他出现在你脑海里你对他的想法，总之是来自上次，不是上上次，也不是上上上次，只能是上一次。这一瞬间的感觉，决定了你对他的态度。人只是拿来举例，事实上任何媒介都一样，你看到任何媒介都是首先下意识想起上次与之有关的感觉，也只能是这样。通过不断的替代，一个人给你的印象，也会随之变来变去。假如你通过靠谱渠道听说了一个之前和蔼的亲戚原来是个凶险的逃犯，你下次面对他，还觉得他是那个和蔼的人吗？不要说你因为害怕会装作不知道，我说的是你心里对他的感觉。</p><p>这次用这种方式做一件事，下次你还是首先想起来用这种方式。做过的事情再做觉得很简单，没做过的就觉得很复杂不想去做。因为做过的，在你的脑子里有对应的知了，每一步下意识就能完成。</p><p>你的意识想起来什么，自己都是无法控制的，一定会想起来这个媒介对应的上次的与之关联的信息。你是这样，别人也是，以后你会慢慢的能了解并预测别人的知和行的。</p><p>但是，根据眼前的媒介的不同，并不会完全按照上次来做，一定会想起来，但是不一定会做。除了你每天开门走出去这种下意识的行，其它行，都是有意识干扰的。你会根据眼前的媒介，各种形势、面对的人不同、自身的状态不同，等等来做出行为。但是第一时间，本能的反应绝对是以上一次为准。你的对象给你送了一个礼物，你看到那个礼物就想起ta来，这只是一开始，礼物这个媒介一开始的确能让你想起ta，看到你就会想起来，由不得你选，你务必会想起来。但是整天摆在你房间里，跟你后来的行融为一体了，这个媒介对应的信息就被替代了，后来你看到了这个媒介，也没反应，很平常。记住，想不起来是因为被替代了，跟时间没关系，不是因为时间久了你就忘记了，这是误区，这一点不想明白很多事情都搞不明白了。不相信你可以试一试，找一首很早很早以前听过但是后来都没听过的歌，你听一下，当初那种感觉就回来了。不过你要是天天听，那种感觉就再也找不回来了，就被现在的感觉替代了。</p><p>这是个简单的，一一对应，又不断替代的思维模型，也是你的行为规律。</p><p>这个模型，能帮助你更好的理解知行合一。你的意识，其实来自于行。你的意识看似复杂，其实是这个模型运作的时间足够久之后的结果。</p><p>我们把一切往前推，推到你小时候。</p><p>你所有的意识，你的语言，每个字，每个发音，都来自于当时的行。行的时候又有知，就是有感觉。</p><p>你会按照所看到的，去感觉，去做。当你第一次叫爸爸，或者妈妈，并且看到了你父母的回应，这个行，在你的知的层面，你知道这个声音对应的是一个人，他们会回应。我现在描述出来是一段话，但是其实对于当时的你来说，那只是一种感觉，之后，你就懂了，会叫他们了。</p><p>你第一次上学，学文字也是，不同的字对应着不同的知，就是不同的感觉，你慢慢的积累不同的语言，就是不同的行的过程，将来遇到与之对应的感觉，你就会用到。比如你第一次知道吃饭的家伙叫碗，在那之前这个碗，在你脑子里并没有名字，只是一种感觉，一种概念，一种原始的知，知道之后，下次遇到，你就知道了，这叫碗。同样的感觉，不会说话的时候你只是笑，会说话之后你下意识的描述为“舒服”，但也有人说“good”。这知，是一种感觉，来自于过去的行。语言的积累，也是行的一种积累，可以用于未来。学的语言越多，等于做过的行越多，因为每个字发音不同，写法不同，对应的给你的感觉不同，在现实中对应的实物又不同，都是独一无二的，所以东西越来越多，你的行积累的越来越多，你懂的就越来越多，你觉得自己也越来越复杂。你的意识就只是你学过的语言，语言纵然千变万化，但是，和真正的知，那种无法描述的感觉相比，远远不够复杂。假如你一天意识活动的时候有一小时，那除了睡觉，剩下来的时间都是知在带领着你行动，大部分时间你没感觉，也感觉不到，因为那一部分没有对应的语言可以描述，没有对应的意识。这是与时间无关的，你以为的忘记，不是找不到媒介就是信息被替代了，其实你记得吃饭的碗，记得杯子，记得桌子椅子架子等等等等，因为这些没有被替代， 也不会被替代，自从你第一次知道，也就是第一次行，认识到以后，产生了感觉以后，就再也没有忘记。只要能找到媒介，只要不被替代，你就不会忘。语言和你弹钢琴一样，只是一个用手一个用嘴，都是由“感觉”，由“知”来发动的。</p><p>读到这里，你品一品王先生这句话：“无善无恶心之体，有善有恶意之动，知善知恶是良知，为善去恶是格物。”人起初并没有什么本性善恶，所以有人好有人麻木不仁，有些人坏的你无法理解。而这两种人都符合王先生的逻辑，之所以不同，是因为小时候的知，即行不同。但是不管怎样，要为善去恶。</p><p>替代也存在于意识之中。就比如解决同一个问题，失恋难受的问题，之前你难受会找人聊天，寻求解脱，今后你就知道了只能做点什么才可以。那这个失恋难受的问题，在你意识里的解决方法就从之前的，替代为全新的了，以后你就会按照全新的方式去做。各种道理，以及你对各种事情的看法、认识，也遵循这个替代原则。全人类的文明，也是这样。古时候天圆地方，太阳绕着地球转，但是同一片天，咱们现代人对应的信息就不同了。</p><p>读书、思考，都会替代掉过去低级的信息，以后遇到对应情况，都会用到。有时候你觉得看道理没有用，但是你看的时候只要认真、好好思考，形成了一种感觉，一种知，后续遇到对应的情况，你就会想起来。</p><p>你的阅历积累，并不是越来越丰富，越来越多，你只是不断的替代自己的信息，不断的替代你对一件事一个人，一种东西的看法。哦对，人也是，人也是个媒介，你对他的看法也是不断的替代。讨厌的人，好久不见你还是讨厌，但是继续接触，某个行为感动你了，或者你发现之前是有误解，你对他就不讨厌了。</p><p>关于遇到媒介，想起上次行为的事情，我想再谈谈。最容易观察的是小孩子，很简单，仔细观察你就能发现他的规律。陪伴足够久，他看到什么东西，脑子里想起了什么，你都知道，因为你知道上次他有关于这个媒介的行为。</p><p>总结一下，上半段，关于知的部分，你必须要体会到一种出离意识的，与思维无关的感觉，是感觉，决定着人的想法和行为。你还要明白，自己的意识，自己的想法，让你一直沉浸其中欺骗自己，它属于知的一部分。下半段的话，理解了上半段，慢慢的就相通了，就懂了。这是颠覆你灵魂深处的逻辑的东西，可能一时半会儿不能完全理解，所以看不懂，也正常。无论如何，此刻你看到我的文字，而体会到的感觉，绝对不是我想传达给你的，你需要时间创造自己的感觉。</p><p>这有什么实际应用吗？我还是举一些例子吧。</p><p>世界上唯一不变的是变化，曾经你爱过的人，说过的话，都只能代表那一刻而已，永恒只是你意识里的错觉，不存在于现实，现实永远在变，每一分每一秒都在变。不管你多么不信，现实都是在变，而且与时间无关，只与一一对应并且替代的逻辑有关。意识与现实无关，早点醒过来吧。</p><p>一一对应，并且不断替代的模型，能让你猜到别人此刻脑子里想到了什么。只要你知道他眼睛刚才看到了什么，并且知道上次他做的与之有关的行为是什么，你就知道他会想起来上次的场景。对于一件事的看法，如果一个人上次是这个看法，这次还会是这样。这里放个链接，关于同样的场景，需要演讲时，一个人说的话，这里她本能的下意识的说的。其实很多时候你也是这样，只是没人拍下来。</p><p><a href="https://www.zhihu.com/question/300451168/answer/579181219">如何证明人类的本质是复读机？</a></p><p>不要跟人争论对错。终于在某个瞬间得到答案了，然后呢，这只是你一天中意识里的一瞬间，与你接下来的行，毫无关联，也没用。要是跟有智慧的人扯，还能发散思维，结合出点新概念什么的，跟一些网络暴民就算了，你说服不了他，他的所有过去决定了他的看法，他有他的感觉，你改变不了。</p><p>感情需要维护，要从现实里考虑，好好注意自己的一言一行给对方的影响。不要从意识层面想啊想就想把很多问题解决掉。要学会揣摩对方的状态、感觉，要从对方语言的背后找到让他做出这一行为的知是什么，不要光深究语言本身。</p><p>不要用性格之类的意识限制自己。根据眼前的现实，考虑各种因素，做出合适的行为就好。好人也会做坏事，坏人也有伤心的时候，没有哪个词能概括一个人，这是一种错误的认知。性格经常就是，你得到了一个描述，然后想起了最近与这个描述有关的经历，然后你一想哎呀自己真的是这样，这就是自己的性格，然后你真的就这样了。至于你当初的行为到底是不是因为这个性格，基本上都不是的。学会看到此时此刻，不要被意识蒙蔽，总觉得某个瞬间就是永远，有时候人打自己脸很快。你情怀上来，可以舍生取义，觉得自己能为了情怀或者爱去死，但是这不影响有个身材极好的异性在你面前脱光光的时候你有感觉（只是说有感觉，能不能把持住要看你自己过去的知，即道德束缚等等）。</p><p>为什么晚上看了各种道理，第二天还是该干嘛干嘛呢？现在你应该知道了，你的知会带你做你之前习惯做的行为。要想摆脱舒适区，那就在这个舒适区，做出新的行，才可以，空想是没用的。</p><p>你每时每刻都逃不出这个规律。你看到一个东西，它给你的感觉，一定是上次你对它的感觉。你看到一个东西，想起来的东西，一定是上次你看到他时做事情时的感觉。对，你想起来的是感觉，不是你认知里东西，是知，这个一一对应是知。不是我说碗你就想起碗这个东西，不是这种意识层面的东西，你想起的是知，是感觉，但是你想起的那个知里面，你只知道碗，所以你就想起来碗。你的意识只能想起碗，是因为当初你知道那是碗，因为碗有对应的行，有对应的这个独一无二的字。你背书的时候，其实你记得文字在书的哪个位置，你记得当时自己的状态，记得自己的视角，记得周围的场景，其实你记得很多东西，但是你以为你只记得书上的字，因为你只回忆了字，不信你可以现在去试试。为什么把要记的东西想象成图像，就能记得更清楚了呢？因为把它转化成图，这个行，让你之后更好对应，否则，光读啊读，死记硬背，对要背的内容都不理解，没有感觉，也没应用过，后面要用的时候，很难一一对应到，很难想起来。但是转化成图片这个过程，让你之后就很好回忆了。只要你去找找对应的方式练习一下，你也能背下来一副牌，你可以去试试锁链法，或者位置记忆法（也叫记忆宫殿）。不要觉得自己记性差，不是你没天赋，不是你笨，你能做到，只是你之前不够了解自己，抛弃掉记性这个概念吧，只要用心思考，你会发现任何情况都能用一一对应并且不断替代的模型去解释自己的记忆。</p><p>语言是一个伟大的东西，它让你有意识，有记忆。设想一下假如人没有语言，你该怎么让一个人想起对应的东西？怎么去表达？表达完又怎么用意识去达成？</p><p>只能是一一对应，并且对应你当初的行。而你想起的务必是知，只是你的意识让你误以为，你的记忆想起的只是你意识里认识的那个东西。这也是你想不起来小时候的事情的原因，因为那时候你只有感觉，没有语言，没有东西能与之对应，只有场景、触觉、味道、感觉等等非语言的非意识的东西，能让你想起来。这就是记忆的本质。只有在知的层面，你才能更好的记住一个东西，你必须凭借感觉，才能更好的去记忆。这一方面以后有空我会深究。</p><p>有答主说，知是你做事情时脑子里会时不时闪过打游戏的念头，然而这因人而异，因每个人过去的行而不同。有些人从不打游戏，打游戏的人，上课上班的时候，在别的环境下，脑子并不会闪这种念头，只有在家才会这样，因为之前的行导致的这样。</p><p>那些道理只能指引你的某些特定情况，如果你仔细体悟我所说的东西就明白了，我说的思维模型，才是你每时每刻遵循的规律。当你仔细考虑， 产生了对这种规律的知，以后你时不时就会想起我的话，时间越长，你的体悟越深。任何只适用于某个人，某种特殊情况，某个环境的一些道理，只能对应你一时的规律，看似正确，但只是在这个规律里，对某种特殊情况，找到了好像正确的解一样。</p><p>好吧我再多说一点，如果你实在想不通，可能是你对自己最大的误解，是以为记忆跟时间有关系，其实没关系，遗忘的唯一原因是替代。时间是你的意识创造出的一种概念，是和语言一样的一种工具。世间万物遵循的是自己的简单的运行模式，然后不断循环。你也是世间万物的一部分，你的规律绝对不会是用你创造出来的这个概念来解释的。身体有时间概念吗？它会巧妙准确的按照时间来运行？不可能的，它只是按照自己的模式而已。</p><p>当你有了新欢来替代深爱过的前任，你想起他来就不难受了，明明之前爱的死去活来，被替代之后，就无感了。你看到一个东西，并不会想起曾经所有有关这个东西的知，因为你只会想起来上次。你能回忆久远的事情，是因为你有意识，有对应的知能让你找到，比如说你几年级，或者说初中的时候，这个“几年级”、“初中”，就是能对应到那时候的媒介，跟你说几几年你却未必能想起来，因为这个媒介没有对应的信息。很多事情你没有忘记，只是没有想起来，遇到与之关联的信息你就会想起来。某一刻有些东西你看一眼就瞬间记住了，那是因为那一刻你有特殊的感觉，有一种格外的清晰的知，这种感觉，能与未来的你对应。你会骑自行车，这辈子都会，不是隔几年就忘记了。你永远不可能忘记一个人，那些在痛苦中苦苦追问怎么忘掉一个人的，是想要自己想起来那个人，却再也没有之前心动的感觉，ta对那个人的知，需要被替代才能被治好，所有的有效的疗法都遵循这一规律。常说的时间和新欢疗法，新欢是直接替代，时间是因为你偶尔做别的事情，去行的时候，改变了你们之前点点滴滴对应的知，本来这些点点滴滴让你回忆起ta，但是这次你面对这个媒介，想起来ta了，但是你这次在做别的事情了 ，毕竟ta不在身边了，痛苦但是你还是会行，会因为各种原因要去行，比如有人拉你打游戏，比如今天任务很多要带回家做，比如快考试了必须要复习，做了这些新的行，你的点点滴滴里，下一次就让你没这么难受。</p><p>你一定要大胆的敢反思自己，敢反思自己的一切常识，才能找到自己的规律。如果你有认真思考，将来突然有了奇妙的感觉，希望能来找我，给我个反馈。</p><p>我觉得有必要再来强调一遍。知是感觉，是一片汪洋大海，你的意识、你以为的思维，只是这片汪洋大海中的一部分，能被你更好的感知的一部分，你觉得自己复杂，是因为过去的行的积累，你过去学说话写字，不停的去经历去行，才有了现在的你。是感觉控制着你的行为，不管你的喜怒哀乐，还是你的欲望，都是感觉。意识和语言只是这种感觉的表达，比这种感觉低一层，而且它带着各种动机，各种目的，并不准确，还让你深陷其中，察觉不到背后的那种感觉。</p><p>我也忘记上面有没有提到，自身的状态、感觉，也是一种媒介，也会有一一对应的信息。所谓一念发动处，便即是行，你思考的过程本身也是一种行。悲伤的时候，你会突然想起之前的伤心事。有时候午夜梦回，突然觉得曾经很对不起某个人，做过很过分的事儿，也会突然幡然醒悟，自己曾经的某件事做错了。</p><p>记忆的情绪依赖性：如果记忆时很高兴，那么在高兴时，测试出来的成绩，比在难过时的成绩更好；当然，如果记忆时很难过，那么在难过时，测试出来的成绩，比在高兴时的成绩更好。</p><p>所以，如果平时，父母打得你一边哭一边背书，在考试中，你不妨一边哭哭啼啼，一边做题，有可能分数会更高哦！</p><p>记忆的情境依赖性：在小房间里记忆，然后一些人在大房间内测试，另一些人在小房间内测试，结果小房间内测试的人，成绩会更好。</p><p>所以，如果考试时换了教室，没考好是正常的。不怪你，不怪老师，怪教室!</p><p>集中在一个时间内，将所要学习的材料连续反复学习多次，直到熟记为止，这种方式称为集中学习；把所要学习的材料分散在几段有一定间隔的时间段进行学习，这叫分散学习。实验表明:分散学习优于集中学习。</p><p>所以，要让记忆摆脱对情绪和情境的依赖，最好就是变集中学习为分散学习，让记忆过程在时间和空间上，跨越各种情绪和各种情境! </p><p>相同的情绪、相同的情境，更容易让你回忆起来，是不是满足了感觉的一一对应？加上我前面说过的，你回忆起来的其实是感觉，是知，只是你单独从那个知的场景里，取出了你要的文字而已，不代表回忆就只有那些文字。最后说的分散学习，原理就是通过这样分散的行，让想要记住的东西，脱离环境状态，而转化成长久记忆的那种感觉。那种感觉是什么样的，该如何描述，我没有深究过，大概只有随意的运用自己的知，随意的创造感觉才行，要是现在我还在上学，可能此刻这个问题就解决了，可是我早就不用背书了……补充个例子，我当初上学的时候做过实验，突然想起来。做完数学卷子，我问同学，你能按顺序把刚才写过的答案背下来吗？他想了想说不能。于是我给了他一张一模一样的空白卷子，他看到题目根本没有计算，就把试卷做完了。</p><p>不管是生活中，还是学习中，都离不开知行合一，它都有用武之地，不是某一刻某件事情，或者某些事情，是所有事情，任何事情，你都身处其中。希望你早日体会到，早日能用这个模型去解释眼前的事情。</p><p>然后，王先生为什么，说要致良知？因为知行合一是你运行的规律，它里面没有善恶。就更不要说本性善恶之类的了，地球上某些地方，那些孩子做出一些恐怖的事情，眼睛都不眨一下。为什么这样呢？因为他本身就没感觉，有感觉的是你。是你看到那些事情有感觉。</p><p>你经历的失望和苦难，给你了共情的能力，看到对应的情况，你就有怜悯之心。但是不是每个人都有，有些人是麻木的。某些事情你也有麻木，有理解不了，感受不到的情况。你所抵触的，当你去做了之后，下一次就不会了。所以说，出轨有第一次就有第二次。第一次发生之前，人是很抵触的，是有道德约束，责任感约束等等，是有一种知、一种感觉的束缚的，但是它只是某一刻，如果欲望的知更强烈，一旦做了，第二次的时候，会发现也就这样，没什么感觉，天不会塌地不会陷，跟吃饭睡觉一样感觉很平常。极端一点，你要是刻意违背目前的充满怜悯之心的知，你能把自己变成一个杀人不眨眼的恶魔，别人看着恐怖的事情，你做起来没感觉。</p><p>所以王先生要我们，一定要有良知。</p><p>王先生自小心中就有一颗敢于怀疑一切的种子，他敢于怀疑当时社会的意识形态，怀疑当时大家的共识，甚至怀疑千古圣人的学说。他的悟道，某种程度上来说，是这颗种子长时间以来的开花结果。但是，他也自小就想要当圣人，良知在他的灵魂深处枝繁叶茂，他是个善良的人，也教导我们要善良。那句此心光明，亦复何言，真让人动容。</p><p>我知道的确有人看完也体会不到我说的感觉到底是什么，那是一瞬间的感觉，但是那一个瞬间，你可能要用一句话或者几句话去描述那种感觉，实在体会不到就从我讲知那里再看看。不过只要你对这个问题有强烈的好奇，以后也会在某个瞬间突然顿悟的。</p><p>不要觉得小孩子是憨批，凡是能给他们特殊感觉的事情，他们将来都会后知后觉的想起来的。不信你去搜搜小时候回忆的话题看看，记得自己还在吃奶的时候的事情的大有人在，甚至有人记得还在妈妈肚子里的感觉，对这个我表示实在想不通也理解不了·····不过记得小时候的事情的是真的很多很多。印象深刻的是有个答主的朋友，两岁被爸爸的朋友猥亵，看到成年人丑陋的下体，极度震惊，于是记住了那一刻。到后来长大后，后知后觉，知道自己曾经被猥亵了。不要把小孩子当憨批去教育，你只是比他运行久一点，比他高级一点而已，你留下的疤痕，留下的阴影，有些真的是不可逆转也无法抹去的。记住，感觉对应到了都能想起来，一一对应的是感觉。</p><p>另外，我举过的那个听歌的例子。找一首以前听过的，但是很久没听的，听了能体会到当初听的感觉。但是你现在听了之后，下次就难体会到那种感觉了，会被你现在听歌时候的感觉替代。童年还有过去的美好，有些东西是一次性的，想起来了反而会被忘记。有时你把自己的经历拿出来跟别人讲一遍，事后会觉得自己好像淡忘了那段经历。当你为了装b或者其它目的一直把一段经历讲了又讲，会觉得自己像个旁观者，脑子空白的在用喉咙说话，却根本体会不到自己当初经历时候的状态、心境。甚至，那段记忆会慢慢变成你为了眼前的目的而修饰的样子（为了给对应的人树立形象或者隐瞒什么秘密之类的），很多细节被你改了，但是你自己也没发现，你觉得就是那样的。把一段回忆掏出来，反而是为了遗忘，这一点有时候令我很悲伤。</p><p>我本不该举那么多例子，本来随着你的经历，很多东西自己也能体会到，我只是提前说出来了。而且每个人经历不同，你们每个人会结合自身，迸发出各种奇妙的想法，有些肯定连我也做梦都没想到过。也因为每个人经历不同，可能对有些例子没感觉，有些却更好共情，这也是我不删的原因。就这样了，望诸君务必做个好人，务必。</p><p>知行合一是规律，是反驳前人将知行分开的观点，是告诉人们，有什么样的行就有什么样的知。不是做到知行合一，知行本一体，你要做的是致良知。真正的精髓和方向是致良知。等你真的做到致良知，你现在渴望的，那时就不再渴望，有些事情不做也并不会不舒服，比如世间的各种诱惑。看到这，以后你已经不会再轻易的困惑或者迷茫，你会变得强大，会有自己的屠龙枝。希望你坚守本心，不要成为恶龙。</p><p>龙死了，屠龙的少年不成为恶龙，也会快乐吗？</p><p>那些会成为恶龙的人，自己觉得你不快乐， 其实你根本不是他们所能度量的。</p><p>有同学不明白我这一更的意思，我再举个栗子，小朋友的欲望在于各种玩偶玩具，他觉得你没玩具不快乐，实际上你对玩具没感觉。我说直白点就是，你身居高位也不必陷入各种诱惑的深渊，只要你克制自己的那种知，然后那些对你来说就不再是诱惑。借用评论区的话，只要你有良知，杀人剑在你手里也只是切菜刀。任何人都能成为圣人。</p><p>这个答案两极分化很严重。看懂的人觉得透彻简单，看不懂的人说我讲的复杂，理解到哪儿去的都有。不管你们称我说的那个感觉是潜意识，还是认知模型，还是第一性，还是人的本质，还是情绪，还是原始感知，我能感觉到你们语言背后的知，我知道你们在跟我描述同一个东西。但是还有一些人，一看就是根本没看。我讲的也不是复杂的东西，一万多字讲的只是一个简单的道理，全篇在用语言尽量客观细致入微的给你传达言外之意。这背后包含了太多东西。所以不要跳着看一眼就说“能一句话总结一下吗”之类的，我要是就放一句话或者一张图在这，你能得到和现在一样的信息吗？今天我发现，我在让一千个人眼里的一千个哈姆雷特，从另一个维度统一。这篇文章没有我的总结，总结在你自己那，你们每个人 把它表达出来用的文字都不一样，但是同志之间能看明白，其他人看了也不知道你说的什么东西。然后，如果你看到这，也看懂了，我们就是同志了。人与人之间，有着难以逾越的沟渠，犹如泰戈尔的那首诗：《世界上最遥远的距离》，鲁迅先生也说过：“我只觉得他们吵闹”。有些东西，只有同志才能理解你，你跟人面对面都说不清。或许你知道自己想了什么，却根本不知道我讲了什么。</p><p>以上观点源于互联网收集，略带个人主观色彩，可作为认知理解的一个参考方向。</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>去除脑海中的噪音，观察到自己的真实想法。</li><li>通过行动改变自己。</li><li>让自己朝着自认为正确的方向转变</li><li>不断否定新的自己，继续朝着新的自己转变</li><li>直到最后成为自己，于是没有自己</li><li>因此自我的边界被打破，心无内外，贯通天地。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Metaverse</title>
      <link href="/posts/9e856764.html"/>
      <url>/posts/9e856764.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-源起"><a href="#1-源起" class="headerlink" title="1.源起"></a>1.源起</h3><p>Metaverse 一词由前缀 meta 和词根 verse 组成，直译而来便是元宇宙。这一概念最早出自于<a href="https://baike.baidu.com/item/%E5%B0%BC%E5%B0%94%C2%B7%E6%96%AF%E8%92%82%E8%8A%AC%E6%A3%AE/3643531">尼尔·斯蒂芬森</a> 1992 年出版的科幻小说《<a href="https://baike.baidu.com/item/%E9%9B%AA%E5%B4%A9/6877078">雪崩</a>》(Snow Crash)，指在一个脱离于物理世界，却始终在线的平行<a href="https://baike.baidu.com/item/%E8%B5%9B%E5%8D%9A%E6%9C%8B%E5%85%8B">赛博朋克风</a>数字世界中，人们能够在其中以虚拟人物角色 (<a href="https://baike.baidu.com/item/%E9%98%BF%E5%87%A1%E8%BE%BE/32205?fromtitle=Avatar&fromid=17843">Avatar</a>) 自由生活。</p><p><img src="https://i.loli.net/2021/11/21/7wmWDuyCz5X3NBa.jpg"></p><h3 id="2-什么是元宇宙"><a href="#2-什么是元宇宙" class="headerlink" title="2.什么是元宇宙"></a>2.什么是元宇宙</h3><p><a href="https://baike.baidu.com/item/%E5%85%83%E5%AE%87%E5%AE%99/58292530">元宇宙</a>这个词源于 1992 年尼尔·斯蒂芬森的《雪崩》，这本书描述了一个平行于现实世界的虚拟世界，Metaverse，所有现实生活中的人都有一个网络分身 Avatar。维基百科对元宇宙的描述是：通过虚拟增强的物理现实，呈现收敛性和物理持久性特征的，基于未来互联网，具有链接感知和共享特征的 3D 虚拟空间。</p><p>正如电影《<a href="https://movie.douban.com/subject/4920389/">头号玩家</a>》的场景，在未来的某一天，人们可以随时随地切换身份，自由穿梭于物理世界和数字世界，在虚拟空间和时间节点所构成的元宇宙中学习、工作、交友、购物、旅游等。元宇宙，这个建立在区块链之上的虚拟世界，去中心化平台让玩家享有所有权和自治权。通过沉浸式的体验，让虚拟进一步接近现实，或许元宇宙便是人类转折的<a href="https://baike.baidu.com/item/%E6%8A%80%E6%9C%AF%E5%A5%87%E7%82%B9/1101342">科技奇异点</a>。</p><p><img src="https://i.loli.net/2021/11/21/2NmdyMefowCFvR3.jpg"></p><h3 id="3-元宇宙发展历程"><a href="#3-元宇宙发展历程" class="headerlink" title="3.元宇宙发展历程"></a>3.元宇宙发展历程</h3><ul><li><p>2020年4月，美国歌手Travis Scott在Epic Game旗下的《堡垒之夜》中举办了一场线上虚拟演唱会，吸引了超过1200万名玩家参加。Facebook也推出了VR社交平台Horizon，人们可以在其中创造世界，社交方式将不再局限于打字和语音。网易投资了类似于《第二人生》3D社交平台Imvu，专注于利用VR和3D技术创造虚拟世界的“现实社交”。2018年，美国科幻冒险片《头号玩家》中的虚拟世界“绿洲”就是“元宇宙”。</p></li><li><p>2021年3月10日，在线游戏创作平台Roblox作为“元宇宙”概念股成功登陆纽交所，上市首日市值突破400亿美元。而腾讯在2020年 2 月参投Roblox 1.5 亿美元 G 轮融资，并独家代理 Roblox 中国区产品发行。</p></li><li><p>2021年4月12日，英伟达CEO黄仁勋宣布英伟达将布局“元宇宙”业务；4月13日，美国游戏公司Epic Games宣布获得10亿美元融资，并声称此次融资主要用于开发“元宇宙”业务。此外，Facebook、微软、字节跳动等巨头也都对“元宇宙”进行投资。</p></li></ul><h3 id="4-元宇宙价值链"><a href="#4-元宇宙价值链" class="headerlink" title="4.元宇宙价值链"></a>4.元宇宙价值链</h3><p>元宇宙价值链，包括人们寻求的体验，到能够实现这种体验的科技。</p><p>价值链包括七个层面：</p><ol><li>体验（Experience）</li><li>发现（Discovery）</li><li>创作者经济（Creator economy）</li><li>空间计算（Spatial Computing）</li><li>去中心化（Decentralizition）</li><li>人机交互（Human Interface）</li><li>基础设施（Infrastructure）</li></ol><p><img src="https://i.loli.net/2021/11/21/FmNDq2AS9btupxE.jpg"></p><h4 id="4-1-元宇宙的促进因素"><a href="#4-1-元宇宙的促进因素" class="headerlink" title="4.1.元宇宙的促进因素"></a>4.1.元宇宙的促进因素</h4><ol><li>天时：疫情加速了数字化迁徙的速度</li><li>地利：技术发展和用户增长成为元宇宙的基础</li><li>人和：个体的数字社交、创造需求和资本的投资需求同步高涨</li></ol><h3 id="5-元宇宙强调“第三空间”"><a href="#5-元宇宙强调“第三空间”" class="headerlink" title="5.元宇宙强调“第三空间”"></a>5.元宇宙强调“第三空间”</h3><p>第三空间是指与家庭（第一空间）和工作场所（第二空间）分开的一类社会环境，比如咖啡厅、图书馆等场所。第三空间既包括实体的活动场所，也包括虚拟的网络世界。</p><p>适用于：游戏、社交、消费、房地产、旅游、建筑、工程和设计、学习与教育、沉浸式物理世界</p><h3 id="6-虚拟世界项目集锦"><a href="#6-虚拟世界项目集锦" class="headerlink" title="6.虚拟世界项目集锦"></a>6.虚拟世界项目集锦</h3><p>目前虚拟世界项目包括 The Sandbox、Decentraland、Somnium Space、Dream Card、Axie Infinity 和 Cryptovoxels 等。</p><ul><li><p><strong>The Sandbox</strong> Pixowl 于 2011 年推出，通过引入 SAND 实用代币，允许用户以游戏的形式创建、构建、购买和销售数字资产。</p></li><li><p><strong>Decentraland</strong> 一个由以太坊区块链提供支持的虚拟现实平台，允许用户创建、体验内容和应用程序，并将其货币化。</p></li><li><p><strong>Axie Infinity</strong> 一个数字宠物世界，可以在这个世界繁殖，饲养和交易称为 Axies 的幻想生物，还可以与其他玩家战斗，通过战斗和完成任务获取游戏代币</p></li><li><p><strong>Minecraft</strong> 一款沙盒游戏，一个由方块组成的 3D 世界</p></li></ul><h3 id="7-尾巴"><a href="#7-尾巴" class="headerlink" title="7.尾巴"></a>7.尾巴</h3><blockquote><p>最一开始就已经有了语言，语言与神同在，语言就是神。<br>-《新约圣经·约翰福音》</p></blockquote><p> 语言创造世界，那么这个语言，很有可能就是计算机语言，那么这个世界就很有可能是代码创造而出，即<a href="https://baike.baidu.com/item/%E8%B4%B9%E7%B1%B3%E6%82%96%E8%AE%BA/10937023">费米悖论</a>的一种可能性。</p><p>故我们这个世界，很有可能便是一个宇宙的元宇宙，或许梦境才是真实的世界。</p><p>不管如何，时间会给出答案，so enjoy it!</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构笔记归档3</title>
      <link href="/posts/16f1827.html"/>
      <url>/posts/16f1827.html</url>
      
        <content type="html"><![CDATA[<h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><h3 id="1-图的基本概念"><a href="#1-图的基本概念" class="headerlink" title="1.图的基本概念"></a>1.图的基本概念</h3><p>在线性表中，数据元素之间是被串起来的，仅有线性关系，每个数据元素只有一个直接前驱和一个直接后继。在树形结构中，数据元素之间有着明显的层次关系，并且每一层上的数据元素可能和下一层中多个元素相关，但只能和上一层中一个元素相关。图是一种较线性表和树更加复杂的数据结构。在图形结构中，结点之间的关系可以是任意的，图中任意两个数据元素之间都可能相关。</p><ul><li><a href="https://blog.csdn.net/Real_Fool_/article/details/114141377">数据结构：图(Graph)详解 - CSDN</a></li></ul><h4 id="1-1-图的定义"><a href="#1-1-图的定义" class="headerlink" title="1.1.图的定义"></a>1.1.图的定义</h4><p>图(Graph)是一种非线性结构，其中的元素是多对多的关系。</p><p>图(Graph)是由非空的顶点的集合和描述顶点关系即边的集合组成。</p><h4 id="1-2-图的基本术语"><a href="#1-2-图的基本术语" class="headerlink" title="1.2.图的基本术语"></a>1.2.图的基本术语</h4><ul><li>有向图：边是有方向的图</li><li>无向图：边是无方向的图</li></ul><h3 id="2-图的存储结构"><a href="#2-图的存储结构" class="headerlink" title="2.图的存储结构"></a>2.图的存储结构</h3><h4 id="2-1-图的连接矩阵"><a href="#2-1-图的连接矩阵" class="headerlink" title="2.1.图的连接矩阵"></a>2.1.图的连接矩阵</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXVEX  100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> VertexType[<span class="number">3</span>];        <span class="comment">/*定义VertexType为char数组类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">vertex</span></span></span><br><span class="line"><span class="class">&#123;</span>    </span><br><span class="line">    <span class="keyword">int</span> adjvex;                 <span class="comment">/*顶点编号*/</span></span><br><span class="line">    VertexType data;             <span class="comment">/*顶点的信息*/</span></span><br><span class="line">&#125; VType;                        <span class="comment">/*顶点类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">graph</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> n,e;                    <span class="comment">/*n为实际顶点数,e为实际边数*/</span></span><br><span class="line">    VType vexs[MAXVEX];            <span class="comment">/*顶点集合*/</span></span><br><span class="line">    <span class="keyword">int</span> edges[MAXVEX][MAXVEX];    <span class="comment">/*边的集合*/</span></span><br><span class="line">&#125; AdjMatix;                        <span class="comment">/*图的邻接矩阵类型*/</span></span><br></pre></td></tr></table></figure><h4 id="2-2-图的连接表"><a href="#2-2-图的连接表" class="headerlink" title="2.2.图的连接表"></a>2.2.图的连接表</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXVEX 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> VertexType[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">edgenode</span></span></span><br><span class="line"><span class="class">&#123;</span>    </span><br><span class="line">    <span class="keyword">int</span> adjvex;                  <span class="comment">/*邻接点序号*/</span></span><br><span class="line">    <span class="keyword">int</span> value;                  <span class="comment">/*边的权值*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">edgenode</span> *<span class="title">next</span>;</span>        <span class="comment">/*下一条边的顶点*/</span></span><br><span class="line">&#125; ArcNode;                        <span class="comment">/*每个顶点建立的单链表中结点的类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">vexnode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    VertexType data;               <span class="comment">/*结点信息*/</span></span><br><span class="line">    ArcNode *firstarc;             <span class="comment">/*指向第一条边结点*/</span></span><br><span class="line">&#125; VHeadNode;                    <span class="comment">/*单链表的头结点类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> n,e;                    <span class="comment">/*n为实际顶点数,e为实际边数*/</span></span><br><span class="line">    VHeadNode adjlist[MAXVEX];    <span class="comment">/*单链表头结点数组*/</span></span><br><span class="line">&#125; AdjList;                         <span class="comment">/*图的邻接表类型*/</span></span><br></pre></td></tr></table></figure><h3 id="3-图的遍历"><a href="#3-图的遍历" class="headerlink" title="3.图的遍历"></a>3.图的遍历</h3><h4 id="3-1-广度优先搜索"><a href="#3-1-广度优先搜索" class="headerlink" title="3.1.广度优先搜索"></a>3.1.广度优先搜索</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 邻接矩阵存储的图 - BFS */</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/* IsEdge(Graph, V, W)检查&lt;V, W&gt;是否图Graph中的一条边，即W是否V的邻接点。  */</span></span><br><span class="line"><span class="comment">/* 此函数根据图的不同类型要做不同的实现，关键取决于对不存在的边的表示方法。*/</span></span><br><span class="line"><span class="comment">/* 例如对有权图, 如果不存在的边被初始化为INFINITY, 则函数实现如下:         */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsEdge</span><span class="params">( MGraph Graph, Vertex V, Vertex W )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Graph-&gt;G[V][W]&lt;INFINITY ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* Visited[]为全局变量，已经初始化为false */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span> <span class="params">( MGraph Graph, Vertex S, <span class="keyword">void</span> (*Visit)(Vertex) )</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">/* 以S为出发点对邻接矩阵存储的图Graph进行BFS搜索 */</span></span><br><span class="line">    Queue Q;     </span><br><span class="line">    Vertex V, W;</span><br><span class="line"> </span><br><span class="line">    Q = CreateQueue( MaxSize ); <span class="comment">/* 创建空队列, MaxSize为外部定义的常数 */</span></span><br><span class="line">    <span class="comment">/* 访问顶点S：此处可根据具体访问需要改写 */</span></span><br><span class="line">    Visit( S );</span><br><span class="line">    Visited[S] = <span class="literal">true</span>; <span class="comment">/* 标记S已访问 */</span></span><br><span class="line">    AddQ(Q, S); <span class="comment">/* S入队列 */</span></span><br><span class="line">     </span><br><span class="line">    <span class="keyword">while</span> ( !IsEmpty(Q) ) &#123;</span><br><span class="line">        V = DeleteQ(Q);  <span class="comment">/* 弹出V */</span></span><br><span class="line">        <span class="keyword">for</span>( W=<span class="number">0</span>; W&lt;Graph-&gt;Nv; W++ ) <span class="comment">/* 对图中的每个顶点W */</span></span><br><span class="line">            <span class="comment">/* 若W是V的邻接点并且未访问过 */</span></span><br><span class="line">            <span class="keyword">if</span> ( !Visited[W] &amp;&amp; IsEdge(Graph, V, W) ) &#123;</span><br><span class="line">                <span class="comment">/* 访问顶点W */</span></span><br><span class="line">                Visit( W );</span><br><span class="line">                Visited[W] = <span class="literal">true</span>; <span class="comment">/* 标记W已访问 */</span></span><br><span class="line">                AddQ(Q, W); <span class="comment">/* W入队列 */</span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125; <span class="comment">/* while结束*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-深度优先搜索"><a href="#3-2-深度优先搜索" class="headerlink" title="3.2.深度优先搜索"></a>3.2.深度优先搜索</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 邻接表存储的图 - DFS */</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Visit</span><span class="params">( Vertex V )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;正在访问顶点%d\n&quot;</span>, V);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* Visited[]为全局变量，已经初始化为false */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">( LGraph Graph, Vertex V, <span class="keyword">void</span> (*Visit)(Vertex) )</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">/* 以V为出发点对邻接表存储的图Graph进行DFS搜索 */</span></span><br><span class="line">    PtrToAdjVNode W;</span><br><span class="line">     </span><br><span class="line">    Visit( V ); <span class="comment">/* 访问第V个顶点 */</span></span><br><span class="line">    Visited[V] = <span class="literal">true</span>; <span class="comment">/* 标记V已访问 */</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>( W=Graph-&gt;G[V].FirstEdge; W; W=W-&gt;Next ) <span class="comment">/* 对V的每个邻接点W-&gt;AdjV */</span></span><br><span class="line">        <span class="keyword">if</span> ( !Visited[W-&gt;AdjV] )    <span class="comment">/* 若W-&gt;AdjV未被访问 */</span></span><br><span class="line">            DFS( Graph, W-&gt;AdjV, Visit );    <span class="comment">/* 则递归访问之 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-有向图连接矩阵"><a href="#4-有向图连接矩阵" class="headerlink" title="4.有向图连接矩阵"></a>4.有向图连接矩阵</h3><h4 id="4-1-图的定义"><a href="#4-1-图的定义" class="headerlink" title="4.1.图的定义"></a>4.1.图的定义</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXVEX  100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> VertexType[<span class="number">3</span>];        <span class="comment">/*定义VertexType为char数组类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">vertex</span></span></span><br><span class="line"><span class="class">&#123;</span>    </span><br><span class="line">    <span class="keyword">int</span> adjvex;                 <span class="comment">/*顶点编号*/</span></span><br><span class="line">    VertexType data;             <span class="comment">/*顶点的信息*/</span></span><br><span class="line">&#125; VType;                        <span class="comment">/*顶点类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">graph</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> n,e;                    <span class="comment">/*n为实际顶点数,e为实际边数*/</span></span><br><span class="line">    VType vexs[MAXVEX];            <span class="comment">/*顶点集合*/</span></span><br><span class="line">    <span class="keyword">int</span> edges[MAXVEX][MAXVEX];    <span class="comment">/*边的集合*/</span></span><br><span class="line">&#125; AdjMatix;                        <span class="comment">/*图的邻接矩阵类型*/</span></span><br></pre></td></tr></table></figure><h4 id="4-2-创建图"><a href="#4-2-创建图" class="headerlink" title="4.2.创建图"></a>4.2.创建图</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CreateMatix</span><span class="params">(AdjMatix &amp;g)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,k,b,t;</span><br><span class="line">    <span class="keyword">int</span> w;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;顶点数(n)和边数(e):&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;g.n,&amp;g.e);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;g.n;i++)</span><br><span class="line">    &#123;    </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;   序号为%d的顶点信息:&quot;</span>,i);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,g.vexs[i].data);</span><br><span class="line">        g.vexs[i].adjvex=i;        <span class="comment">/*顶点编号为i*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;g.n;i++)</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;g.n;j++)</span><br><span class="line">            g.edges[i][j]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (k=<span class="number">0</span>;k&lt;g.e;k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;   序号为%d的边=&gt;&quot;</span>,k);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  起点号 终点号 权值:&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;b,&amp;t,&amp;w);</span><br><span class="line">        <span class="keyword">if</span> (b&lt;g.n &amp;&amp; t&lt;g.n &amp;&amp; w&gt;<span class="number">0</span>)</span><br><span class="line">            g.edges[b][t]=w;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;输入错误!\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>(<span class="number">0</span>);        </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-列出图"><a href="#4-3-列出图" class="headerlink" title="4.3.列出图"></a>4.3.列出图</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispMatix</span><span class="params">(AdjMatix g)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n图的邻接矩阵:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;g.n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;g.n;j++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,g.edges[i][j]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-main"><a href="#4-4-main" class="headerlink" title="4.4.main"></a>4.4.main</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    AdjMatix g;</span><br><span class="line">    CreateMatix(g);</span><br><span class="line">    DispMatix(g);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-有向图连接链表"><a href="#5-有向图连接链表" class="headerlink" title="5.有向图连接链表"></a>5.有向图连接链表</h3><h4 id="5-1-图的定义"><a href="#5-1-图的定义" class="headerlink" title="5.1.图的定义"></a>5.1.图的定义</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXVEX 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> VertexType[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">edgenode</span></span></span><br><span class="line"><span class="class">&#123;</span>    </span><br><span class="line">    <span class="keyword">int</span> adjvex;                  <span class="comment">/*邻接点序号*/</span></span><br><span class="line">    <span class="keyword">int</span> value;                  <span class="comment">/*边的权值*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">edgenode</span> *<span class="title">next</span>;</span>        <span class="comment">/*下一条边的顶点*/</span></span><br><span class="line">&#125; ArcNode;                        <span class="comment">/*每个顶点建立的单链表中结点的类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">vexnode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    VertexType data;               <span class="comment">/*结点信息*/</span></span><br><span class="line">    ArcNode *firstarc;             <span class="comment">/*指向第一条边结点*/</span></span><br><span class="line">&#125; VHeadNode;                    <span class="comment">/*单链表的头结点类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> n,e;                    <span class="comment">/*n为实际顶点数,e为实际边数*/</span></span><br><span class="line">    VHeadNode adjlist[MAXVEX];    <span class="comment">/*单链表头结点数组*/</span></span><br><span class="line">&#125; AdjList;                         <span class="comment">/*图的邻接表类型*/</span></span><br></pre></td></tr></table></figure><h4 id="5-2-创建图"><a href="#5-2-创建图" class="headerlink" title="5.2.创建图"></a>5.2.创建图</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CreateAdjList</span><span class="params">(AdjList *&amp;G)</span>    <span class="comment">/*建立有向图的邻接表*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,b,t,w;</span><br><span class="line">    ArcNode *p;</span><br><span class="line">    G=(AdjList *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(AdjList));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;顶点数(n),边数(e):&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;G-&gt;n,&amp;G-&gt;e);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;G-&gt;n;i++)</span><br><span class="line">    &#123;    </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;   序号为%d的顶点信息:&quot;</span>, i);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,G-&gt;adjlist[i].data);</span><br><span class="line">        G-&gt;adjlist[i].firstarc=<span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;G-&gt;e;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;   序号为边=&gt;&quot;</span>,i);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; 起点号 终点号 权值:&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;b,&amp;t,&amp;w);</span><br><span class="line">        <span class="keyword">if</span> (b&lt;G-&gt;n &amp;&amp; t&lt;G-&gt;n &amp;&amp; w&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            p=(ArcNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ArcNode));    <span class="comment">/*建立*p结点*/</span></span><br><span class="line">            p-&gt;value=w;p-&gt;adjvex=t;</span><br><span class="line">            p-&gt;next=G-&gt;adjlist[b].firstarc;     <span class="comment">/**p插入到adjlist[b]的单链表之首*/</span></span><br><span class="line">            G-&gt;adjlist[b].firstarc=p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;输入错误!\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>(<span class="number">0</span>);        </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-3-列出图"><a href="#5-3-列出图" class="headerlink" title="5.3.列出图"></a>5.3.列出图</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispAdjList</span><span class="params">(AdjList *G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    ArcNode *p;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;图的邻接表表示如下:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;G-&gt;n;i++)</span><br><span class="line">    &#123;    </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  [%d,%3s]=&gt;&quot;</span>,i,G-&gt;adjlist[i].data);</span><br><span class="line">        p=G-&gt;adjlist[i].firstarc;</span><br><span class="line">        <span class="keyword">while</span> (p!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;    </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;(%d,%d)-&gt;&quot;</span>,p-&gt;adjvex,p-&gt;value);</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;∧\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-4-main"><a href="#5-4-main" class="headerlink" title="5.4.main"></a>5.4.main</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    AdjList *G;</span><br><span class="line">    CreateAdjList(G);</span><br><span class="line">    DispAdjList(G);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-图的基本运算-By-Go"><a href="#6-图的基本运算-By-Go" class="headerlink" title="6.图的基本运算(By-Go)"></a>6.图的基本运算(By-Go)</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Package graph creates a ItemGraph data structure for the Item type</span></span><br><span class="line"><span class="keyword">package</span> graph</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Item the type of the binary search tree</span></span><br><span class="line"><span class="keyword">type</span> Item <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Node a single node that composes the tree</span></span><br><span class="line"><span class="keyword">type</span> Node <span class="keyword">struct</span> &#123;</span><br><span class="line">    value Item</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *Node)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;%v&quot;</span>, n.value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ItemGraph the Items graph</span></span><br><span class="line"><span class="keyword">type</span> ItemGraph <span class="keyword">struct</span> &#123;</span><br><span class="line">    nodes []*Node</span><br><span class="line">    edges <span class="keyword">map</span>[Node][]*Node</span><br><span class="line">    lock  sync.RWMutex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AddNode adds a node to the graph</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *ItemGraph)</span> <span class="title">AddNode</span><span class="params">(n *Node)</span></span> &#123;</span><br><span class="line">    g.lock.Lock()</span><br><span class="line">    g.nodes = <span class="built_in">append</span>(g.nodes, n)</span><br><span class="line">    g.lock.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AddEdge adds an edge to the graph</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *ItemGraph)</span> <span class="title">AddEdge</span><span class="params">(n1, n2 *Node)</span></span> &#123;</span><br><span class="line">    g.lock.Lock()</span><br><span class="line">    <span class="keyword">if</span> g.edges == <span class="literal">nil</span> &#123;</span><br><span class="line">        g.edges = <span class="built_in">make</span>(<span class="keyword">map</span>[Node][]*Node)</span><br><span class="line">    &#125;</span><br><span class="line">    g.edges[*n1] = <span class="built_in">append</span>(g.edges[*n1], n2)</span><br><span class="line">    g.edges[*n2] = <span class="built_in">append</span>(g.edges[*n2], n1)</span><br><span class="line">    g.lock.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AddEdge adds an edge to the graph</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *ItemGraph)</span> <span class="title">String</span><span class="params">()</span></span> &#123;</span><br><span class="line">    g.lock.RLock()</span><br><span class="line">    s := <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(g.nodes); i++ &#123;</span><br><span class="line">        s += g.nodes[i].String() + <span class="string">&quot; -&gt; &quot;</span></span><br><span class="line">        near := g.edges[*g.nodes[i]]</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="built_in">len</span>(near); j++ &#123;</span><br><span class="line">            s += near[j].String() + <span class="string">&quot; &quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        s += <span class="string">&quot;\n&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(s)</span><br><span class="line">    g.lock.RUnlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Traverse implements the BFS traversing algorithm</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *ItemGraph)</span> <span class="title">Traverse</span><span class="params">(f <span class="keyword">func</span>(*Node)</span>)</span> &#123;</span><br><span class="line">    g.lock.RLock()</span><br><span class="line">    q := NodeQueue&#123;&#125;</span><br><span class="line">    q.New()</span><br><span class="line">    n := g.nodes[<span class="number">0</span>]</span><br><span class="line">    q.Enqueue(*n)</span><br><span class="line">    visited := <span class="built_in">make</span>(<span class="keyword">map</span>[*Node]<span class="keyword">bool</span>)</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> q.IsEmpty() &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        node := q.Dequeue()</span><br><span class="line">        visited[node] = <span class="literal">true</span></span><br><span class="line">        near := g.edges[*node]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(near); i++ &#123;</span><br><span class="line">            j := near[i]</span><br><span class="line">            <span class="keyword">if</span> !visited[j] &#123;</span><br><span class="line">                q.Enqueue(*j)</span><br><span class="line">                visited[j] = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> f != <span class="literal">nil</span> &#123;</span><br><span class="line">            f(node)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    g.lock.RUnlock()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-图的遍历"><a href="#7-图的遍历" class="headerlink" title="7.图的遍历"></a>7.图的遍历</h3><p>给定一个图G=(V,E)和V(G)中的任一顶点v，从v出发，顺着G的边访问G中的所有顶点，且每个顶点仅被访问一次，这一过程称为遍历图。</p><p>一般设置一个辅助数组visited[]，用来标记顶点是否被访问过，初始状态为0，访问过则设置为1。</p><h4 id="7-1-广度优先遍历"><a href="#7-1-广度优先遍历" class="headerlink" title="7.1.广度优先遍历"></a>7.1.广度优先遍历</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXVEX 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> VertexType[<span class="number">3</span>];        <span class="comment">/*定义VertexType为char数组类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">vertex</span></span></span><br><span class="line"><span class="class">&#123;</span>    </span><br><span class="line">    <span class="keyword">int</span> adjvex;                     <span class="comment">/*顶点编号*/</span></span><br><span class="line">    VertexType data;             <span class="comment">/*顶点的信息*/</span></span><br><span class="line">&#125; VType;                        <span class="comment">/*顶点类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">graph</span></span></span><br><span class="line"><span class="class">&#123;</span>    </span><br><span class="line">    <span class="keyword">int</span> n,e;                    <span class="comment">/*n为实际顶点数,e为实际边数*/</span></span><br><span class="line">    VType vexs[MAXVEX];            <span class="comment">/*顶点集合*/</span></span><br><span class="line">    <span class="keyword">int</span> edges[MAXVEX][MAXVEX];    <span class="comment">/*边的集合*/</span></span><br><span class="line">&#125; AdjMatix;                        <span class="comment">/*图的邻接矩阵类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">edgenode</span></span></span><br><span class="line"><span class="class">&#123;</span>    </span><br><span class="line">    <span class="keyword">int</span> adjvex;                  <span class="comment">/*邻接点序号*/</span></span><br><span class="line">    <span class="keyword">int</span> value;                  <span class="comment">/*边的权值*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">edgenode</span> *<span class="title">next</span>;</span>        <span class="comment">/*下一条边的顶点*/</span></span><br><span class="line">&#125; ArcNode;                        <span class="comment">/*每个顶点建立的单链表中结点的类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">vexnode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    VertexType data;               <span class="comment">/*结点信息*/</span></span><br><span class="line">    ArcNode *firstarc;             <span class="comment">/*指向第一条边结点*/</span></span><br><span class="line">&#125; VHeadNode;                    <span class="comment">/*单链表的头结点类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> n,e;                    <span class="comment">/*n为实际顶点数,e为实际边数*/</span></span><br><span class="line">    VHeadNode adjlist[MAXVEX];    <span class="comment">/*单链表头结点数组*/</span></span><br><span class="line">&#125; AdjList;                         <span class="comment">/*图的邻接表类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispAdjList</span><span class="params">(AdjList *G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    ArcNode *p;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;图的邻接表表示如下:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;G-&gt;n;i++)</span><br><span class="line">    &#123;    </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  [%d,%3s]=&gt;&quot;</span>,i,G-&gt;adjlist[i].data);</span><br><span class="line">        p=G-&gt;adjlist[i].firstarc;</span><br><span class="line">        <span class="keyword">while</span> (p!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;    </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;(%d,%d)-&gt;&quot;</span>,p-&gt;adjvex,p-&gt;value);</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;∧\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MatToList</span><span class="params">(AdjMatix g,AdjList *&amp;G)</span>  <span class="comment">/*例6.3算法:将邻接矩阵g转换成邻接表G*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    ArcNode *p;</span><br><span class="line">    G=(AdjList *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(AdjList));</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;g.n;i++)                    <span class="comment">/*给邻接表中所有头结点的指针域置初值*/</span></span><br><span class="line">    &#123;    </span><br><span class="line">        G-&gt;adjlist[i].firstarc=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="built_in">strcpy</span>(G-&gt;adjlist[i].data,g.vexs[i].data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;g.n;i++)                    <span class="comment">/*检查邻接矩阵中每个元素*/</span></span><br><span class="line">        <span class="keyword">for</span> (j=g.n<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line">            <span class="keyword">if</span> (g.edges[i][j]!=<span class="number">0</span>)        <span class="comment">/*邻接矩阵的当前元素不为0*/</span></span><br><span class="line">            &#123;</span><br><span class="line">                p=(ArcNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ArcNode));<span class="comment">/*创建一个结点*p*/</span></span><br><span class="line">                p-&gt;value=g.edges[i][j];p-&gt;adjvex=j;</span><br><span class="line">                p-&gt;next=G-&gt;adjlist[i].firstarc;          <span class="comment">/*将*p链到链表后*/</span></span><br><span class="line">                G-&gt;adjlist[i].firstarc=p;</span><br><span class="line">            &#125;</span><br><span class="line">    G-&gt;n=g.n;G-&gt;e=g.e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(AdjList *G,<span class="keyword">int</span> vi)</span>        <span class="comment">/*对邻接表g从顶点vi开始进行广宽优先遍历*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,v,visited[MAXVEX];</span><br><span class="line">    <span class="keyword">int</span> Qu[MAXVEX],front=<span class="number">0</span>,rear=<span class="number">0</span>;        <span class="comment">/*循环队列*/</span></span><br><span class="line">    ArcNode *p;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;G-&gt;n;i++)                <span class="comment">/*给visited数组置初值0*/</span></span><br><span class="line">        visited[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,vi);                    <span class="comment">/*访问初始顶点*/</span></span><br><span class="line">    visited[vi]=<span class="number">1</span>;                        <span class="comment">/*置已访问标识*/</span></span><br><span class="line">    rear=(rear=<span class="number">1</span>)%MAXVEX;                <span class="comment">/*循环移动队尾指针*/</span></span><br><span class="line">    Qu[rear]=vi;                        <span class="comment">/*初始顶点进队*/</span></span><br><span class="line">    <span class="keyword">while</span> (front!=rear)                    <span class="comment">/*队列不为空时循环*/</span></span><br><span class="line">    &#123;    </span><br><span class="line">        front=(front+<span class="number">1</span>) % MAXVEX;</span><br><span class="line">        v=Qu[front];                    <span class="comment">/*顶点v出队*/</span></span><br><span class="line">        p=G-&gt;adjlist[v].firstarc;        <span class="comment">/*找v的第一个邻接点*/</span></span><br><span class="line">        <span class="keyword">while</span> (p!=<span class="literal">NULL</span>)                    <span class="comment">/*找v的所有邻接点*/</span></span><br><span class="line">        &#123;    </span><br><span class="line">            <span class="keyword">if</span> (visited[p-&gt;adjvex]==<span class="number">0</span>)    <span class="comment">/*未访问过则访问之*/</span></span><br><span class="line">            &#123;</span><br><span class="line">                visited[p-&gt;adjvex]=<span class="number">1</span>;    <span class="comment">/*置已访问标识*/</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,p-&gt;adjvex);<span class="comment">/*访问该点并使之入队列*/</span></span><br><span class="line">                rear=(rear+<span class="number">1</span>) % MAXVEX;    <span class="comment">/*循环移动队尾指针*/</span></span><br><span class="line">                Qu[rear]=p-&gt;adjvex;        <span class="comment">/*顶点p-&gt;adjvex进队*/</span></span><br><span class="line">            &#125;</span><br><span class="line">            p=p-&gt;next;                    <span class="comment">/*找v的下一个邻接点*/</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    AdjMatix g;</span><br><span class="line">    AdjList *G;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">5</span>][<span class="number">5</span>]=&#123; &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125; &#125;;</span><br><span class="line">    <span class="keyword">char</span> *vname[MAXVEX]=&#123;<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>&#125;;</span><br><span class="line">    g.n=<span class="number">5</span>;g.e=<span class="number">12</span>;    <span class="comment">/*建立图6.1(a)的无向图,每1条无向边算为2条有向边*/</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;g.n;i++)</span><br><span class="line">        <span class="built_in">strcpy</span>(g.vexs[i].data,vname[i]);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;g.n;i++)</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;g.n;j++)</span><br><span class="line">            g.edges[i][j]=a[i][j];</span><br><span class="line">    MatToList(g,G);        <span class="comment">/*生成邻接表*/</span></span><br><span class="line">    DispAdjList(G);        <span class="comment">/*输出邻接表*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;从顶点0的广度优先遍历序列:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\t&quot;</span>);BFS(G,<span class="number">0</span>);<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-2-深度优先遍历"><a href="#7-2-深度优先遍历" class="headerlink" title="7.2.深度优先遍历"></a>7.2.深度优先遍历</h4><ul><li>从图G中某个顶点vi出发，访问vi，然后选择一个与vi相邻且没有被访问过的顶点v访问，再从v出发选择一个与v相邻且未被访问的顶点vj访问，依次访问。</li><li>如果当前已被访问的顶点的所有邻接顶点都已被访问，则回退到已被访问的顶点序列中最后一个拥有未被访问的相邻顶点w，从w出发按相同的方法继续遍历，直到所有的顶点都被访问到。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXVEX 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> VertexType[<span class="number">3</span>];        <span class="comment">/*定义VertexType为char数组类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">vertex</span></span></span><br><span class="line"><span class="class">&#123;</span>    </span><br><span class="line">    <span class="keyword">int</span> adjvex;                     <span class="comment">/*顶点编号*/</span></span><br><span class="line">    VertexType data;             <span class="comment">/*顶点的信息*/</span></span><br><span class="line">&#125; VType;                        <span class="comment">/*顶点类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">graph</span></span></span><br><span class="line"><span class="class">&#123;</span>    </span><br><span class="line">    <span class="keyword">int</span> n,e;                    <span class="comment">/*n为实际顶点数,e为实际边数*/</span></span><br><span class="line">    VType vexs[MAXVEX];            <span class="comment">/*顶点集合*/</span></span><br><span class="line">    <span class="keyword">int</span> edges[MAXVEX][MAXVEX];    <span class="comment">/*边的集合*/</span></span><br><span class="line">&#125; AdjMatix;                        <span class="comment">/*图的邻接矩阵类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">edgenode</span></span></span><br><span class="line"><span class="class">&#123;</span>    </span><br><span class="line">    <span class="keyword">int</span> adjvex;                  <span class="comment">/*邻接点序号*/</span></span><br><span class="line">    <span class="keyword">int</span> value;                  <span class="comment">/*边的权值*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">edgenode</span> *<span class="title">next</span>;</span>        <span class="comment">/*下一条边的顶点*/</span></span><br><span class="line">&#125; ArcNode;                        <span class="comment">/*每个顶点建立的单链表中结点的类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">vexnode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    VertexType data;               <span class="comment">/*结点信息*/</span></span><br><span class="line">    ArcNode *firstarc;             <span class="comment">/*指向第一条边结点*/</span></span><br><span class="line">&#125; VHeadNode;                    <span class="comment">/*单链表的头结点类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> n,e;                    <span class="comment">/*n为实际顶点数,e为实际边数*/</span></span><br><span class="line">    VHeadNode adjlist[MAXVEX];    <span class="comment">/*单链表头结点数组*/</span></span><br><span class="line">&#125; AdjList;                         <span class="comment">/*图的邻接表类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispAdjList</span><span class="params">(AdjList *G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    ArcNode *p;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;图的邻接表表示如下:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;G-&gt;n;i++)</span><br><span class="line">    &#123;    </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  [%d,%3s]=&gt;&quot;</span>,i,G-&gt;adjlist[i].data);</span><br><span class="line">        p=G-&gt;adjlist[i].firstarc;</span><br><span class="line">        <span class="keyword">while</span> (p!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;    </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;(%d,%d)-&gt;&quot;</span>,p-&gt;adjvex,p-&gt;value);</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;∧\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MatToList</span><span class="params">(AdjMatix g,AdjList *&amp;G)</span>  <span class="comment">/*例6.3算法:将邻接矩阵g转换成邻接表G*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    ArcNode *p;</span><br><span class="line">    G=(AdjList *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(AdjList));</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;g.n;i++)                    <span class="comment">/*给邻接表中所有头结点的指针域置初值*/</span></span><br><span class="line">    &#123;    </span><br><span class="line">        G-&gt;adjlist[i].firstarc=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="built_in">strcpy</span>(G-&gt;adjlist[i].data,g.vexs[i].data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;g.n;i++)                    <span class="comment">/*检查邻接矩阵中每个元素*/</span></span><br><span class="line">        <span class="keyword">for</span> (j=g.n<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line">            <span class="keyword">if</span> (g.edges[i][j]!=<span class="number">0</span>)        <span class="comment">/*邻接矩阵的当前元素不为0*/</span></span><br><span class="line">            &#123;</span><br><span class="line">                p=(ArcNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ArcNode));<span class="comment">/*创建一个结点*p*/</span></span><br><span class="line">                p-&gt;value=g.edges[i][j];p-&gt;adjvex=j;</span><br><span class="line">                p-&gt;next=G-&gt;adjlist[i].firstarc;          <span class="comment">/*将*p链到链表后*/</span></span><br><span class="line">                G-&gt;adjlist[i].firstarc=p;</span><br><span class="line">            &#125;</span><br><span class="line">    G-&gt;n=g.n;G-&gt;e=g.e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> visited[MAXVEX];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(AdjList *g,<span class="keyword">int</span> vi)</span>        <span class="comment">/*对邻接表G从顶点vi开始进行深度优先遍历*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ArcNode *p;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,vi);            <span class="comment">/*访问vi顶点*/</span></span><br><span class="line">    visited[vi]=<span class="number">1</span>;                <span class="comment">/*置已访问标识*/</span></span><br><span class="line">    p=g-&gt;adjlist[vi].firstarc;    <span class="comment">/*找vi的第一个邻接点*/</span></span><br><span class="line">    <span class="keyword">while</span> (p!=<span class="literal">NULL</span>)                <span class="comment">/*找vi的所有邻接点*/</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (visited[p-&gt;adjvex]==<span class="number">0</span>) </span><br><span class="line">            DFS(g,p-&gt;adjvex);    <span class="comment">/*从vi未访问过的邻接点出发深度优先搜索*/</span></span><br><span class="line">        p=p-&gt;next;                <span class="comment">/*找vi的下一个邻接点*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS1</span><span class="params">(AdjList *G,<span class="keyword">int</span> vi)</span>        <span class="comment">/*非递归深度优先遍历算法*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ArcNode *p;</span><br><span class="line">    ArcNode *St[MAXVEX];</span><br><span class="line">    <span class="keyword">int</span> top=<span class="number">-1</span>,v;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,vi);                    <span class="comment">/*访问vi顶点*/</span></span><br><span class="line">    visited[vi]=<span class="number">1</span>;                        <span class="comment">/*置已访问标识*/</span></span><br><span class="line">    top++;                                <span class="comment">/*将初始顶点vi的firstarc指针进栈*/</span></span><br><span class="line">    St[top]=G-&gt;adjlist[vi].firstarc;</span><br><span class="line">    <span class="keyword">while</span> (top&gt;<span class="number">-1</span>)                        <span class="comment">/*栈不空循环*/</span></span><br><span class="line">    &#123;</span><br><span class="line">        p=St[top];top--;                <span class="comment">/*出栈一个顶点为当前顶点*/</span></span><br><span class="line">        <span class="keyword">while</span> (p!=<span class="literal">NULL</span>)                    <span class="comment">/*循环搜索其相邻顶点*/</span></span><br><span class="line">        &#123;</span><br><span class="line">            v=p-&gt;adjvex;                <span class="comment">/*取相邻顶点的编号*/</span></span><br><span class="line">            <span class="keyword">if</span> (visited[v]==<span class="number">0</span>)            <span class="comment">/*若该顶点未访问过*/</span></span><br><span class="line">            &#123;                            </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,v);        <span class="comment">/*访问v顶点*/</span></span><br><span class="line">                visited[v]=<span class="number">1</span>;            <span class="comment">/*置访问标识*/</span></span><br><span class="line">                top++;                    <span class="comment">/*将该顶点的第1个相邻顶点进栈*/</span></span><br><span class="line">                St[top]=G-&gt;adjlist[v].firstarc;</span><br><span class="line">                <span class="keyword">break</span>;                    <span class="comment">/*退出当前顶点的搜索*/</span></span><br><span class="line">            &#125;        </span><br><span class="line">            p=p-&gt;next;                    <span class="comment">/*找下一个相邻顶点*/</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    AdjMatix g;</span><br><span class="line">    AdjList *G;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">5</span>][<span class="number">5</span>]=&#123; &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125; &#125;;</span><br><span class="line">    <span class="keyword">char</span> *vname[MAXVEX]=&#123;<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>&#125;;</span><br><span class="line">    g.n=<span class="number">5</span>;g.e=<span class="number">12</span>;    <span class="comment">/*建立图6.1(a)的无向图,每1条无向边算为2条有向边*/</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;g.n;i++)</span><br><span class="line">        <span class="built_in">strcpy</span>(g.vexs[i].data,vname[i]);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;g.n;i++)</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;g.n;j++)</span><br><span class="line">            g.edges[i][j]=a[i][j];</span><br><span class="line">    MatToList(g,G);        <span class="comment">/*生成邻接表*/</span></span><br><span class="line">    DispAdjList(G);        <span class="comment">/*输出邻接表*/</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;g.n;i++)    visited[i]=<span class="number">0</span>; <span class="comment">/*顶点标识置初值*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;从顶点0的深度优先遍历序列:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  递归算法:&quot;</span>);DFS(G,<span class="number">0</span>);<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;g.n;i++)    visited[i]=<span class="number">0</span>; <span class="comment">/*顶点标识置初值*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  非递归算法:&quot;</span>);DFS1(G,<span class="number">0</span>);<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-最小生成树"><a href="#8-最小生成树" class="headerlink" title="8.最小生成树"></a>8.最小生成树</h3><h4 id="8-1-普利姆算法"><a href="#8-1-普利姆算法" class="headerlink" title="8.1.普利姆算法"></a>8.1.普利姆算法</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXVEX 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 32767       <span class="comment">/*INF表示∞*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Prim</span><span class="params">(<span class="keyword">int</span> cost[][MAXVEX],<span class="keyword">int</span> n,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"><span class="comment">/*输出最小生成树的每条边*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lowcost[MAXVEX],min;</span><br><span class="line">    <span class="keyword">int</span> closest[MAXVEX],i,j,k;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)              <span class="comment">/*给lowcost[]和closest[]置初值*/</span></span><br><span class="line">    &#123;    </span><br><span class="line">        lowcost[i]=cost[v][i];</span><br><span class="line">            closest[i]=v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;n;i++)              <span class="comment">/*找出n-1个顶点*/</span></span><br><span class="line">    &#123;   </span><br><span class="line">        min=INF;</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;n;j++)       <span class="comment">/*在(V-U)中找出离U最近的顶点k*/</span></span><br><span class="line">            <span class="keyword">if</span> (lowcost[j]!=<span class="number">0</span> &amp;&amp; lowcost[j]&lt;min) </span><br><span class="line">            &#123;    </span><br><span class="line">                min=lowcost[j];</span><br><span class="line">                k=j;  </span><br><span class="line">            &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  边(%d,%d)权为:%d\n&quot;</span>,closest[k],k,min);</span><br><span class="line">        lowcost[k]=<span class="number">0</span>;             <span class="comment">/*标记k已经加入U*/</span></span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;n;j++)       <span class="comment">/*修改数组lowcost和closest*/</span></span><br><span class="line">            <span class="keyword">if</span> (cost[k][j]!=<span class="number">0</span> &amp;&amp; cost[k][j]&lt;lowcost[j]) </span><br><span class="line">            &#123;    </span><br><span class="line">                lowcost[j]=cost[k][j];</span><br><span class="line">                closest[j]=k; </span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">7</span>;</span><br><span class="line">    <span class="keyword">int</span> cost[<span class="number">7</span>][MAXVEX]=&#123;</span><br><span class="line">        &#123;<span class="number">0</span>,<span class="number">50</span>,<span class="number">60</span>,INF,INF,INF,INF&#125;,</span><br><span class="line">        &#123;<span class="number">50</span>,<span class="number">0</span>,INF,<span class="number">65</span>,<span class="number">40</span>,INF,INF&#125;,</span><br><span class="line">        &#123;<span class="number">60</span>,INF,<span class="number">0</span>,<span class="number">52</span>,INF,INF,<span class="number">45</span>&#125;,</span><br><span class="line">        &#123;INF,<span class="number">65</span>,<span class="number">52</span>,<span class="number">0</span>,<span class="number">50</span>,<span class="number">30</span>,<span class="number">42</span>&#125;,</span><br><span class="line">        &#123;INF,<span class="number">40</span>,INF,<span class="number">50</span>,<span class="number">0</span>,<span class="number">70</span>,INF&#125;,</span><br><span class="line">        &#123;INF,INF,INF,<span class="number">30</span>,<span class="number">70</span>,<span class="number">0</span>,INF&#125;,</span><br><span class="line">        &#123;INF,INF,<span class="number">45</span>,<span class="number">42</span>,INF,INF,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;最小生成树:\n&quot;</span>);Prim(cost,n,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-2-克鲁斯卡尔算法"><a href="#8-2-克鲁斯卡尔算法" class="headerlink" title="8.2.克鲁斯卡尔算法"></a>8.2.克鲁斯卡尔算法</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXVEX 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span>    </span><br><span class="line">    <span class="keyword">int</span> u;     <span class="comment">/*边的起始顶点*/</span></span><br><span class="line">    <span class="keyword">int</span> v;     <span class="comment">/*边的终止顶点*/</span></span><br><span class="line">    <span class="keyword">int</span> w;     <span class="comment">/*边的权值*/</span></span><br><span class="line">&#125; Edge;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Kruskal</span><span class="params">(Edge E[],<span class="keyword">int</span> n,<span class="keyword">int</span> e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,m1,m2,sn1,sn2,k;</span><br><span class="line">    <span class="keyword">int</span> vset[MAXVEX];</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++) vset[i]=i;    <span class="comment">/*初始化辅助数组*/</span></span><br><span class="line">    k=<span class="number">1</span>;                             <span class="comment">/*k表示构造最小生成树的第几条边,初值为1*/</span></span><br><span class="line">    j=<span class="number">0</span>;                             <span class="comment">/*E中边的下标,初值为0*/</span></span><br><span class="line">    <span class="keyword">while</span> (k&lt;n)                       <span class="comment">/*生成的边数小于n时循环*/</span></span><br><span class="line">    &#123;</span><br><span class="line">        m1=E[j].u;m2=E[j].v;        <span class="comment">/*取一条边的头尾顶点*/</span></span><br><span class="line">        sn1=vset[m1];sn2=vset[m2];     <span class="comment">/*分别得到两个顶点所属的集合编号*/</span></span><br><span class="line">        <span class="keyword">if</span> (sn1!=sn2)                   <span class="comment">/*两顶点属不同的集合,该边是最小生成树的边*/</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;  边(%d,%d)权为:%d\n&quot;</span>,m1,m2,E[j].w);</span><br><span class="line">            k++;                    <span class="comment">/*生成边数增1*/</span></span><br><span class="line">            <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)          <span class="comment">/*两个集合统一编号*/</span></span><br><span class="line">                <span class="keyword">if</span> (vset[i]==sn2)      <span class="comment">/*集合编号为sn2的改为sn1*/</span></span><br><span class="line">                    vset[i]=sn1;</span><br><span class="line">        &#125;</span><br><span class="line">        j++;                           <span class="comment">/*扫描下一条边*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">7</span>,e=<span class="number">10</span>;</span><br><span class="line">    Edge E[]=&#123;</span><br><span class="line">        &#123;<span class="number">3</span>,<span class="number">5</span>,<span class="number">30</span>&#125;,&#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">40</span>&#125;,&#123;<span class="number">3</span>,<span class="number">6</span>,<span class="number">42</span>&#125;,</span><br><span class="line">        &#123;<span class="number">2</span>,<span class="number">6</span>,<span class="number">45</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">50</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">50</span>&#125;,</span><br><span class="line">        &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">52</span>&#125;,&#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">60</span>&#125;,&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">65</span>&#125;,</span><br><span class="line">        &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">70</span>&#125;&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;最小生成树:\n&quot;</span>);Kruskal(E,n,e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-最短路径"><a href="#9-最短路径" class="headerlink" title="9.最短路径"></a>9.最短路径</h3><h4 id="9-1-狄克斯特拉算法"><a href="#9-1-狄克斯特拉算法" class="headerlink" title="9.1.狄克斯特拉算法"></a>9.1.狄克斯特拉算法</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXVEX 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 32767</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> cost[][MAXVEX],<span class="keyword">int</span> n,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dist[MAXVEX],path[MAXVEX];</span><br><span class="line">    <span class="keyword">int</span> s[MAXVEX];</span><br><span class="line">    <span class="keyword">int</span> mindis,i,j,u,pre;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++) </span><br><span class="line">    &#123;    </span><br><span class="line">        dist[i]=cost[v][i];           <span class="comment">/*距离初始化*/</span></span><br><span class="line">        s[i]=<span class="number">0</span>;                        <span class="comment">/*s[]置空*/</span></span><br><span class="line">        <span class="keyword">if</span> (cost[v][i]&lt;INF)            <span class="comment">/*路径初始化*/</span></span><br><span class="line">            path[i]=v;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            path[i]=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    s[v]=<span class="number">1</span>;path[v]=<span class="number">0</span>;                <span class="comment">/*源点编号v放入s中*/</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)                 <span class="comment">/*循环直到所有顶点的最短路径都求出*/</span></span><br><span class="line">    &#123;    </span><br><span class="line">        mindis=INF;</span><br><span class="line">        u=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;n;j++)             <span class="comment">/*选取不在s中且具有最小距离的顶点u*/</span></span><br><span class="line">            <span class="keyword">if</span> (s[j]==<span class="number">0</span> &amp;&amp; dist[j]&lt;mindis) </span><br><span class="line">            &#123;     </span><br><span class="line">                u=j;</span><br><span class="line">                mindis=dist[j];    </span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span> (u!=<span class="number">-1</span>)                        <span class="comment">/*找到最小距离的顶点u*/</span></span><br><span class="line">        &#123;    s[u]=<span class="number">1</span>;                     <span class="comment">/*顶点u加入s中*/</span></span><br><span class="line">            <span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;n;j++)              <span class="comment">/*修改不在s中的顶点的距离*/</span></span><br><span class="line">                <span class="keyword">if</span> (s[j]==<span class="number">0</span>) </span><br><span class="line">                    <span class="keyword">if</span> (cost[u][j]&lt;INF &amp;&amp; dist[u]+cost[u][j]&lt;dist[j]) </span><br><span class="line">                    &#123;    </span><br><span class="line">                        dist[j]=dist[u]+cost[u][j];</span><br><span class="line">                        path[j]=u;</span><br><span class="line">                    &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n Dijkstra算法求解如下:\n&quot;</span>); </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)                <span class="comment">/*输出最短路径长度,路径逆序输出*/</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i!=v)</span><br><span class="line">        &#123;    </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;  %d-&gt;%d:&quot;</span>,v,i);</span><br><span class="line">            <span class="keyword">if</span> (s[i]==<span class="number">1</span>)  </span><br><span class="line">            &#123;    </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;路径长度为%2d &quot;</span>,dist[i]);</span><br><span class="line">                pre=i;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;路径逆序为&quot;</span>);</span><br><span class="line">                <span class="keyword">while</span> (pre!=v)        <span class="comment">/*一直求解到初始顶点*/</span></span><br><span class="line">                &#123;    </span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%d,&quot;</span>,pre);</span><br><span class="line">                    pre=path[pre];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,pre);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;不存在路径\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cost[<span class="number">6</span>][MAXVEX]=&#123;        <span class="comment">/*图6.9的代价矩阵*/</span></span><br><span class="line">        &#123;<span class="number">0</span>,<span class="number">50</span>,<span class="number">10</span>,INF,INF,INF&#125;,</span><br><span class="line">        &#123;INF,<span class="number">0</span>,<span class="number">15</span>,<span class="number">50</span>,<span class="number">10</span>,INF&#125;,</span><br><span class="line">        &#123;<span class="number">20</span>,INF,<span class="number">0</span>,<span class="number">15</span>,INF,INF&#125;,</span><br><span class="line">        &#123;INF,<span class="number">20</span>,INF,<span class="number">0</span>,<span class="number">35</span>,INF&#125;,</span><br><span class="line">        &#123;INF,INF,INF,<span class="number">30</span>,<span class="number">0</span>,INF&#125;,</span><br><span class="line">        &#123;INF,INF,INF,<span class="number">3</span>,INF,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">    Dijkstra(cost,<span class="number">6</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-2-弗洛伊德算法"><a href="#9-2-弗洛伊德算法" class="headerlink" title="9.2.弗洛伊德算法"></a>9.2.弗洛伊德算法</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXVEX 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 32767</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Floyed</span><span class="params">(<span class="keyword">int</span> cost[][MAXVEX],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> A[MAXVEX][MAXVEX],path[MAXVEX][MAXVEX];</span><br><span class="line">    <span class="keyword">int</span> i,j,k,pre;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)        <span class="comment">/*置初值*/</span></span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;n;j++) </span><br><span class="line">        &#123;    </span><br><span class="line">            A[i][j]=cost[i][j];</span><br><span class="line">            path[i][j]=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> (k=<span class="number">0</span>;k&lt;n;k++)</span><br><span class="line">    &#123;    </span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            <span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">                <span class="keyword">if</span> (A[i][j]&gt;(A[i][k]+A[k][j])) </span><br><span class="line">                &#123;    </span><br><span class="line">                    A[i][j]=A[i][k]+A[k][j];</span><br><span class="line">                    path[i][j]=k;</span><br><span class="line">                &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n Floyed算法求解如下:\n&quot;</span>); </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)        <span class="comment">/*输出最短路径*/</span></span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;n;j++) </span><br><span class="line">            <span class="keyword">if</span> (i!=j)</span><br><span class="line">            &#123;    </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;   %d-&gt;%d:&quot;</span>,i,j);</span><br><span class="line">                <span class="keyword">if</span> (A[i][j]==INF)</span><br><span class="line">                &#123;    </span><br><span class="line">                    <span class="keyword">if</span> (i!=j) </span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;不存在路径\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                &#123;    </span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;路径长度为:%3d &quot;</span>,A[i][j]);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;路径为%d &quot;</span>,i);</span><br><span class="line">                    pre=path[i][j];</span><br><span class="line">                    <span class="keyword">while</span> (pre!=<span class="number">-1</span>)</span><br><span class="line">                    &#123;    </span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,pre);</span><br><span class="line">                        pre=path[pre][j];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cost[<span class="number">6</span>][MAXVEX]=&#123;        <span class="comment">/*图6.9的代价矩阵*/</span></span><br><span class="line">        &#123;<span class="number">0</span>,<span class="number">50</span>,<span class="number">10</span>,INF,INF,INF&#125;,</span><br><span class="line">        &#123;INF,<span class="number">0</span>,<span class="number">15</span>,<span class="number">50</span>,<span class="number">10</span>,INF&#125;,</span><br><span class="line">        &#123;<span class="number">20</span>,INF,<span class="number">0</span>,<span class="number">15</span>,INF,INF&#125;,</span><br><span class="line">        &#123;INF,<span class="number">20</span>,INF,<span class="number">0</span>,<span class="number">35</span>,INF&#125;,</span><br><span class="line">        &#123;INF,INF,INF,<span class="number">30</span>,<span class="number">0</span>,INF&#125;,</span><br><span class="line">        &#123;INF,INF,INF,<span class="number">3</span>,INF,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">    Floyed(cost,<span class="number">6</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-拓扑排序算法"><a href="#10-拓扑排序算法" class="headerlink" title="10.拓扑排序算法"></a>10.拓扑排序算法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXVEX 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> VertexType[<span class="number">3</span>];        <span class="comment">/*定义VertexType为char数组类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">vertex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> adjvex;</span><br><span class="line">    VertexType data;</span><br><span class="line">&#125; VType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">graph</span></span></span><br><span class="line"><span class="class">&#123;</span>    </span><br><span class="line">    <span class="keyword">int</span> n,e;                    <span class="comment">/*n为实际顶点数,e为实际边数*/</span></span><br><span class="line">    VType vexs[MAXVEX];            <span class="comment">/*顶点集合*/</span></span><br><span class="line">    <span class="keyword">int</span> edges[MAXVEX][MAXVEX];    <span class="comment">/*边的集合*/</span></span><br><span class="line">&#125; AdjMatix;                        <span class="comment">/*图的邻接矩阵类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">edgenode</span></span></span><br><span class="line"><span class="class">&#123;</span>    </span><br><span class="line">    <span class="keyword">int</span> adjvex;                  <span class="comment">/*邻接点序号*/</span></span><br><span class="line">    <span class="keyword">int</span> value;                  <span class="comment">/*边的权值*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">edgenode</span> *<span class="title">next</span>;</span>        <span class="comment">/*下一条边的顶点*/</span></span><br><span class="line">&#125; ArcNode;                        <span class="comment">/*每个顶点建立的单链表中结点的类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">vexnode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    VertexType data;               <span class="comment">/*结点信息*/</span></span><br><span class="line">    <span class="keyword">int</span> count;                     <span class="comment">/*存放顶点入度,新增用于拓扑排序*/</span></span><br><span class="line">    ArcNode *firstarc;             <span class="comment">/*指向第一条边结点*/</span></span><br><span class="line">&#125; VHeadNode;                    <span class="comment">/*单链表的头结点类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> n,e;                    <span class="comment">/*n为实际顶点数,e为实际边数*/</span></span><br><span class="line">    VHeadNode adjlist[MAXVEX];    <span class="comment">/*单链表头结点数组*/</span></span><br><span class="line">&#125; AdjList;                         <span class="comment">/*图的邻接表类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispAdjList</span><span class="params">(AdjList *G)</span>    <span class="comment">/*显示邻接表(含顶点入度)*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    ArcNode *p;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;图的邻接表表示如下:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;G-&gt;n;i++)</span><br><span class="line">    &#123;    </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  [%d,%3s:]=&gt;&quot;</span>,i,G-&gt;adjlist[i].data,G-&gt;adjlist[i].count);</span><br><span class="line">        p=G-&gt;adjlist[i].firstarc;</span><br><span class="line">        <span class="keyword">while</span> (p!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;    </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;(%d,%d)-&gt;&quot;</span>,p-&gt;adjvex,p-&gt;value);</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;∧\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MatToList</span><span class="params">(AdjMatix g,AdjList *&amp;G)</span>  <span class="comment">/*例6.3算法:将邻接矩阵g转换成邻接表G*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    ArcNode *p;</span><br><span class="line">    G=(AdjList *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(AdjList));</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;g.n;i++)                    <span class="comment">/*给邻接表中所有头结点的指针域置初值*/</span></span><br><span class="line">    &#123;    </span><br><span class="line">        G-&gt;adjlist[i].firstarc=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="built_in">strcpy</span>(G-&gt;adjlist[i].data,g.vexs[i].data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;g.n;i++)                    <span class="comment">/*检查邻接矩阵中每个元素*/</span></span><br><span class="line">        <span class="keyword">for</span> (j=g.n<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line">            <span class="keyword">if</span> (g.edges[i][j]!=<span class="number">0</span>)        <span class="comment">/*邻接矩阵的当前元素不为0*/</span></span><br><span class="line">            &#123;</span><br><span class="line">                p=(ArcNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ArcNode));<span class="comment">/*创建一个结点*p*/</span></span><br><span class="line">                p-&gt;value=g.edges[i][j];p-&gt;adjvex=j;</span><br><span class="line">                p-&gt;next=G-&gt;adjlist[i].firstarc;          <span class="comment">/*将*p链到链表后*/</span></span><br><span class="line">                G-&gt;adjlist[i].firstarc=p;</span><br><span class="line">            &#125;</span><br><span class="line">    G-&gt;n=g.n;G-&gt;e=g.e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TopSort</span><span class="params">(AdjList *G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">int</span> St[MAXV],top=<span class="number">-1</span>;              <span class="comment">/*栈St的指针为top*/</span></span><br><span class="line">    ArcNode *p;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">if</span> (adj[i].count==<span class="number">0</span>)           <span class="comment">/*入度为0的顶点入栈*/</span></span><br><span class="line">        &#123;</span><br><span class="line">            top++; </span><br><span class="line">            St[top]=i;  </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (top&gt;<span class="number">-1</span>)                 <span class="comment">/*栈不为空时循环*/</span></span><br><span class="line">        &#123;</span><br><span class="line">            i=St[top];top--;          <span class="comment">/*出栈*/</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,i);          <span class="comment">/*输出顶点*/</span></span><br><span class="line">            p=adj[i].firstarc;         <span class="comment">/*找第一个相邻顶点*/</span></span><br><span class="line">            <span class="keyword">while</span> (p!=<span class="literal">NULL</span>) </span><br><span class="line">            &#123;</span><br><span class="line">                j=p-&gt;adjvex;</span><br><span class="line">                adj[j].count--; </span><br><span class="line">                <span class="keyword">if</span> (adj[j].count==<span class="number">0</span>)<span class="comment">/*入度为0的相邻顶点入栈*/</span></span><br><span class="line">                &#123;</span><br><span class="line">                    top++;</span><br><span class="line">                    St[top]=j;</span><br><span class="line">                &#125;</span><br><span class="line">                p=p-&gt;nextarc;        <span class="comment">/*找下一个相邻顶点*/</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    AdjMatix g;</span><br><span class="line">    AdjList *G;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">6</span>][<span class="number">6</span>]=&#123; &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">10</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125; &#125;;</span><br><span class="line">    <span class="keyword">char</span> *vname[MAXVEX]=&#123;<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>&#125;;</span><br><span class="line">    g.n=<span class="number">5</span>;g.e=<span class="number">12</span>;    <span class="comment">/*建立图6.1(a)的无向图,每1条无向边算为2条有向边*/</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;g.n;i++)</span><br><span class="line">        <span class="built_in">strcpy</span>(g.vexs[i].data,vname[i]);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;g.n;i++)</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;g.n;j++)</span><br><span class="line">            g.edges[i][j]=a[i][j];</span><br><span class="line">    MatToList(g,G);        <span class="comment">/*生成邻接表*/</span></span><br><span class="line">    DispAdjList(G);        <span class="comment">/*输出邻接表*/</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;g.n;i++)    visited[i]=<span class="number">0</span>; <span class="comment">/*顶点标识置初值*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;从顶点0的深度优先遍历序列:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  递归算法:&quot;</span>);DFS(G,<span class="number">0</span>);<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;g.n;i++)    visited[i]=<span class="number">0</span>; <span class="comment">/*顶点标识置初值*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  非递归算法:&quot;</span>);DFS1(G,<span class="number">0</span>);<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><h3 id="1-查找的基本概念"><a href="#1-查找的基本概念" class="headerlink" title="1.查找的基本概念"></a>1.查找的基本概念</h3><p><a href="https://blog.csdn.net/sayhello_world/article/details/77200009">查找</a>是在大量的信息中寻找一个特定的信息元素，在计算机应用中，查找是常用的基本运算，例如编译程序中符号表的查找。</p><h4 id="1-1-查找的定义"><a href="#1-1-查找的定义" class="headerlink" title="1.1.查找的定义"></a>1.1.查找的定义</h4><p>根据给定的某个值，在查找表中确定一个其关键字等于给定值的数据元素（或记录）。</p><h4 id="1-2-查找算法分类"><a href="#1-2-查找算法分类" class="headerlink" title="1.2.查找算法分类"></a>1.2.查找算法分类</h4><ol><li>静态查找和动态查找</li></ol><p>注：静态或者动态都是针对查找表而言的。动态表指查找表中有删除和插入操作的表。</p><ol start="2"><li><p>无序查找和有序查找</p><ul><li>无序查找：被查找数列有序无序均可。</li><li>有序查找：被查找数列必须为有序数列。</li></ul></li></ol><p>平均查找长度（Average Search Length，ASL）：需和指定key进行比较的关键字的个数的期望值，称为查找算法在查找成功时的平均查找长度。</p><p>对于含有n个数据元素的查找表，查找成功的平均查找长度为：ASL = Pi*Ci的和。</p><ul><li>Pi：查找表中第i个数据元素的概率。</li><li>Ci：找到第i个数据元素时已经比较过的次数。</li></ul><h3 id="2-顺序查找"><a href="#2-顺序查找" class="headerlink" title="2.顺序查找"></a>2.顺序查找</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> KeyType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span>    </span><br><span class="line">    KeyType key;       <span class="comment">/*存放关键字,KeyType为关键字类型*/</span></span><br><span class="line">    ElemType data;    <span class="comment">/*其他数据, ElemType为其他数据的类型*/</span></span><br><span class="line">&#125; LineList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SeqSearch</span><span class="params">(LineList R[],<span class="keyword">int</span> n,KeyType k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;n &amp;&amp; R[i].key!=k) i++;</span><br><span class="line">    <span class="keyword">if</span> (i&gt;=n) </span><br><span class="line">        <span class="keyword">return</span>(<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    KeyType a[]=&#123;<span class="number">3</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">4</span>&#125;,k=<span class="number">6</span>;</span><br><span class="line">    LineList R[MaxSize];</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">10</span>,i;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        R[i].key=a[i];</span><br><span class="line">    i=SeqSearch(R,n,k);</span><br><span class="line">    <span class="keyword">if</span> (i&gt;=<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;R[%d].key=%d\n&quot;</span>,i,k);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d不在a中\n&quot;</span>,k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-二分法查找"><a href="#3-二分法查找" class="headerlink" title="3.二分法查找"></a>3.二分法查找</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> KeyType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span>    </span><br><span class="line">    KeyType key;       <span class="comment">/*存放关键字,KeyType为关键字类型*/</span></span><br><span class="line">    ElemType data;    <span class="comment">/*其他数据, ElemType为其他数据的类型*/</span></span><br><span class="line">&#125; LineList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BinSearch</span><span class="params">(LineList R[],<span class="keyword">int</span> n,KeyType k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,low=<span class="number">0</span>,high=n<span class="number">-1</span>,mid;</span><br><span class="line">    <span class="keyword">int</span> find=<span class="number">0</span>;                <span class="comment">/*find=0表示未找到;find=1表示已找到*/</span></span><br><span class="line">       <span class="keyword">while</span> (low&lt;=high &amp;&amp; !find)</span><br><span class="line">     &#123;    mid=(low+high)/<span class="number">2</span>;   <span class="comment">/*整除取中间值*/</span></span><br><span class="line">        <span class="keyword">if</span> (k&lt;R[mid].key) </span><br><span class="line">            high=mid<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (k&gt;R[mid].key) </span><br><span class="line">            low=mid+<span class="number">1</span>;</span><br><span class="line">           <span class="keyword">else</span> </span><br><span class="line">        &#123;    i=mid;</span><br><span class="line">            find=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">     <span class="keyword">if</span> (find==<span class="number">0</span>) </span><br><span class="line">        <span class="keyword">return</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    KeyType a[]=&#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">18</span>,<span class="number">26</span>,<span class="number">32</span>,<span class="number">40</span>&#125;,k=<span class="number">7</span>;</span><br><span class="line">    LineList R[MaxSize];</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">10</span>,i;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        R[i].key=a[i];</span><br><span class="line">    i=BinSearch(R,n,k);</span><br><span class="line">    <span class="keyword">if</span> (i&gt;=<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;R[%d].key=%d\n&quot;</span>,i,k);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d不在a中\n&quot;</span>,k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-分块查找"><a href="#4-分块查找" class="headerlink" title="4.分块查找"></a>4.分块查找</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxBlk 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> KeyType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span>    </span><br><span class="line">    KeyType key;       <span class="comment">/*存放关键字,KeyType为关键字类型*/</span></span><br><span class="line">    ElemType data;    <span class="comment">/*其他数据, ElemType为其他数据的类型*/</span></span><br><span class="line">&#125; LineList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span>    </span><br><span class="line">    KeyType key;</span><br><span class="line">    <span class="keyword">int</span> low,high;</span><br><span class="line">&#125; IDXType;            <span class="comment">/*索引表的类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BlkSearch</span><span class="params">(LineList R[],IDXType idx[],<span class="keyword">int</span> m,KeyType k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low=<span class="number">0</span>,high=m<span class="number">-1</span>,mid,i,j,find=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (low&lt;=high &amp;&amp; !find)    <span class="comment">/*二分查找索引表*/</span></span><br><span class="line">    &#123;</span><br><span class="line">        mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (k&lt;idx[mid].key) </span><br><span class="line">            high=mid<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (k&gt;idx[mid].key) </span><br><span class="line">            low=mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            high=mid<span class="number">-1</span>;</span><br><span class="line">            find=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (low&lt;m)                     <span class="comment">/*k小于索引表内最大值*/</span></span><br><span class="line">    &#123;</span><br><span class="line">        i=idx[low].low;            <span class="comment">/*在索引表中定块起始地址*/</span></span><br><span class="line">        j=idx[low].high;        <span class="comment">/*在索引表中定块终止地址*/</span></span><br><span class="line">       &#125;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;j &amp;&amp; R[i].key!=k) <span class="comment">/*在指定的块内采用顺序方法进行查找*/</span></span><br><span class="line">        i++;</span><br><span class="line">     <span class="keyword">if</span> (i&gt;=j)</span><br><span class="line">         <span class="keyword">return</span>(<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    KeyType a[]=&#123;<span class="number">9</span>,<span class="number">22</span>,<span class="number">12</span>,<span class="number">14</span>,<span class="number">35</span>,<span class="number">42</span>,<span class="number">44</span>,<span class="number">38</span>,<span class="number">48</span>,<span class="number">60</span>,<span class="number">58</span>,<span class="number">47</span>,<span class="number">78</span>,<span class="number">80</span>,<span class="number">77</span>,<span class="number">82</span>&#125;,k=<span class="number">48</span>;</span><br><span class="line">    LineList R[MaxSize];</span><br><span class="line">    IDXType I[MaxBlk];</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">16</span>,m=<span class="number">4</span>,i;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        R[i].key=a[i];</span><br><span class="line">    I[<span class="number">0</span>].key=<span class="number">22</span>;I[<span class="number">0</span>].low=<span class="number">0</span>;I[<span class="number">0</span>].high=<span class="number">3</span>;</span><br><span class="line">    I[<span class="number">1</span>].key=<span class="number">44</span>;I[<span class="number">1</span>].low=<span class="number">4</span>;I[<span class="number">1</span>].high=<span class="number">7</span>;</span><br><span class="line">    I[<span class="number">2</span>].key=<span class="number">60</span>;I[<span class="number">2</span>].low=<span class="number">8</span>;I[<span class="number">2</span>].high=<span class="number">11</span>;</span><br><span class="line">    I[<span class="number">3</span>].key=<span class="number">82</span>;I[<span class="number">3</span>].low=<span class="number">12</span>;I[<span class="number">3</span>].high=<span class="number">15</span>;</span><br><span class="line">    i=BlkSearch(R,I,m,k);</span><br><span class="line">    <span class="keyword">if</span> (i&gt;=<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;R[%d].key=%d\n&quot;</span>,i,k);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d不在a中\n&quot;</span>,k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-二叉排序树查找"><a href="#5-二叉排序树查找" class="headerlink" title="5.二叉排序树查找"></a>5.二叉排序树查找</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> KeyType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tnode</span></span></span><br><span class="line"><span class="class">&#123;</span>    </span><br><span class="line">    KeyType key;</span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tnode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span></span><br><span class="line">&#125; BSTNode;</span><br><span class="line"></span><br><span class="line"><span class="function">BSTNode *<span class="title">BSTSearch</span><span class="params">(BSTNode *bt,KeyType k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BSTNode *p=bt;</span><br><span class="line">    <span class="keyword">while</span> (p!=<span class="literal">NULL</span> &amp;&amp; p-&gt;key!=k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (k&lt;p-&gt;key)</span><br><span class="line">            p=p-&gt;lchild;  <span class="comment">/*沿左子树查找*/</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            p=p-&gt;rchild;  <span class="comment">/*沿右子树查找*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BSTInsert</span><span class="params">(BSTNode *&amp;bt,KeyType k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BSTNode *f,*p=bt;</span><br><span class="line">    <span class="keyword">while</span> (p!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;key==k)</span><br><span class="line">            <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">        f=p;                        <span class="comment">/*f指向*p结点的双亲结点*/</span></span><br><span class="line">        <span class="keyword">if</span> (p-&gt;key&gt;k)</span><br><span class="line">            p=p-&gt;lchild;            <span class="comment">/*在左子树中查找*/</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            p=p-&gt;rchild;            <span class="comment">/*在右子树中查找*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    p=(BSTNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BSTNode));    <span class="comment">/*建立新结点*/</span></span><br><span class="line">    p-&gt;key=k;</span><br><span class="line">    p-&gt;lchild=p-&gt;rchild=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (bt==<span class="literal">NULL</span>)                    <span class="comment">/*原树为空时,*p作为根结点插入*/</span></span><br><span class="line">        bt=p;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (k&lt;f-&gt;key)</span><br><span class="line">        f-&gt;lchild=p;                <span class="comment">/*插入*p作为*f的左孩子*/</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        f-&gt;rchild=p;                <span class="comment">/*插入*p作为*f的右孩子*/</span></span><br><span class="line">    <span class="keyword">return</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateBST</span><span class="params">(BSTNode *&amp;bt,KeyType str[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    bt=<span class="literal">NULL</span>;                       <span class="comment">/*初始时bt为空树*/</span></span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;n) </span><br><span class="line">    &#123;      </span><br><span class="line">        BSTInsert(bt,str[i]); <span class="comment">/*将关键字str[i]插入二叉排序树bt中*/</span></span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispBST</span><span class="params">(BSTNode *bt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bt!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,bt-&gt;key);</span><br><span class="line">        <span class="keyword">if</span> (bt-&gt;lchild!=<span class="literal">NULL</span> || bt-&gt;rchild!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;    <span class="built_in">printf</span>(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">            DispBST(bt-&gt;lchild);                <span class="comment">/*递归处理左子树*/</span></span><br><span class="line">            <span class="keyword">if</span> (bt-&gt;rchild!=<span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            DispBST(bt-&gt;rchild);                <span class="comment">/*递归处理右子树*/</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BSTDelete</span><span class="params">(BSTNode *&amp;bt,KeyType k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BSTNode *p=bt,*f,*r,*f1;</span><br><span class="line">    f=<span class="literal">NULL</span>;                        <span class="comment">/*p指向待比较的结点,f指向*p的双亲结点*/</span></span><br><span class="line">    <span class="keyword">while</span> (p!=<span class="literal">NULL</span> &amp;&amp; p-&gt;key!=k)<span class="comment">/*查找值域为x的结点*/</span></span><br><span class="line">    &#123;    f=p;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;key&gt;k) </span><br><span class="line">            p=p-&gt;lchild;        <span class="comment">/*在左子树中查找*/</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            p=p-&gt;rchild;        <span class="comment">/*在右子树中查找*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p==<span class="literal">NULL</span>)                <span class="comment">/*未找到key域为k的结点*/</span></span><br><span class="line">        <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (p-&gt;lchild==<span class="literal">NULL</span>)  <span class="comment">/**p为被删结点,若它无左子树*/</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (f==<span class="literal">NULL</span>)            <span class="comment">/**p是根结点,则用右孩子替换它*/</span></span><br><span class="line">            bt=p-&gt;rchild;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (f-&gt;lchild==p)    <span class="comment">/**p是双亲结点的左孩子,则用其右孩子替换它*/</span></span><br><span class="line">        &#123;    f-&gt;lchild=p-&gt;rchild;</span><br><span class="line">            <span class="built_in">free</span>(p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(f-&gt;rchild==p)    <span class="comment">/**p是双亲结点的右孩子,则用其右孩子替换它*/</span></span><br><span class="line">        &#123;    f-&gt;rchild=p-&gt;rchild;</span><br><span class="line">            <span class="built_in">free</span>(p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (p-&gt;rchild==<span class="literal">NULL</span>)    <span class="comment">/**p为被删结点,若它无右子树*/</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (f==<span class="literal">NULL</span>)            <span class="comment">/**p是根结点,则用左孩子替换它*/</span></span><br><span class="line">            bt=p-&gt;lchild;</span><br><span class="line">        <span class="keyword">if</span> (f-&gt;lchild==p)        <span class="comment">/**p是双亲结点的左孩子,则用其左孩子替换它*/</span></span><br><span class="line">        &#123;    f-&gt;lchild=p-&gt;lchild;</span><br><span class="line">            <span class="built_in">free</span>(p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(f-&gt;rchild==p)    <span class="comment">/**p是双亲结点的右孩子,则用其左孩子替换它*/</span></span><br><span class="line">        &#123;    f-&gt;rchild=p-&gt;lchild;</span><br><span class="line">            <span class="built_in">free</span>(p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>                        <span class="comment">/**p为被删结点,若它有左子树和右子树*/</span></span><br><span class="line">    &#123;</span><br><span class="line">        f1=p;r=p-&gt;lchild;        <span class="comment">/*查找*p的左子树中的最右下结点*r*/</span></span><br><span class="line">        <span class="keyword">while</span> (r-&gt;rchild!=<span class="literal">NULL</span>)    <span class="comment">/**r一定是无右子树的结点,*f1作为r的双亲*/</span></span><br><span class="line">        &#123;    f1=r;</span><br><span class="line">            r=r-&gt;rchild;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (f1-&gt;lchild==r)        <span class="comment">/**r是*f1的左孩子,删除*r*/</span></span><br><span class="line">            f1-&gt;lchild=r-&gt;rchild;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (f1-&gt;rchild==r)    <span class="comment">/**r是*f1的右孩子,删除*r*/</span></span><br><span class="line">            f1-&gt;rchild=r-&gt;lchild;</span><br><span class="line">        r-&gt;lchild=p-&gt;lchild;    <span class="comment">/*以下语句是用*r替代*p*/</span></span><br><span class="line">        r-&gt;rchild=p-&gt;rchild;    </span><br><span class="line">        <span class="keyword">if</span> (f==<span class="literal">NULL</span>)            <span class="comment">/**f为根结点*/</span></span><br><span class="line">            bt=r;                <span class="comment">/*被删结点是根结点*/</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (f-&gt;lchild==p)    <span class="comment">/**p是*f的左孩子*/</span></span><br><span class="line">            f-&gt;lchild=r;</span><br><span class="line">        <span class="keyword">else</span>                    <span class="comment">/**p是*f的右孩子*/</span></span><br><span class="line">            f-&gt;rchild=r;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BSTNode *bt=<span class="literal">NULL</span>,*p;</span><br><span class="line">    KeyType a[]=&#123;<span class="number">10</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">20</span>,<span class="number">9</span>,<span class="number">25</span>,<span class="number">15</span>&#125;,k;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">9</span>;</span><br><span class="line">    CreateBST(bt,a,n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;BST:&quot;</span>);DispBST(bt);<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    k=<span class="number">9</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;查找关键字为%d的结点\n&quot;</span>,k);</span><br><span class="line">    p=BSTSearch(bt,k);</span><br><span class="line">    <span class="keyword">if</span> (p!=<span class="literal">NULL</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;存在关键字为%d结点\n&quot;</span>,k);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;不存在关键字为%d结点\n&quot;</span>,k);</span><br><span class="line">    k=<span class="number">7</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;插入关键字为%d的结点\n&quot;</span>,k);</span><br><span class="line">    BSTInsert(bt,k);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;BST:&quot;</span>);DispBST(bt);<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    k=<span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;删除关键字为%d的结点\n&quot;</span>,k);</span><br><span class="line">    BSTDelete(bt,k);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;BST:&quot;</span>);DispBST(bt);<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-哈希表查找"><a href="#6-哈希表查找" class="headerlink" title="6.哈希表查找"></a>6.哈希表查找</h3><h4 id="6-1-By-C"><a href="#6-1-By-C" class="headerlink" title="6.1.By C++"></a>6.1.By C++</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 100        <span class="comment">/*哈希表最大长度*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> KeyType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    KeyType key;    <span class="comment">/*关键字值*/</span></span><br><span class="line">    <span class="keyword">int</span> si;            <span class="comment">/*探查次数*/</span></span><br><span class="line">&#125; HashTable;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateHT</span><span class="params">(HashTable ht[],KeyType a[],<span class="keyword">int</span> n,<span class="keyword">int</span> m,<span class="keyword">int</span> p)</span>    <span class="comment">/*构造哈希表*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,d,cnt;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;m;i++)  <span class="comment">/*置初值*/</span></span><br><span class="line">    &#123;</span><br><span class="line">        ht[i].key=<span class="number">0</span>;</span><br><span class="line">        ht[i].si=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt=<span class="number">1</span>;            <span class="comment">/*累计探查次数*/</span></span><br><span class="line">        d=a[i]%p;</span><br><span class="line">        <span class="keyword">if</span> (ht[d].key==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ht[d].key=a[i];</span><br><span class="line">            ht[d].si=cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">do</span>            <span class="comment">/*处理冲突*/</span></span><br><span class="line">            &#123;</span><br><span class="line">                d=(d+<span class="number">1</span>)%m;</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125; <span class="keyword">while</span> (ht[d].key!=<span class="number">0</span>);</span><br><span class="line">            ht[d].key=a[i];</span><br><span class="line">            ht[d].si=cnt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispHT</span><span class="params">(HashTable ht[],<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span>    <span class="comment">/*输出哈希表*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">double</span> avg;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;i:  &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;m;i++) </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%-3d&quot;</span>,i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;key:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;m;i++) </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%-3d&quot;</span>,ht[i].key);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;si: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;m;i++) </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%-3d&quot;</span>,ht[i].si);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    avg=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;m;i++) </span><br><span class="line">        avg+=ht[i].si;</span><br><span class="line">    avg=avg/n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;平均查找长度:ASL(%d)=%g\n&quot;</span>,n,avg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HashTable ht[MaxSize];</span><br><span class="line">    KeyType a[]=&#123;<span class="number">19</span>,<span class="number">1</span>,<span class="number">23</span>,<span class="number">14</span>,<span class="number">55</span>,<span class="number">20</span>,<span class="number">84</span>,<span class="number">27</span>,<span class="number">68</span>,<span class="number">11</span>,<span class="number">10</span>,<span class="number">77</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">12</span>,m=<span class="number">19</span>,p=<span class="number">13</span>;</span><br><span class="line">    CreateHT(ht,a,n,m,p);</span><br><span class="line">    DispHT(ht,n,m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-2-By-Golang"><a href="#6-2-By-Golang" class="headerlink" title="6.2.By Golang"></a>6.2.By Golang</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Package hashtable creates a ValueHashtable data structure for the Item type</span></span><br><span class="line"><span class="keyword">package</span> hashtable</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Key the key of the dictionary</span></span><br><span class="line"><span class="keyword">type</span> Key <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Value the content of the dictionary</span></span><br><span class="line"><span class="keyword">type</span> Value <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ValueHashtable the set of Items</span></span><br><span class="line"><span class="keyword">type</span> ValueHashtable <span class="keyword">struct</span> &#123;</span><br><span class="line">    items <span class="keyword">map</span>[<span class="keyword">int</span>]Value</span><br><span class="line">    lock  sync.RWMutex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the hash() private function uses the famous Horner&#x27;s method</span></span><br><span class="line"><span class="comment">// to generate a hash of a string with O(n) complexity</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hash</span><span class="params">(k Key)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    key := fmt.Sprintf(<span class="string">&quot;%s&quot;</span>, k)</span><br><span class="line">    h := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(key); i++ &#123;</span><br><span class="line">        h = <span class="number">31</span>*h + <span class="keyword">int</span>(key[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> h</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Put item with value v and key k into the hashtable</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ht *ValueHashtable)</span> <span class="title">Put</span><span class="params">(k Key, v Value)</span></span> &#123;</span><br><span class="line">    ht.lock.Lock()</span><br><span class="line">    <span class="keyword">defer</span> ht.lock.Unlock()</span><br><span class="line">    i := hash(k)</span><br><span class="line">    <span class="keyword">if</span> ht.items == <span class="literal">nil</span> &#123;</span><br><span class="line">        ht.items = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]Value)</span><br><span class="line">    &#125;</span><br><span class="line">    ht.items[i] = v</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Remove item with key k from hashtable</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ht *ValueHashtable)</span> <span class="title">Remove</span><span class="params">(k Key)</span></span> &#123;</span><br><span class="line">    ht.lock.Lock()</span><br><span class="line">    <span class="keyword">defer</span> ht.lock.Unlock()</span><br><span class="line">    i := hash(k)</span><br><span class="line">    <span class="built_in">delete</span>(ht.items, i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get item with key k from the hashtable</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ht *ValueHashtable)</span> <span class="title">Get</span><span class="params">(k Key)</span> <span class="title">Value</span></span> &#123;</span><br><span class="line">    ht.lock.RLock()</span><br><span class="line">    <span class="keyword">defer</span> ht.lock.RUnlock()</span><br><span class="line">    i := hash(k)</span><br><span class="line">    <span class="keyword">return</span> ht.items[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Size returns the number of the hashtable elements</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ht *ValueHashtable)</span> <span class="title">Size</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    ht.lock.RLock()</span><br><span class="line">    <span class="keyword">defer</span> ht.lock.RUnlock()</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(ht.items)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-哈希查找"><a href="#7-哈希查找" class="headerlink" title="7.哈希查找"></a>7.哈希查找</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 100        <span class="comment">/*哈希表最大长度*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> KeyType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    KeyType key;    <span class="comment">/*关键字值*/</span></span><br><span class="line">    <span class="keyword">int</span> si;            <span class="comment">/*探查次数*/</span>    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; Node;        <span class="comment">/*数据结点类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Node *link;</span><br><span class="line">&#125; HNode;    <span class="comment">/*头结点类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateHT</span><span class="params">(HNode *ht[],KeyType a[],<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span>    <span class="comment">/*构造哈希表*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,d,cnt;</span><br><span class="line">    Node *s,*q;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;p;i++)    <span class="comment">/*所有头结点的link域置空*/</span></span><br><span class="line">    &#123;</span><br><span class="line">        ht[i]=(HNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(HNode));</span><br><span class="line">        ht[i]-&gt;link=<span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt=<span class="number">1</span>;</span><br><span class="line">        s=(Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));    <span class="comment">/*构造一个数据结点*/</span></span><br><span class="line">        s-&gt;key=a[i];s-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">        d=a[i]%p;                        <span class="comment">/*求其哈希地址*/</span></span><br><span class="line">        <span class="keyword">if</span> (ht[d]-&gt;link==<span class="literal">NULL</span>)            </span><br><span class="line">        &#123;</span><br><span class="line">            ht[d]-&gt;link=s;</span><br><span class="line">            s-&gt;si=cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            q=ht[d]-&gt;link;</span><br><span class="line">            <span class="keyword">while</span> (q-&gt;next!=<span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                q=q-&gt;next;cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">            cnt++;</span><br><span class="line">            s-&gt;si=cnt;q-&gt;next=s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispHT</span><span class="params">(HNode *ht[],<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span>    <span class="comment">/*输出哈希表*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,sum=<span class="number">0</span>;</span><br><span class="line">    Node *q;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;哈希表:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;p;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        q=ht[i]-&gt;link;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d:link-&gt;&quot;</span>,i);</span><br><span class="line">        <span class="keyword">while</span> (q!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sum+=q-&gt;si;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;[%d,%d]-&gt;&quot;</span>,q-&gt;key,q-&gt;si);</span><br><span class="line">            q=q-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;∧\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n平均查找长度:ASL=%g\n&quot;</span>,<span class="number">1.0</span>*sum/n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HNode *ht[MaxSize];</span><br><span class="line">    KeyType a[]=&#123;<span class="number">87</span>,<span class="number">25</span>,<span class="number">310</span>,<span class="number">8</span>,<span class="number">27</span>,<span class="number">132</span>,<span class="number">68</span>,<span class="number">95</span>,<span class="number">187</span>,<span class="number">123</span>,<span class="number">70</span>,<span class="number">63</span>,<span class="number">47</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">13</span>,p=<span class="number">13</span>;</span><br><span class="line">    CreateHT(ht,a,n,p);</span><br><span class="line">    DispHT(ht,n,p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="1-排序的定义"><a href="#1-排序的定义" class="headerlink" title="1.排序的定义"></a>1.排序的定义</h3><p>对一序列对象根据某个关键字进行排序。</p><ul><li><a href="https://blog.csdn.net/Real_Fool_/article/details/114692744">数据结构：排序(Sort)详解 - CSDN</a></li><li><a href="https://zhuanlan.zhihu.com/p/60152722">数据结构与算法系列–十大排序（附动态图解） - 知乎</a></li></ul><h4 id="1-1-排序方法比较"><a href="#1-1-排序方法比较" class="headerlink" title="1.1.排序方法比较"></a>1.1.排序方法比较</h4><table><thead><tr><th>排序方法</th><th>时间复杂度</th><th></th><th></th><th>空间 复杂度</th><th>稳定性</th><th>复杂性</th></tr></thead><tbody><tr><td></td><td>最坏情况</td><td>平均情况</td><td>最好情况</td><td></td><td></td><td></td></tr><tr><td>直接插入排序</td><td>O(n<sup>2</sup>)</td><td>O(n<sup>2</sup>)</td><td>O(n)</td><td>O(1)</td><td>稳定</td><td>简单</td></tr><tr><td>希尔排序</td><td>O(nlog<sub>2</sub>n)</td><td>O(nlog<sub>2</sub>n)</td><td>O(nlog<sub>2</sub>n)</td><td>O(1)</td><td>不稳定</td><td>较复杂</td></tr><tr><td><strong>选择排序</strong></td><td>O(n<sup>2</sup>)</td><td>O(n<sup>2</sup>)</td><td>O(n<sup>2</sup>)</td><td>O(1)</td><td>不稳定</td><td>简单</td></tr><tr><td>堆排序</td><td>O(nlog<sub>2</sub>n)</td><td>O(nlog<sub>2</sub>n)</td><td>O(nlog<sub>2</sub>n)</td><td>O(1)</td><td>不稳定</td><td>较复杂</td></tr><tr><td><strong>冒泡排序</strong></td><td>O(n<sup>2</sup>)</td><td>O(n<sup>2</sup>)</td><td>O(n)</td><td>O(1)</td><td>稳定</td><td>简单</td></tr><tr><td><strong>快速排序</strong></td><td>O(nlog<sub>2</sub>n)</td><td>O(n<sup>2</sup>)</td><td>O(nlog<sub>2</sub>n)</td><td>O(nlog<sub>2</sub>n)</td><td>不稳定</td><td>较复杂</td></tr><tr><td>归并排序</td><td>O(nlog<sub>2</sub>n)</td><td>O(nlog<sub>2</sub>n)</td><td>O(nlog<sub>2</sub>n)</td><td>O(n)</td><td>稳定</td><td>较复杂</td></tr><tr><td>基数排序</td><td>O(d(n+r))</td><td>O(d(n+r))</td><td>O(d(n+r))</td><td>O(n+r)</td><td>稳定</td><td>较复杂</td></tr></tbody></table><h3 id="2-插入排序"><a href="#2-插入排序" class="headerlink" title="2.插入排序"></a>2.插入排序</h3><h4 id="2-1-直接插入排序"><a href="#2-1-直接插入排序" class="headerlink" title="2.1.直接插入排序"></a>2.1.直接插入排序</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> KeyType;        <span class="comment">/*关键字类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType[<span class="number">10</span>];    <span class="comment">/*其他数据项类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span>    </span><br><span class="line">    KeyType key;               <span class="comment">/*关键字域*/</span></span><br><span class="line">    ElemType data;             <span class="comment">/*其他数据域*/</span></span><br><span class="line">&#125; LineList;                    <span class="comment">/*线性表元素类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(LineList R[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    LineList tmp;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;    </span><br><span class="line">        tmp=R[i];</span><br><span class="line">        j=i<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span> (j&gt;=<span class="number">0</span> &amp;&amp; tmp.key&lt;R[j].key)<span class="comment">/*元素后移,以便腾出一个位置插入tmp*/</span></span><br><span class="line">        &#123;    </span><br><span class="line">            R[j+<span class="number">1</span>]=R[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        R[j+<span class="number">1</span>]=tmp;        <span class="comment">/*在j+1位置处插入tmp*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LineList R[MaxSize];</span><br><span class="line">    KeyType a[]=&#123;<span class="number">75</span>,<span class="number">87</span>,<span class="number">68</span>,<span class="number">92</span>,<span class="number">88</span>,<span class="number">61</span>,<span class="number">77</span>,<span class="number">96</span>,<span class="number">80</span>,<span class="number">72</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">10</span>,i;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        R[i].key=a[i];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排序前:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,R[i].key);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    InsertSort(R,n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排序后:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,R[i].key);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-希尔排序"><a href="#2-2-希尔排序" class="headerlink" title="2.2.希尔排序"></a>2.2.希尔排序</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> KeyType;        <span class="comment">/*关键字类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType[<span class="number">10</span>];    <span class="comment">/*其他数据项类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span>    </span><br><span class="line">    KeyType key;               <span class="comment">/*关键字域*/</span></span><br><span class="line">    ElemType data;             <span class="comment">/*其他数据域*/</span></span><br><span class="line">&#125; LineList;                    <span class="comment">/*线性表元素类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellSort</span><span class="params">(LineList R[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,gap;</span><br><span class="line">    LineList tmp;</span><br><span class="line">    gap=n/<span class="number">2</span>;                    <span class="comment">/*增量置初值*/</span></span><br><span class="line">    <span class="keyword">while</span> (gap&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;    </span><br><span class="line">        <span class="keyword">for</span> (i=gap;i&lt;n;i++)      <span class="comment">/*对所有相隔gap位置的所有元素组进行排序*/</span></span><br><span class="line">        &#123;</span><br><span class="line">            tmp=R[i];</span><br><span class="line">            j=i-gap;</span><br><span class="line">            <span class="keyword">while</span> (j&gt;=<span class="number">0</span> &amp;&amp; tmp.key&lt;R[j].key)<span class="comment">/*对相隔gap位置的元素组进行排序*/</span></span><br><span class="line">            &#123;</span><br><span class="line">                R[j+gap]=R[j];</span><br><span class="line">                j=j-gap;                    <span class="comment">/*移到本组中的前一个元素*/</span></span><br><span class="line">            &#125;</span><br><span class="line">            R[j+gap]=tmp;</span><br><span class="line">            j=j-gap;</span><br><span class="line">        &#125;</span><br><span class="line">        gap=gap/<span class="number">2</span>;    <span class="comment">/*减小增量*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LineList R[MaxSize];</span><br><span class="line">    KeyType a[]=&#123;<span class="number">75</span>,<span class="number">87</span>,<span class="number">68</span>,<span class="number">92</span>,<span class="number">88</span>,<span class="number">61</span>,<span class="number">77</span>,<span class="number">96</span>,<span class="number">80</span>,<span class="number">72</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">10</span>,i;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        R[i].key=a[i];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排序前:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,R[i].key);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    ShellSort(R,n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排序后:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,R[i].key);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-选择排序"><a href="#3-选择排序" class="headerlink" title="3.选择排序"></a>3.选择排序</h3><h4 id="3-1-直接选择排序"><a href="#3-1-直接选择排序" class="headerlink" title="3.1.直接选择排序"></a>3.1.直接选择排序</h4><h5 id="3-1-1-基本思想"><a href="#3-1-1-基本思想" class="headerlink" title="3.1.1.基本思想"></a>3.1.1.基本思想</h5><ul><li>每次从未排序的序列中选择最小的数放置在该未排序序列的第一个</li><li>不断循环，直到排序完成</li></ul><h5 id="3-1-2-步骤"><a href="#3-1-2-步骤" class="headerlink" title="3.1.2.步骤"></a>3.1.2.步骤</h5><ul><li>第一层循环：i=0; i &lt; len(list)-1; i++</li><li>第二层循环：j := i + 1; j &lt; len(list); j++</li><li>寻找未排序序列中最小的数: if list[j] &lt; list[minIndex] { minIndex = j }</li><li>将最小的数与放置到当前未排序序列的第一个: list[i], list[minIndex] = list[minIndex], list[i]</li></ul><h5 id="3-1-3-By-C"><a href="#3-1-3-By-C" class="headerlink" title="3.1.3.By C++"></a>3.1.3.By C++</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> KeyType;        <span class="comment">/*关键字类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType[<span class="number">10</span>];    <span class="comment">/*其他数据项类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span>    </span><br><span class="line">    KeyType key;               <span class="comment">/*关键字域*/</span></span><br><span class="line">    ElemType data;             <span class="comment">/*其他数据域*/</span></span><br><span class="line">&#125; LineList;                    <span class="comment">/*线性表元素类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectSort</span><span class="params">(LineList R[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,k;</span><br><span class="line">    LineList tmp;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;    </span><br><span class="line">        k=i;</span><br><span class="line">        <span class="keyword">for</span> (j=i+<span class="number">1</span>;j&lt;n;j++)</span><br><span class="line">            <span class="keyword">if</span> (R[j].key&lt;R[k].key) </span><br><span class="line">                k=j;        <span class="comment">/*用k指出每趟在无序区段的最小元素*/</span></span><br><span class="line">        tmp=R[i];            <span class="comment">/*将R[k]与R[i]交换*/</span></span><br><span class="line">        R[i]=R[k];</span><br><span class="line">        R[k]=tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LineList R[MaxSize];</span><br><span class="line">    KeyType a[]=&#123;<span class="number">75</span>,<span class="number">87</span>,<span class="number">68</span>,<span class="number">92</span>,<span class="number">88</span>,<span class="number">61</span>,<span class="number">77</span>,<span class="number">96</span>,<span class="number">80</span>,<span class="number">72</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">10</span>,i;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        R[i].key=a[i];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排序前:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,R[i].key);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    SelectSort(R,n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排序后:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,R[i].key);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-1-4-By-Golang"><a href="#3-1-4-By-Golang" class="headerlink" title="3.1.4.By Golang"></a>3.1.4.By Golang</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择排序</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">selectSort</span><span class="params">(list []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> minIndex <span class="keyword">int</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(list)<span class="number">-1</span>; i++ &#123;</span><br><span class="line">        minIndex = i</span><br><span class="line">        <span class="keyword">for</span> j := i + <span class="number">1</span>; j &lt; <span class="built_in">len</span>(list); j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> list[j] &lt; list[minIndex] &#123; <span class="comment">// 寻找未排序序列中最小的数</span></span><br><span class="line">                minIndex = j</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        list[i], list[minIndex] = list[minIndex], list[i] <span class="comment">// 将当前数与最小的数交换位置</span></span><br><span class="line">        fmt.Println(<span class="string">&quot;第&quot;</span>, i+<span class="number">1</span>, <span class="string">&quot;趟：&quot;</span>, list)                 <span class="comment">// 打印每趟的序列</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    list := []<span class="keyword">int</span>&#123;<span class="number">75</span>, <span class="number">87</span>, <span class="number">68</span>, <span class="number">92</span>, <span class="number">88</span>, <span class="number">61</span>, <span class="number">77</span>, <span class="number">96</span>, <span class="number">80</span>, <span class="number">72</span>&#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;初始序列:&quot;</span>, list)</span><br><span class="line">    result := selectSort(list)</span><br><span class="line">    fmt.Println(<span class="string">&quot;最终结果:&quot;</span>, result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-1-5-排序过程"><a href="#3-1-5-排序过程" class="headerlink" title="3.1.5.排序过程"></a>3.1.5.排序过程</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">初始序列: [75 87 68 92 88 61 77 96 80 72]</span><br><span class="line"></span><br><span class="line">第 1 趟： [61 87 68 92 88 75 77 96 80 72]</span><br><span class="line">第 2 趟： [61 68 87 92 88 75 77 96 80 72]</span><br><span class="line">第 3 趟： [61 68 72 92 88 75 77 96 80 87]</span><br><span class="line">第 4 趟： [61 68 72 75 88 92 77 96 80 87]</span><br><span class="line">第 5 趟： [61 68 72 75 77 92 88 96 80 87]</span><br><span class="line">第 6 趟： [61 68 72 75 77 80 88 96 92 87]</span><br><span class="line">第 7 趟： [61 68 72 75 77 80 87 96 92 88]</span><br><span class="line">第 8 趟： [61 68 72 75 77 80 87 88 92 96]</span><br><span class="line">第 9 趟： [61 68 72 75 77 80 87 88 92 96]</span><br><span class="line"></span><br><span class="line">最终结果: [61 68 72 75 77 80 87 88 92 96]</span><br></pre></td></tr></table></figure><h4 id="3-2-堆排序"><a href="#3-2-堆排序" class="headerlink" title="3.2.堆排序"></a>3.2.堆排序</h4><h5 id="3-2-1-By-C"><a href="#3-2-1-By-C" class="headerlink" title="3.2.1.By C++"></a>3.2.1.By C++</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> KeyType;        <span class="comment">/*关键字类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType[<span class="number">10</span>];    <span class="comment">/*其他数据项类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span>    </span><br><span class="line">    KeyType key;               <span class="comment">/*关键字域*/</span></span><br><span class="line">    ElemType data;             <span class="comment">/*其他数据域*/</span></span><br><span class="line">&#125; LineList;                    <span class="comment">/*线性表元素类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sift</span><span class="params">(LineList R[],<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=low,j=<span class="number">2</span>*i;             <span class="comment">/*R[j]是R[i]的左孩子*/</span></span><br><span class="line">    LineList tmp=R[i];</span><br><span class="line">    <span class="keyword">while</span> (j&lt;=high) </span><br><span class="line">    &#123;    <span class="keyword">if</span> (j&lt;high &amp;&amp; R[j].key&lt;R[j+<span class="number">1</span>].key)     <span class="comment">/*若右孩子较大,把j指向右孩子*/</span></span><br><span class="line">            j++;                    <span class="comment">/*j变为2i+1,指向右孩子结点*/</span></span><br><span class="line">        <span class="keyword">if</span> (tmp.key&lt;R[j].key) </span><br><span class="line">        &#123;    R[i]=R[j];           <span class="comment">/*将R[j]调整到双亲结点位置上*/</span></span><br><span class="line">            i=j;                  <span class="comment">/*修改i和j值,以便继续向下筛选*/</span></span><br><span class="line">            j=<span class="number">2</span>*i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;              <span class="comment">/*筛选结束*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    R[i]=tmp;                     <span class="comment">/*被筛选结点的值放入最终位置*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">(LineList R[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    LineList tmp;</span><br><span class="line">    <span class="keyword">for</span> (i=n/<span class="number">2</span>;i&gt;=<span class="number">1</span>;i--)      <span class="comment">/*循环建立初始堆*/</span></span><br><span class="line">        Sift(R,i,n); </span><br><span class="line">    <span class="keyword">for</span> (i=n;i&gt;=<span class="number">2</span>;i--)       <span class="comment">/*进行n-1次循环,完成堆排序*/</span></span><br><span class="line">    &#123;      tmp=R[<span class="number">1</span>];            <span class="comment">/*将第一个元素同当前区间内R[1]对换*/</span></span><br><span class="line">        R[<span class="number">1</span>]=R[i];</span><br><span class="line">        R[i]=tmp;</span><br><span class="line">        Sift(R,<span class="number">1</span>,i<span class="number">-1</span>);         <span class="comment">/*筛选R[1]结点,得到i-1个结点的堆*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LineList R[MaxSize];</span><br><span class="line">    KeyType a[]=&#123;<span class="number">0</span>,<span class="number">75</span>,<span class="number">87</span>,<span class="number">68</span>,<span class="number">92</span>,<span class="number">88</span>,<span class="number">61</span>,<span class="number">77</span>,<span class="number">96</span>,<span class="number">80</span>,<span class="number">72</span>&#125;;    <span class="comment">/*有效数据从a[1]开始*/</span></span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">10</span>,i;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">        R[i].key=a[i];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排序前:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,R[i].key);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    HeapSort(R,n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排序后:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,R[i].key);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-交换排序"><a href="#4-交换排序" class="headerlink" title="4.交换排序"></a>4.交换排序</h3><h4 id="4-1-冒泡排序"><a href="#4-1-冒泡排序" class="headerlink" title="4.1.冒泡排序"></a>4.1.冒泡排序</h4><h5 id="4-1-1-基本思想"><a href="#4-1-1-基本思想" class="headerlink" title="4.1.1.基本思想"></a>4.1.1.基本思想</h5><ul><li>比较相邻两个元素，如果第一个比第二个大，就交换两者的顺序</li><li>对每一对相邻的元素做同样的操作，从最后一对到第一对，每一趟结束最小的元素会排在第一个（即冒泡）</li><li>从未排序的元素开始循环做以上操作，直到排序完成</li></ul><h5 id="4-1-2-步骤"><a href="#4-1-2-步骤" class="headerlink" title="4.1.2.步骤"></a>4.1.2.步骤</h5><ol><li>第一层循环: i=0; i&lt;(len-1); i++</li><li>第二层循环: j=len-1; j&gt;i; j–</li><li>比较相邻两个元素: list[j-1]和list[j]</li><li>如果前者比后者大，就交换顺序: list[j-1], list[j] = list[j], list[j-1]</li></ol><h5 id="4-1-3-By-C"><a href="#4-1-3-By-C" class="headerlink" title="4.1.3.By C++"></a>4.1.3.By C++</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> KeyType;        <span class="comment">/*关键字类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType[<span class="number">10</span>];    <span class="comment">/*其他数据项类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span>    </span><br><span class="line">    KeyType key;               <span class="comment">/*关键字域*/</span></span><br><span class="line">    ElemType data;             <span class="comment">/*其他数据域*/</span></span><br><span class="line">&#125; LineList;                    <span class="comment">/*线性表元素类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(LineList R[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,exchange;</span><br><span class="line">    LineList tmp;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++) </span><br><span class="line">    &#123;    exchange=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j=n<span class="number">-1</span>;j&gt;i;j--)    <span class="comment">/*比较,找出最小关键字的记录*/</span></span><br><span class="line">            <span class="keyword">if</span> (R[j].key&lt;R[j<span class="number">-1</span>].key)       </span><br><span class="line">            &#123;    tmp=R[j];  <span class="comment">/*R[j]与R[j-1]进行交换,将最小关键字记录前移*/</span></span><br><span class="line">                R[j]=R[j<span class="number">-1</span>];</span><br><span class="line">                R[j<span class="number">-1</span>]=tmp;</span><br><span class="line">                exchange=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span> (exchange==<span class="number">0</span>)     <span class="comment">/*本趟未发生交换时结束算法*/</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LineList R[MaxSize];</span><br><span class="line">    KeyType a[]=&#123;<span class="number">75</span>,<span class="number">87</span>,<span class="number">68</span>,<span class="number">92</span>,<span class="number">88</span>,<span class="number">61</span>,<span class="number">77</span>,<span class="number">96</span>,<span class="number">80</span>,<span class="number">72</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">10</span>,i;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        R[i].key=a[i];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排序前:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,R[i].key);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    BubbleSort(R,n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排序后:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,R[i].key);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-1-4-By-Golang"><a href="#4-1-4-By-Golang" class="headerlink" title="4.1.4.By Golang"></a>4.1.4.By Golang</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 冒泡排序，从小到大</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bubbleSort</span><span class="params">(list []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(list)<span class="number">-1</span>; i++ &#123;  </span><br><span class="line">        <span class="keyword">for</span> j := <span class="built_in">len</span>(list) - <span class="number">1</span>; j &gt; i; j-- &#123;  <span class="comment">// 从最后两个元素开始比较</span></span><br><span class="line">            <span class="keyword">if</span> list[j<span class="number">-1</span>] &gt; list[j] &#123; <span class="comment">// 相邻元素对比</span></span><br><span class="line">                list[j<span class="number">-1</span>], list[j] = list[j], list[j<span class="number">-1</span>] <span class="comment">// 如果后者比前者小，就交互位置</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Println(<span class="string">&quot;第&quot;</span>, i+<span class="number">1</span>, <span class="string">&quot;趟：&quot;</span>, list)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    list := []<span class="keyword">int</span>&#123;<span class="number">75</span>, <span class="number">87</span>, <span class="number">68</span>, <span class="number">92</span>, <span class="number">88</span>, <span class="number">61</span>, <span class="number">77</span>, <span class="number">96</span>, <span class="number">80</span>, <span class="number">72</span>&#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;初始序列:&quot;</span>, list)</span><br><span class="line">    result := bubbleSort(list)</span><br><span class="line">    fmt.Println(<span class="string">&quot;最终结果:&quot;</span>, result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-1-5-排序过程"><a href="#4-1-5-排序过程" class="headerlink" title="4.1.5.排序过程"></a>4.1.5.排序过程</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">初始序列: [75 87 68 92 88 61 77 96 80 72]</span><br><span class="line"></span><br><span class="line">第 1 趟： [61 75 87 68 92 88 72 77 96 80]</span><br><span class="line">第 2 趟： [61 68 75 87 72 92 88 77 80 96]</span><br><span class="line">第 3 趟： [61 68 72 75 87 77 92 88 80 96]</span><br><span class="line">第 4 趟： [61 68 72 75 77 87 80 92 88 96]</span><br><span class="line">第 5 趟： [61 68 72 75 77 80 87 88 92 96]</span><br><span class="line">第 6 趟： [61 68 72 75 77 80 87 88 92 96]</span><br><span class="line">第 7 趟： [61 68 72 75 77 80 87 88 92 96]</span><br><span class="line">第 8 趟： [61 68 72 75 77 80 87 88 92 96]</span><br><span class="line">第 9 趟： [61 68 72 75 77 80 87 88 92 96]</span><br><span class="line"></span><br><span class="line">最终结果: [61 68 72 75 77 80 87 88 92 96]</span><br></pre></td></tr></table></figure><h4 id="4-2-快速排序"><a href="#4-2-快速排序" class="headerlink" title="4.2.快速排序"></a>4.2.快速排序</h4><h5 id="4-2-1-基本思想"><a href="#4-2-1-基本思想" class="headerlink" title="4.2.1.基本思想"></a>4.2.1.基本思想</h5><ul><li>分治：在未排序序列中选择一个基准数（一般为第一个），将小于基准数的放在其左边，大于基准数的放在其右边，即分成两个区间</li><li>递归：将上述两个区间，每个区间内执行上述操作，以此类推，直到排序完成</li></ul><h5 id="4-2-2-步骤"><a href="#4-2-2-步骤" class="headerlink" title="4.2.2.步骤"></a>4.2.2.步骤</h5><ul><li>选择一个基准数，一般为第一个: pivot := list[left]</li><li>将小于基准数的放在其左边</li><li>将大于基准数的放在其右边</li><li>对每个分区执行递归操作：quickSort(list, left, i-1)；quickSort(list, i+1, right)</li></ul><h5 id="4-2-3-By-C"><a href="#4-2-3-By-C" class="headerlink" title="4.2.3.By C++"></a>4.2.3.By C++</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> KeyType;        <span class="comment">/*关键字类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType[<span class="number">10</span>];    <span class="comment">/*其他数据项类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span>    </span><br><span class="line">    KeyType key;               <span class="comment">/*关键字域*/</span></span><br><span class="line">    ElemType data;             <span class="comment">/*其他数据域*/</span></span><br><span class="line">&#125; LineList;                    <span class="comment">/*线性表元素类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(LineList R[],<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span> <span class="comment">/*对R[s]至R[t]的元素进行快速排序*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=s,j=t;</span><br><span class="line">    LineList tmp;</span><br><span class="line">    <span class="keyword">if</span> (s&lt;t)                 <span class="comment">/*区间内至少存在一个元素的情况*/</span></span><br><span class="line">    &#123;    tmp=R[s];             <span class="comment">/*用区间的第1个记录作为基准*/</span></span><br><span class="line">        <span class="keyword">while</span> (i!=j)          <span class="comment">/*从区间两端交替向中间扫描,直至i=j为止*/</span></span><br><span class="line">        &#123;    <span class="keyword">while</span> (j&gt;i &amp;&amp; R[j].key&gt;tmp.key) </span><br><span class="line">                j--;          <span class="comment">/*从右向左扫描,找第1个关键字小于tmp.key的R[j]*/</span> </span><br><span class="line">            R[i]=R[j];        <span class="comment">/*找到这样的R[j],则R[i]和R[j]交换*/</span></span><br><span class="line">            <span class="keyword">while</span> (i&lt;j &amp;&amp; R[i].key&lt;tmp.key) </span><br><span class="line">                i++;        <span class="comment">/*从左向右扫描,找第1个关键字大于tmp.key的R[i]*/</span></span><br><span class="line">            R[j]=R[i];        <span class="comment">/*找到这样的R[i],则R[i]和R[j]交换*/</span></span><br><span class="line">        &#125;</span><br><span class="line">        R[i]=tmp;</span><br><span class="line">        QuickSort(R,s,i<span class="number">-1</span>);    <span class="comment">/*对左区间递归排序*/</span></span><br><span class="line">        QuickSort(R,i+<span class="number">1</span>,t);    <span class="comment">/*对右区间递归排序*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LineList R[MaxSize];</span><br><span class="line">    KeyType a[]=&#123;<span class="number">75</span>,<span class="number">87</span>,<span class="number">68</span>,<span class="number">92</span>,<span class="number">88</span>,<span class="number">61</span>,<span class="number">77</span>,<span class="number">96</span>,<span class="number">80</span>,<span class="number">72</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">10</span>,i;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        R[i].key=a[i];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排序前:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,R[i].key);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    QuickSort(R,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排序后:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,R[i].key);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-2-4-By-Golang"><a href="#4-2-4-By-Golang" class="headerlink" title="4.2.4.By Golang"></a>4.2.4.By Golang</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">quickSort</span><span class="params">(list []<span class="keyword">int</span>, left, right <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> left &lt; right &#123;</span><br><span class="line">        i, j := left, right</span><br><span class="line">        pivot := list[left] <span class="comment">// 以左边第一个数作为基准数，将第一个数暂存在pivot变量中</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分治</span></span><br><span class="line">        <span class="keyword">for</span> i &lt; j &#123;</span><br><span class="line">            <span class="comment">// 从右向左找出第一个小于基准数的，将list[j]赋值给list[i] </span></span><br><span class="line">            <span class="keyword">for</span> j &gt; i &amp;&amp; list[j] &gt; pivot &#123;</span><br><span class="line">                j--</span><br><span class="line">            &#125;</span><br><span class="line">            list[i] = list[j]</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 从左向右找出第一个大于基准数的，将list[i]赋值给list[j] </span></span><br><span class="line">            <span class="keyword">for</span> i &lt; j &amp;&amp; list[i] &lt; pivot &#123;</span><br><span class="line">                i++</span><br><span class="line">            &#125;</span><br><span class="line">            list[j] = list[i]</span><br><span class="line">        &#125;</span><br><span class="line">        list[i] = pivot</span><br><span class="line">        fmt.Println(list) <span class="comment">// 打印该趟的序列</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 递归</span></span><br><span class="line">        quickSort(list, left, i<span class="number">-1</span>)</span><br><span class="line">        quickSort(list, i+<span class="number">1</span>, right)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    list := []<span class="keyword">int</span>&#123;<span class="number">75</span>, <span class="number">87</span>, <span class="number">68</span>, <span class="number">92</span>, <span class="number">88</span>, <span class="number">61</span>, <span class="number">77</span>, <span class="number">96</span>, <span class="number">80</span>, <span class="number">72</span>&#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;初始序列:&quot;</span>, list)</span><br><span class="line">    result := quickSort(list, <span class="number">0</span>, <span class="built_in">len</span>(list)<span class="number">-1</span>)</span><br><span class="line">    fmt.Println(<span class="string">&quot;最终结果:&quot;</span>, result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-2-5-排序过程"><a href="#4-2-5-排序过程" class="headerlink" title="4.2.5.排序过程"></a>4.2.5.排序过程</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">初始序列: [75 87 68 92 88 61 77 96 80 72]</span><br><span class="line"></span><br><span class="line">第 1 趟：[72 61 68 75 88 92 77 96 80 87]</span><br><span class="line">第 2 趟：[68 61 72 75 88 92 77 96 80 87]</span><br><span class="line">第 3 趟：[61 68 72 75 88 92 77 96 80 87]</span><br><span class="line">第 4 趟：[61 68 72 75 87 80 77 88 96 92]</span><br><span class="line">第 5 趟：[61 68 72 75 77 80 87 88 96 92]</span><br><span class="line">第 6 趟：[61 68 72 75 77 80 87 88 96 92]</span><br><span class="line">第 7 趟：[61 68 72 75 77 80 87 88 92 96]</span><br><span class="line"></span><br><span class="line">最终结果: [61 68 72 75 77 80 87 88 92 96]</span><br></pre></td></tr></table></figure><h3 id="5-归并排序"><a href="#5-归并排序" class="headerlink" title="5.归并排序"></a>5.归并排序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> KeyType;        <span class="comment">/*关键字类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType[<span class="number">10</span>];    <span class="comment">/*其他数据项类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span>    </span><br><span class="line">    KeyType key;               <span class="comment">/*关键字域*/</span></span><br><span class="line">    ElemType data;             <span class="comment">/*其他数据域*/</span></span><br><span class="line">&#125; LineList;                    <span class="comment">/*线性表元素类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(LineList R[],<span class="keyword">int</span> low,<span class="keyword">int</span> mid,<span class="keyword">int</span> high)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LineList *R1;</span><br><span class="line">    <span class="keyword">int</span> i=low,j=mid+<span class="number">1</span>,k=<span class="number">0</span>; <span class="comment">/*k是R1的下标,i、j分别为第1、2段的下标*/</span></span><br><span class="line">    R1=(LineList *)<span class="built_in">malloc</span>((high-low+<span class="number">1</span>)*<span class="keyword">sizeof</span>(LineList));  <span class="comment">/*动态分配空间*/</span></span><br><span class="line">    <span class="keyword">while</span> (i&lt;=mid &amp;&amp; j&lt;=high)    <span class="comment">/*在第1段和第2段均未扫描完时循环*/</span></span><br><span class="line">        <span class="keyword">if</span> (R[i].key&lt;=R[j].key)  <span class="comment">/*将第1段中的记录放入R1中*/</span></span><br><span class="line">        &#123;    R1[k]=R[i];</span><br><span class="line">            i++;k++; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>                           <span class="comment">/*将第2段中的记录放入R1中*/</span></span><br><span class="line">        &#123;    R1[k]=R[j];</span><br><span class="line">            j++;k++; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (i&lt;=mid)               <span class="comment">/*将第1段余下部分复制到R1*/</span></span><br><span class="line">        &#123;  </span><br><span class="line">            R1[k]=R[i];</span><br><span class="line">            i++;k++; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (j&lt;=high)           <span class="comment">/*将第2段余下部分复制到R1*/</span></span><br><span class="line">        &#123;    R1[k]=R[j];</span><br><span class="line">            j++;k++;  </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (k=<span class="number">0</span>,i=low;i&lt;=high;k++,i++) <span class="comment">/*将R1复制回R中*/</span></span><br><span class="line">            R[i]=R1[k];</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergePass</span><span class="params">(LineList R[],<span class="keyword">int</span> length,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i+<span class="number">2</span>*length<span class="number">-1</span>&lt;n;i=i+<span class="number">2</span>*length)     <span class="comment">/*归并length长的两相邻子表*/</span></span><br><span class="line">        Merge(R,i,i+length<span class="number">-1</span>,i+<span class="number">2</span>*length<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span> (i+length<span class="number">-1</span>&lt;n)                    <span class="comment">/*余下两个子表,后者长度小于length*/</span></span><br><span class="line">        Merge(R,i,i+length<span class="number">-1</span>,n<span class="number">-1</span>);     <span class="comment">/*归并这两个子表*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">(LineList R[],<span class="keyword">int</span> n)</span>    <span class="comment">/*二路归并算法*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">    <span class="keyword">for</span> (length=<span class="number">1</span>;length&lt;n;length=<span class="number">2</span>*length)</span><br><span class="line">        MergePass(R,length,n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LineList R[MaxSize];</span><br><span class="line">    KeyType a[]=&#123;<span class="number">75</span>,<span class="number">87</span>,<span class="number">68</span>,<span class="number">92</span>,<span class="number">88</span>,<span class="number">61</span>,<span class="number">77</span>,<span class="number">96</span>,<span class="number">80</span>,<span class="number">72</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">10</span>,i;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        R[i].key=a[i];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排序前:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,R[i].key);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    MergeSort(R,n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排序后:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,R[i].key);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-基数排序"><a href="#6-基数排序" class="headerlink" title="6.基数排序"></a>6.基数排序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXE 20            <span class="comment">/*线性表中最多元素个数*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXR 10            <span class="comment">/*基数的最大取值*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXD 8            <span class="comment">/*关键字位数的最大取值*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span>    </span><br><span class="line">    <span class="keyword">char</span> data[MAXD];    <span class="comment">/*记录的关键字定义的字符串*/</span></span><br><span class="line">       <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; RecType;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RadixSort</span><span class="params">(RecType *&amp;p,<span class="keyword">int</span> r,<span class="keyword">int</span> d)</span> </span></span><br><span class="line"><span class="function"><span class="comment">/*p为待排序序列链表指针,r为基数,d为关键字位数*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    RecType *head[MAXR],*tail[MAXR],*t;<span class="comment">/*定义各链队的首尾指针*/</span></span><br><span class="line">    <span class="keyword">int</span> i,j,k;</span><br><span class="line">    <span class="keyword">for</span> (i=d<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)                   <span class="comment">/*从低位到高位做d趟排序*/</span></span><br><span class="line">    &#123;    <span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;r;j++)                 <span class="comment">/*初始化各链队首、尾指针*/</span></span><br><span class="line">            head[j]=tail[j]=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">while</span> (p!=<span class="literal">NULL</span>)                  <span class="comment">/*对于原链表中每个结点循环*/</span></span><br><span class="line">        &#123;    k=p-&gt;data[i]-<span class="string">&#x27;0&#x27;</span>;           <span class="comment">/*找第k个链队*/</span></span><br><span class="line">            <span class="keyword">if</span> (head[k]==<span class="literal">NULL</span>)           <span class="comment">/*进行分配,即采用尾插法建立单链表*/</span></span><br><span class="line">            &#123;    </span><br><span class="line">                head[k]=p;</span><br><span class="line">                tail[k]=p;</span><br><span class="line">            &#125;</span><br><span class="line">              <span class="keyword">else</span></span><br><span class="line">            &#123;      </span><br><span class="line">                tail[k]-&gt;next=p;</span><br><span class="line">                tail[k]=p;</span><br><span class="line">            &#125;</span><br><span class="line">            p=p-&gt;next;                     <span class="comment">/*取下一个待排序的元素*/</span></span><br><span class="line">        &#125;</span><br><span class="line">        p=<span class="literal">NULL</span>;</span><br><span class="line">           <span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;r;j++)                <span class="comment">/*对于每一个链队循环*/</span></span><br><span class="line">            <span class="keyword">if</span> (head[j]!=<span class="literal">NULL</span>)             <span class="comment">/*进行收集*/</span></span><br><span class="line">            &#123;    <span class="keyword">if</span> (p==<span class="literal">NULL</span>)</span><br><span class="line">                &#123;    p=head[j];</span><br><span class="line">                    t=tail[j];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;    t-&gt;next=head[j];</span><br><span class="line">                    t=tail[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        t-&gt;next=<span class="literal">NULL</span>;                    <span class="comment">/*最后一个结点的next域置NULL*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    RecType *h=<span class="literal">NULL</span>,*p,*t;</span><br><span class="line">    <span class="keyword">char</span> *A[]=&#123;<span class="string">&quot;75&quot;</span>,<span class="string">&quot;87&quot;</span>,<span class="string">&quot;68&quot;</span>,<span class="string">&quot;92&quot;</span>,<span class="string">&quot;88&quot;</span>,<span class="string">&quot;61&quot;</span>,<span class="string">&quot;77&quot;</span>,<span class="string">&quot;96&quot;</span>,<span class="string">&quot;80&quot;</span>,<span class="string">&quot;72&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> i,n=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)        <span class="comment">/*构造不带头结点的单链表h*/</span></span><br><span class="line">    &#123;    </span><br><span class="line">        p=(RecType *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(RecType));</span><br><span class="line">        <span class="built_in">strcpy</span>(p-&gt;data,A[i]);</span><br><span class="line">        <span class="keyword">if</span> (h==<span class="literal">NULL</span>)</span><br><span class="line">        &#123;    </span><br><span class="line">            h=p;</span><br><span class="line">            t=h;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;    </span><br><span class="line">            t-&gt;next=p;</span><br><span class="line">            t=p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    t-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排序前:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3s&quot;</span>,A[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    RadixSort(h,<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排序后:&quot;</span>);</span><br><span class="line">    p=h;</span><br><span class="line">    <span class="keyword">while</span> (p!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;    </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3s&quot;</span>,p-&gt;data);</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构笔记归档2</title>
      <link href="/posts/766828b1.html"/>
      <url>/posts/766828b1.html</url>
      
        <content type="html"><![CDATA[<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><h3 id="1-队列的基本概念"><a href="#1-队列的基本概念" class="headerlink" title="1.队列的基本概念"></a>1.队列的基本概念</h3><p><a href="https://baike.baidu.com/item/%E9%98%9F%E5%88%97/14580481">队列</a>是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。</p><h4 id="1-1-队列的定义"><a href="#1-1-队列的定义" class="headerlink" title="1.1.队列的定义"></a>1.1.队列的定义</h4><p>队列也是一种特殊的线性表，插入操作在一端进行，称为队头，删除操作在另一端进行，称为队尾。</p><p>队列就跟生活中的排队类似，不允许插队，先排的人可以先得到服务。</p><h4 id="1-2-队列的特征"><a href="#1-2-队列的特征" class="headerlink" title="1.2.队列的特征"></a>1.2.队列的特征</h4><ul><li>先进先出（FIFO）</li></ul><h4 id="1-3-队列的基本运算"><a href="#1-3-队列的基本运算" class="headerlink" title="1.3.队列的基本运算"></a>1.3.队列的基本运算</h4><ul><li>初始化队列</li><li>入队</li><li>出队</li><li>取队头的元素</li><li>判断队列是否为空</li></ul><h3 id="2-队列的存储结构"><a href="#2-队列的存储结构" class="headerlink" title="2.队列的存储结构"></a>2.队列的存储结构</h3><h4 id="2-1-顺序存储结构"><a href="#2-1-顺序存储结构" class="headerlink" title="2.1.顺序存储结构"></a>2.1.顺序存储结构</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QueueSize 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>  </span></span><br><span class="line"><span class="class">&#123;</span>    </span><br><span class="line">    ElemType data[QueueSize];    <span class="comment">/*保存队中元素*/</span></span><br><span class="line">    <span class="keyword">int</span> front,rear;                <span class="comment">/*队头和队尾指针*/</span></span><br><span class="line">&#125; SqQueue;</span><br></pre></td></tr></table></figure><h4 id="2-2-链式存储结构"><a href="#2-2-链式存储结构" class="headerlink" title="2.2.链式存储结构"></a>2.2.链式存储结构</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; QType;                <span class="comment">/*链队中结点的类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">qptr</span>        </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    QType *front,*rear;</span><br><span class="line">&#125; LinkQueue;            <span class="comment">/*链队类型*/</span></span><br></pre></td></tr></table></figure><h3 id="3-顺序队基本运算"><a href="#3-顺序队基本运算" class="headerlink" title="3.顺序队基本运算"></a>3.顺序队基本运算</h3><h4 id="3-1-顺序队列的定义"><a href="#3-1-顺序队列的定义" class="headerlink" title="3.1.顺序队列的定义"></a>3.1.顺序队列的定义</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QueueSize 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>  </span></span><br><span class="line"><span class="class">&#123;</span>    </span><br><span class="line">    ElemType data[QueueSize];    <span class="comment">/*保存队中元素*/</span></span><br><span class="line">    <span class="keyword">int</span> front,rear;                <span class="comment">/*队头和队尾指针*/</span></span><br><span class="line">&#125; SqQueue;</span><br></pre></td></tr></table></figure><h4 id="3-2-初始化队列"><a href="#3-2-初始化队列" class="headerlink" title="3.2.初始化队列"></a>3.2.初始化队列</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitQueue</span><span class="params">(SqQueue &amp;qu)</span>        <span class="comment">/*qu为引用型参数*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       qu.rear=qu.front=<span class="number">0</span>;           <span class="comment">/*指针初始化*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-入队运算"><a href="#3-3-入队运算" class="headerlink" title="3.3.入队运算"></a>3.3.入队运算</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">EnQueue</span><span class="params">(SqQueue &amp;qu,ElemType x)</span>    <span class="comment">/*入队运算,qu为引用型参数*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((qu.rear+<span class="number">1</span>)%QueueSize==qu.front)    <span class="comment">/*队满*/</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    qu.rear=(qu.rear+<span class="number">1</span>)%QueueSize;      <span class="comment">/*队尾指针进1*/</span></span><br><span class="line">    qu.data[qu.rear]=x;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4-出队运算"><a href="#3-4-出队运算" class="headerlink" title="3.4.出队运算"></a>3.4.出队运算</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DeQueue</span><span class="params">(SqQueue &amp;qu,ElemType &amp;x)</span>    <span class="comment">/*出队运算,qu和x为引用型参数*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (qu.rear==qu.front)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    qu.front=(qu.front+<span class="number">1</span>)%QueueSize;    <span class="comment">/*队头指针进1*/</span></span><br><span class="line">    x=qu.data[qu.front];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-5-取队头元素运算"><a href="#3-5-取队头元素运算" class="headerlink" title="3.5.取队头元素运算"></a>3.5.取队头元素运算</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetHead</span><span class="params">(SqQueue qu,ElemType &amp;x)</span>        <span class="comment">/*取队头元素运算,x为引用型参数*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (qu.rear==qu.front)        <span class="comment">/*队空*/</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    x=qu.data[(qu.front+<span class="number">1</span>)%QueueSize];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-6-判断队空运算"><a href="#3-6-判断队空运算" class="headerlink" title="3.6.判断队空运算"></a>3.6.判断队空运算</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QueueEmpty</span><span class="params">(SqQueue qu)</span>        <span class="comment">/*判断队空运算*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (qu.rear==qu.front)        <span class="comment">/*队空*/</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-7-main"><a href="#3-7-main" class="headerlink" title="3.7.main"></a>3.7.main</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SqQueue qu;</span><br><span class="line">    ElemType e;</span><br><span class="line">    InitQueue(qu);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;队%s\n&quot;</span>,(QueueEmpty(qu)==<span class="number">1</span>?<span class="string">&quot;空&quot;</span>:<span class="string">&quot;不空&quot;</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a进队\n&quot;</span>);EnQueue(qu,<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;b进队\n&quot;</span>);EnQueue(qu,<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c进队\n&quot;</span>);EnQueue(qu,<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;d进队\n&quot;</span>);EnQueue(qu,<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;队%s\n&quot;</span>,(QueueEmpty(qu)==<span class="number">1</span>?<span class="string">&quot;空&quot;</span>:<span class="string">&quot;不空&quot;</span>));</span><br><span class="line">    GetHead(qu,e);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;队头元素:%c\n&quot;</span>,e);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;出队次序:&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (!QueueEmpty(qu))</span><br><span class="line">    &#123;</span><br><span class="line">        DeQueue(qu,e);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>,e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-链队基本运算"><a href="#4-链队基本运算" class="headerlink" title="4.链队基本运算"></a>4.链队基本运算</h3><h4 id="4-1-链式队列的定义"><a href="#4-1-链式队列的定义" class="headerlink" title="4.1.链式队列的定义"></a>4.1.链式队列的定义</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; QType;                <span class="comment">/*链队中结点的类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">qptr</span>        </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    QType *front,*rear;</span><br><span class="line">&#125; LinkQueue;            <span class="comment">/*链队类型*/</span></span><br></pre></td></tr></table></figure><h4 id="4-2-初始化队列"><a href="#4-2-初始化队列" class="headerlink" title="4.2.初始化队列"></a>4.2.初始化队列</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitQueue</span><span class="params">(LinkQueue *&amp;lq)</span>            <span class="comment">/*lq为引用型参数*/</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    lq=(LinkQueue *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkQueue));</span><br><span class="line">    lq-&gt;rear=lq-&gt;front=<span class="literal">NULL</span>;             <span class="comment">/*初始情况*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-入队运算"><a href="#4-3-入队运算" class="headerlink" title="4.3.入队运算"></a>4.3.入队运算</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EnQueue</span><span class="params">(LinkQueue *&amp;lq,ElemType x)</span>    <span class="comment">/*入队运算,lq为引用型参数*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QType *s;</span><br><span class="line">    s=(QType *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QType));      <span class="comment">/*创建新结点，插入到链队的末尾*/</span></span><br><span class="line">    s-&gt;data=x;s-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (lq-&gt;front==<span class="literal">NULL</span> &amp;&amp; lq-&gt;rear==<span class="literal">NULL</span>)     <span class="comment">/*空队*/</span></span><br><span class="line">        lq-&gt;rear=lq-&gt;front=s;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        lq-&gt;rear-&gt;next=s;</span><br><span class="line">        lq-&gt;rear=s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-出队运算"><a href="#4-4-出队运算" class="headerlink" title="4.4.出队运算"></a>4.4.出队运算</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DeQueue</span><span class="params">(LinkQueue *&amp;lq,ElemType &amp;x)</span>     <span class="comment">/*出队运算,lq和x均为引用型参数*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QType *p;</span><br><span class="line">    <span class="keyword">if</span> (lq-&gt;front==<span class="literal">NULL</span> &amp;&amp; lq-&gt;rear==<span class="literal">NULL</span>)  <span class="comment">/*空队*/</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    p=lq-&gt;front;</span><br><span class="line">    x=p-&gt;data;</span><br><span class="line">    <span class="keyword">if</span> (lq-&gt;rear==lq-&gt;front)  <span class="comment">/*若原队列中只有一个结点,删除后队列变空*/</span></span><br><span class="line">        lq-&gt;rear=lq-&gt;front=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        lq-&gt;front=lq-&gt;front-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-5-取队头元素运算"><a href="#4-5-取队头元素运算" class="headerlink" title="4.5.取队头元素运算"></a>4.5.取队头元素运算</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetHead</span><span class="params">(LinkQueue *lq,ElemType &amp;x)</span>     <span class="comment">/*取队头元素运算,x为引用型参数*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lq-&gt;front==<span class="literal">NULL</span> &amp;&amp; lq-&gt;rear==<span class="literal">NULL</span>)    <span class="comment">/*队空*/</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    x=lq-&gt;front-&gt;data;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-6-判断队空运算"><a href="#4-6-判断队空运算" class="headerlink" title="4.6.判断队空运算"></a>4.6.判断队空运算</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QueueEmpty</span><span class="params">(LinkQueue *lq)</span>    <span class="comment">/*判断队空运算*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lq-&gt;front==<span class="literal">NULL</span> &amp;&amp; lq-&gt;rear==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-7-main"><a href="#4-7-main" class="headerlink" title="4.7.main"></a>4.7.main</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkQueue *lq;</span><br><span class="line">    ElemType e;</span><br><span class="line">    InitQueue(lq);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;队%s\n&quot;</span>,(QueueEmpty(lq)==<span class="number">1</span>?<span class="string">&quot;空&quot;</span>:<span class="string">&quot;不空&quot;</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a进队\n&quot;</span>);EnQueue(lq,<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;b进队\n&quot;</span>);EnQueue(lq,<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c进队\n&quot;</span>);EnQueue(lq,<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;d进队\n&quot;</span>);EnQueue(lq,<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;队%s\n&quot;</span>,(QueueEmpty(lq)==<span class="number">1</span>?<span class="string">&quot;空&quot;</span>:<span class="string">&quot;不空&quot;</span>));</span><br><span class="line">    GetHead(lq,e);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;队头元素:%c\n&quot;</span>,e);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;出队次序:&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (!QueueEmpty(lq))</span><br><span class="line">    &#123;</span><br><span class="line">        DeQueue(lq,e);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>,e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-队列的基本运算-By-Go"><a href="#5-队列的基本运算-By-Go" class="headerlink" title="5.队列的基本运算(By-Go)"></a>5.队列的基本运算(By-Go)</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Package queue creates a ItemQueue data structure for the Item type</span></span><br><span class="line"><span class="keyword">package</span> queue</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Item the type of the queue</span></span><br><span class="line"><span class="keyword">type</span> Item <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ItemQueue the queue of Items</span></span><br><span class="line"><span class="keyword">type</span> ItemQueue <span class="keyword">struct</span> &#123;</span><br><span class="line">    items []Item</span><br><span class="line">    lock  sync.RWMutex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// New creates a new ItemQueue</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *ItemQueue)</span> <span class="title">New</span><span class="params">()</span> *<span class="title">ItemQueue</span></span> &#123;</span><br><span class="line">    s.lock.Lock()</span><br><span class="line">    s.items = []Item&#123;&#125;</span><br><span class="line">    s.lock.Unlock()</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Enqueue adds an Item to the end of the queue</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *ItemQueue)</span> <span class="title">Enqueue</span><span class="params">(t Item)</span></span> &#123;</span><br><span class="line">    s.lock.Lock()</span><br><span class="line">    s.items = <span class="built_in">append</span>(s.items, t)</span><br><span class="line">    s.lock.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dequeue removes an Item from the start of the queue</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *ItemQueue)</span> <span class="title">Dequeue</span><span class="params">()</span> *<span class="title">Item</span></span> &#123;</span><br><span class="line">    s.lock.Lock()</span><br><span class="line">    item := s.items[<span class="number">0</span>]</span><br><span class="line">    s.items = s.items[<span class="number">1</span>:<span class="built_in">len</span>(s.items)]</span><br><span class="line">    s.lock.Unlock()</span><br><span class="line">    <span class="keyword">return</span> &amp;item</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Front returns the item next in the queue, without removing it</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *ItemQueue)</span> <span class="title">Front</span><span class="params">()</span> *<span class="title">Item</span></span> &#123;</span><br><span class="line">    s.lock.RLock()</span><br><span class="line">    item := s.items[<span class="number">0</span>]</span><br><span class="line">    s.lock.RUnlock()</span><br><span class="line">    <span class="keyword">return</span> &amp;item</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IsEmpty returns true if the queue is empty</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *ItemQueue)</span> <span class="title">IsEmpty</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    s.lock.RLock()</span><br><span class="line">    <span class="keyword">defer</span> s.lock.RUnlock()</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(s.items) == <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Size returns the number of Items in the queue</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *ItemQueue)</span> <span class="title">Size</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    s.lock.RLock()</span><br><span class="line">    <span class="keyword">defer</span> s.lock.RUnlock()</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(s.items)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-看病排队问题"><a href="#6-看病排队问题" class="headerlink" title="6.看病排队问题"></a>6.看病排队问题</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> data[<span class="number">10</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; QType;        <span class="comment">/*链队结点类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    QType *front,*rear;</span><br><span class="line">&#125; LinkQueue;    <span class="comment">/*链队类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeeDoctor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sel,flag=<span class="number">1</span>;</span><br><span class="line">    LinkQueue *lq;</span><br><span class="line">    QType *s;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">10</span>];</span><br><span class="line">    lq=(LinkQueue *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkQueue));</span><br><span class="line">    lq-&gt;front=(QType *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QType));</span><br><span class="line">    lq-&gt;front-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    lq-&gt;rear=lq-&gt;front;</span><br><span class="line">    <span class="keyword">while</span> (flag==<span class="number">1</span>)     <span class="comment">/*未下班时循环执行*/</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1:排队 2:看医生 3:查看排队 0:下班  请选择:&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;sel); </span><br><span class="line">        <span class="keyword">switch</span>(sel) </span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> (lq-&gt;front!=lq-&gt;rear)     <span class="comment">/*队不空*/</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;  &gt;&gt;请排队的患者明天就医\n&quot;</span>);</span><br><span class="line">            flag=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;  &gt;&gt;输入患者姓名:&quot;</span>);<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,name);</span><br><span class="line">            s=(QType *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QType));</span><br><span class="line">            <span class="built_in">strcpy</span>(s-&gt;data,name);s-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">            lq-&gt;rear-&gt;next=s;lq-&gt;rear=s;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">2</span>:    </span><br><span class="line">            <span class="keyword">if</span> (lq-&gt;front==lq-&gt;rear)    <span class="comment">/*队空*/</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;  &gt;&gt;没有排队的患者\n&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123;</span><br><span class="line">                s=lq-&gt;front-&gt;next;</span><br><span class="line">                <span class="keyword">if</span> (lq-&gt;rear==s)</span><br><span class="line">                    lq-&gt;rear=lq-&gt;front;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;  &gt;&gt;患者%s看医生\n&quot;</span>,s-&gt;data);</span><br><span class="line">                lq-&gt;front-&gt;next=s-&gt;next;</span><br><span class="line">                <span class="built_in">free</span>(s);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">if</span> (lq-&gt;front==lq-&gt;rear)    <span class="comment">/*队空*/</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;  &gt;&gt;没有排列的患者\n&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123;    </span><br><span class="line">                s=lq-&gt;front-&gt;next;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;  &gt;&gt;排队患者:&quot;</span>);</span><br><span class="line">                <span class="keyword">while</span> (s!=<span class="literal">NULL</span>) </span><br><span class="line">                &#123;      </span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>,s-&gt;data);</span><br><span class="line">                    s=s-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SeeDoctor();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="串和数组"><a href="#串和数组" class="headerlink" title="串和数组"></a>串和数组</h2><h3 id="1-串的基本概念"><a href="#1-串的基本概念" class="headerlink" title="1.串的基本概念"></a>1.串的基本概念</h3><p><a href="https://baike.baidu.com/item/%E5%AD%97%E7%AC%A6%E4%B8%B2/1017763">字符串</a>在存储上类似字符数组，所以它每一位的单个元素都是可以提取的，如s=“abcdefghij”，则s[1]=“b”，s[9]=”j”，这可以给我们提供很多方便，如高精度运算时每一位都可以转化为数字存入数组。</p><h4 id="1-1-字符串的定义"><a href="#1-1-字符串的定义" class="headerlink" title="1.1.字符串的定义"></a>1.1.字符串的定义</h4><p>字符串的由零个或多个的字符组成的有限序列，一般表示为”a1a2…an”。</p><h4 id="1-2-字符串的特征"><a href="#1-2-字符串的特征" class="headerlink" title="1.2.字符串的特征"></a>1.2.字符串的特征</h4><ul><li>串中字符的个数称为串的长度</li><li>任意连续的字符组成的子序列称为该串的子串</li><li>子串的位置为子串第一个字符在原串中的位置</li></ul><h4 id="1-3-字符串的基本运算"><a href="#1-3-字符串的基本运算" class="headerlink" title="1.3.字符串的基本运算"></a>1.3.字符串的基本运算</h4><ul><li>串的赋值</li><li>串的复制</li><li>求串的长度</li><li>判断两个串是否相等</li><li>串的拼接</li><li>求子串</li><li>查找子串的位置</li><li>插入子串</li><li>删除子串</li><li>替换子串</li><li>输出串</li></ul><h3 id="2-字符串的存储结构"><a href="#2-字符串的存储结构" class="headerlink" title="2.字符串的存储结构"></a>2.字符串的存储结构</h3><h4 id="2-1-顺序存储结构-1"><a href="#2-1-顺序存储结构-1" class="headerlink" title="2.1.顺序存储结构"></a>2.1.顺序存储结构</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 100  <span class="comment">/*最多字符个数*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span>    </span><br><span class="line">    <span class="keyword">char</span> ch[MaxSize];    <span class="comment">/*存放串字符*/</span></span><br><span class="line">       <span class="keyword">int</span> len;            <span class="comment">/*存放串的实际长度*/</span></span><br><span class="line">&#125; SqString;                <span class="comment">/*顺序串类型*/</span></span><br></pre></td></tr></table></figure><h4 id="2-2-链式存储结构-1"><a href="#2-2-链式存储结构-1" class="headerlink" title="2.2.链式存储结构"></a>2.2.链式存储结构</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span>    </span><br><span class="line">    <span class="keyword">char</span> data;            <span class="comment">/*存放字符*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span>    <span class="comment">/*指针域*/</span></span><br><span class="line">&#125; LinkString;</span><br></pre></td></tr></table></figure><h3 id="3-顺序串基本运算"><a href="#3-顺序串基本运算" class="headerlink" title="3.顺序串基本运算"></a>3.顺序串基本运算</h3><h4 id="3-1-顺序串的定义"><a href="#3-1-顺序串的定义" class="headerlink" title="3.1.顺序串的定义"></a>3.1.顺序串的定义</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 100  <span class="comment">/*最多字符个数*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span>    </span><br><span class="line">    <span class="keyword">char</span> ch[MaxSize];    <span class="comment">/*存放串字符*/</span></span><br><span class="line">       <span class="keyword">int</span> len;            <span class="comment">/*存放串的实际长度*/</span></span><br><span class="line">&#125; SqString;                <span class="comment">/*顺序串类型*/</span></span><br></pre></td></tr></table></figure><h4 id="3-2-赋值运算"><a href="#3-2-赋值运算" class="headerlink" title="3.2.赋值运算"></a>3.2.赋值运算</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Assign</span><span class="params">(SqString &amp;s,<span class="keyword">char</span> t[])</span>    <span class="comment">/*串赋值运算*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (t[i]!=<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        s.ch[i]=t[i];</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    s.len=i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-复制运算"><a href="#3-3-复制运算" class="headerlink" title="3.3.复制运算"></a>3.3.复制运算</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StrCopy</span><span class="params">(SqString &amp;s,SqString t)</span>    <span class="comment">/*串复制运算*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;t.len;i++)</span><br><span class="line">        s.ch[i]=t.ch[i];</span><br><span class="line">    s.len=t.len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4-求串长运算"><a href="#3-4-求串长运算" class="headerlink" title="3.4.求串长运算"></a>3.4.求串长运算</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StrLength</span><span class="params">(SqString s)</span>    <span class="comment">/*求串长运算*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span>(s.len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-5-判断串相等运算"><a href="#3-5-判断串相等运算" class="headerlink" title="3.5.判断串相等运算"></a>3.5.判断串相等运算</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StrEqual</span><span class="params">(SqString s,SqString t)</span>    <span class="comment">/*判断串相等运算*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (s.len!=t.len)        <span class="comment">/*串长不同时返回0*/</span></span><br><span class="line">        <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;s.len;i++)</span><br><span class="line">            <span class="keyword">if</span> (s.ch[i]!=t.ch[i]) <span class="comment">/*有一个对应字符不同时返回0*/</span></span><br><span class="line">                <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-6-串连接运算"><a href="#3-6-串连接运算" class="headerlink" title="3.6.串连接运算"></a>3.6.串连接运算</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">SqString <span class="title">Concat</span><span class="params">(SqString s,SqString t)</span>    <span class="comment">/*串连接运算*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SqString r;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;s.len;i++)        <span class="comment">/*将s复制到r*/</span></span><br><span class="line">        r.ch[i]=s.ch[i];</span><br><span class="line">    <span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;t.len;j++)        <span class="comment">/*将t复制到r*/</span></span><br><span class="line">        r.ch[s.len+j]=t.ch[j];</span><br><span class="line">    r.len=i+j;</span><br><span class="line">    <span class="keyword">return</span>(r);                    <span class="comment">/*返回r*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-7-求子串运算"><a href="#3-7-求子串运算" class="headerlink" title="3.7.求子串运算"></a>3.7.求子串运算</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">SqString <span class="title">SubStr</span><span class="params">(SqString s,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span>    <span class="comment">/*求子串运算*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SqString t;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;s.len || j&lt;<span class="number">1</span> || i+j&gt;s.len+<span class="number">1</span>)</span><br><span class="line">        t.len=<span class="number">0</span>;            <span class="comment">/*参数错误时返回空串*/</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (k=i<span class="number">-1</span>;k&lt;i+j;k++)</span><br><span class="line">            t.ch[k-i+<span class="number">1</span>]=s.ch[k];</span><br><span class="line">        t.len=j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>(t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-8-查找子串位置运算"><a href="#3-8-查找子串位置运算" class="headerlink" title="3.8.查找子串位置运算"></a>3.8.查找子串位置运算</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Index</span><span class="params">(SqString s,SqString t)</span>    <span class="comment">/*查找子串位置运算*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>,k;                <span class="comment">/*i和j分别扫描主串s和子串t*/</span></span><br><span class="line">    <span class="keyword">while</span> (i&lt;s.len &amp;&amp; j&lt;t.len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.ch[i]==t.ch[j]) <span class="comment">/*对应字符相同时,继续比较下一对字符*/</span></span><br><span class="line">        &#123;</span><br><span class="line">            i++;j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>                <span class="comment">/*否则,主子串指针回溯重新开始下一次匹配*/</span></span><br><span class="line">        &#123;</span><br><span class="line">            i=i-j+<span class="number">1</span>;j=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (j&gt;=t.len)</span><br><span class="line">        k=i-t.len+<span class="number">1</span>;<span class="comment">/*求出第一个字符的位置*/</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        k=<span class="number">-1</span>;        <span class="comment">/*置特殊值-1*/</span></span><br><span class="line">    <span class="keyword">return</span>(k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-9-子串插入运算"><a href="#3-9-子串插入运算" class="headerlink" title="3.9.子串插入运算"></a>3.9.子串插入运算</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InsStr</span><span class="params">(SqString &amp;s,<span class="keyword">int</span> i,SqString t)</span>    <span class="comment">/*子串插入运算*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">if</span> (i&gt;s.len+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span>(<span class="number">0</span>);                    <span class="comment">/*位置参数值错误*/</span></span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j=s.len;j&gt;=i<span class="number">-1</span>;j--)     <span class="comment">/*将s.ch[i-1]-s.ch[s.len-1]*/</span></span><br><span class="line">            s.ch[j+t.len]=s.ch[j];    <span class="comment">/*后移t.len个位置*/</span></span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;t.len;j++)</span><br><span class="line">            s.ch[i+j<span class="number">-1</span>]=t.ch[j];</span><br><span class="line">        s.len=s.len+t.len;             <span class="comment">/*修改s串长度*/</span></span><br><span class="line">        <span class="keyword">return</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-10-子串删除运算"><a href="#3-10-子串删除运算" class="headerlink" title="3.10.子串删除运算"></a>3.10.子串删除运算</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DelStr</span><span class="params">(SqString &amp;s,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span>    <span class="comment">/*子串删除运算*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;s.len || j&lt;<span class="number">1</span> || i+j&gt;s.len+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span>(<span class="number">0</span>);        <span class="comment">/*位置参数值错误*/</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (k=i+j<span class="number">-1</span>;k&lt;s.len;k++)     <span class="comment">/*将s的第i+j位置之后的字符前移j位*/</span></span><br><span class="line">            s.ch[k-j]=s.ch[k];</span><br><span class="line">        s.len=s.len-j;                <span class="comment">/*修改s的长度*/</span></span><br><span class="line">        <span class="keyword">return</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-11-子串替换运算"><a href="#3-11-子串替换运算" class="headerlink" title="3.11.子串替换运算"></a>3.11.子串替换运算</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">SqString <span class="title">RepStrAll</span><span class="params">(SqString s,SqString s1,SqString s2)</span>    <span class="comment">/*子串替换运算*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    i=Index(s,s1);</span><br><span class="line">    <span class="keyword">while</span> (i&gt;=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        DelStr(s,i,s1.len);    <span class="comment">/*删除*/</span></span><br><span class="line">        InsStr(s,i,s2);        <span class="comment">/*插入*/</span></span><br><span class="line">        i=Index(s,s1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-12-输出串运算"><a href="#3-12-输出串运算" class="headerlink" title="3.12.输出串运算"></a>3.12.输出串运算</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispStr</span><span class="params">(SqString s)</span>    <span class="comment">/*输出串运算*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;s.len;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,s.ch[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-13-main"><a href="#3-13-main" class="headerlink" title="3.13.main"></a>3.13.main</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SqString s1,s2,s3,s4,s5,s6,s7;</span><br><span class="line">    Assign(s1,<span class="string">&quot;abcd&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s1:&quot;</span>);DispStr(s1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s1的长度:%d\n&quot;</span>,StrLength(s1));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s1=&gt;s2\n&quot;</span>);</span><br><span class="line">    StrCopy(s2,s1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s2:&quot;</span>);DispStr(s2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s1和s2%s\n&quot;</span>,(StrEqual(s1,s2)==<span class="number">1</span>?<span class="string">&quot;相同&quot;</span>:<span class="string">&quot;不相同&quot;</span>));</span><br><span class="line">    Assign(s3,<span class="string">&quot;12345678&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s3:&quot;</span>);DispStr(s3);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s1和s3连接=&gt;s4\n&quot;</span>);</span><br><span class="line">    s4=Concat(s1,s3);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s4:&quot;</span>);DispStr(s4);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s3[2..5]=&gt;s5\n&quot;</span>);</span><br><span class="line">    s5=SubStr(s3,<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s5:&quot;</span>);DispStr(s5);</span><br><span class="line">    Assign(s6,<span class="string">&quot;567&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s6:&quot;</span>);DispStr(s6);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s6在s3中位置:%d\n&quot;</span>,Index(s3,s6));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;从s3中删除s3[3..6]字符\n&quot;</span>);</span><br><span class="line">    DelStr(s3,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s3:&quot;</span>);DispStr(s3);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;从s4中将s6替换成s1=&gt;s7\n&quot;</span>);</span><br><span class="line">    s7=RepStrAll(s4,s6,s1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s7:&quot;</span>);DispStr(s7);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-链串基本运算"><a href="#4-链串基本运算" class="headerlink" title="4.链串基本运算"></a>4.链串基本运算</h3><h4 id="4-1-链串的定义"><a href="#4-1-链串的定义" class="headerlink" title="4.1.链串的定义"></a>4.1.链串的定义</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span>    </span><br><span class="line">    <span class="keyword">char</span> data;            <span class="comment">/*存放字符*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span>    <span class="comment">/*指针域*/</span></span><br><span class="line">&#125; LinkString;</span><br></pre></td></tr></table></figure><h4 id="4-2-赋值运算"><a href="#4-2-赋值运算" class="headerlink" title="4.2.赋值运算"></a>4.2.赋值运算</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Assign</span><span class="params">(LinkString *&amp;s,<span class="keyword">char</span> t[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    LinkString *q,*tc;</span><br><span class="line">    s=(LinkString *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkString)); <span class="comment">/*建立头结点*/</span></span><br><span class="line">    s-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    tc=s;                    <span class="comment">/*tc指向s串的尾结点*/</span></span><br><span class="line">    <span class="keyword">while</span> (t[i]!=<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        q=(LinkString *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkString));</span><br><span class="line">        q-&gt;data=t[i];</span><br><span class="line">        tc-&gt;next=q;tc=q;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    tc-&gt;next=<span class="literal">NULL</span>;        <span class="comment">/*终端结点的next置NULL*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-复制运算"><a href="#4-3-复制运算" class="headerlink" title="4.3.复制运算"></a>4.3.复制运算</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StrCopy</span><span class="params">(LinkString *&amp;s,LinkString *t)</span>    <span class="comment">/*t=&gt;s*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkString *p=t-&gt;next,*q,*tc;</span><br><span class="line">    s=(LinkString *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkString)); <span class="comment">/*建立头结点*/</span></span><br><span class="line">    s-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    tc=s;                <span class="comment">/*tc指向s串的尾结点*/</span></span><br><span class="line">    <span class="keyword">while</span> (p!=<span class="literal">NULL</span>)        <span class="comment">/*复制t的所有结点*/</span></span><br><span class="line">    &#123;</span><br><span class="line">        q=(LinkString *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkString));</span><br><span class="line">        q-&gt;data=p-&gt;data;</span><br><span class="line">        tc-&gt;next=q;tc=q;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    tc-&gt;next=<span class="literal">NULL</span>;        <span class="comment">/*终端结点的next置NULL*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-求串长运算"><a href="#4-4-求串长运算" class="headerlink" title="4.4.求串长运算"></a>4.4.求串长运算</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StrLength</span><span class="params">(LinkString *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">    LinkString *p=s-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p!=<span class="literal">NULL</span>)        <span class="comment">/*扫描串s的所有结点*/</span></span><br><span class="line">    &#123;</span><br><span class="line">        n++;p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-5-判断串相等运算"><a href="#4-5-判断串相等运算" class="headerlink" title="4.5.判断串相等运算"></a>4.5.判断串相等运算</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StrEqual</span><span class="params">(LinkString *s,LinkString *t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkString *p=s-&gt;next,*q=t-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p!=<span class="literal">NULL</span> &amp;&amp; q!=<span class="literal">NULL</span>)    <span class="comment">/*比较两串的当前结点*/</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;data!=q-&gt;data)    <span class="comment">/*data域不等时返回0*/</span></span><br><span class="line">            <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">        p=p-&gt;next;q=q-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p!=<span class="literal">NULL</span> || q!=<span class="literal">NULL</span>)        <span class="comment">/*两串长度不等时返回0*/</span></span><br><span class="line">        <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-6-串连接运算"><a href="#4-6-串连接运算" class="headerlink" title="4.6.串连接运算"></a>4.6.串连接运算</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LinkString *<span class="title">Concat</span><span class="params">(LinkString *s,LinkString *t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkString *p=s-&gt;next,*q,*tc,*str;</span><br><span class="line">    str=(LinkString *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkString));  <span class="comment">/*建立头结点*/</span></span><br><span class="line">    str-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    tc=str;                <span class="comment">/*tc总是指向新链表的尾结点*/</span></span><br><span class="line">    <span class="keyword">while</span> (p!=<span class="literal">NULL</span>)        <span class="comment">/*将s串复制给str*/</span></span><br><span class="line">    &#123;</span><br><span class="line">        q=(LinkString *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkString));</span><br><span class="line">        q-&gt;data=p-&gt;data;</span><br><span class="line">        tc-&gt;next=q;tc=q;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    p=t-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p!=<span class="literal">NULL</span>)        <span class="comment">/*将t串复制给str*/</span></span><br><span class="line">    &#123;</span><br><span class="line">        q=(LinkString *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkString));</span><br><span class="line">        q-&gt;data=p-&gt;data;</span><br><span class="line">        tc-&gt;next=q;tc=q;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    tc-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span>(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-7-求子串运算"><a href="#4-7-求子串运算" class="headerlink" title="4.7.求子串运算"></a>4.7.求子串运算</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LinkString *<span class="title">SubStr</span><span class="params">(LinkString *s,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">1</span>;</span><br><span class="line">    LinkString *p=s-&gt;next,*q,*tc,*str;</span><br><span class="line">    str=(LinkString *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkString));  <span class="comment">/*建立头结点*/</span></span><br><span class="line">    str-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    tc=str;                            <span class="comment">/*tc总是指向新链表的尾结点*/</span></span><br><span class="line">    <span class="keyword">while</span> (k&lt;i &amp;&amp; p!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p=p-&gt;next;k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        k=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (k&lt;=j &amp;&amp; p!=<span class="literal">NULL</span>)        <span class="comment">/*复制j个结点*/</span></span><br><span class="line">        &#123;</span><br><span class="line">            q=(LinkString *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkString));</span><br><span class="line">            q-&gt;data=p-&gt;data;</span><br><span class="line">            tc-&gt;next=q;tc=q;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">        tc-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-8-查找子串位置运算"><a href="#4-8-查找子串位置运算" class="headerlink" title="4.8.查找子串位置运算"></a>4.8.查找子串位置运算</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Index</span><span class="params">(LinkString *s,LinkString *t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkString *p=s-&gt;next,*p1,*q,*q1;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p!=<span class="literal">NULL</span>)           <span class="comment">/*循环扫描s的每个结点*/</span></span><br><span class="line">    &#123;</span><br><span class="line">        q=t-&gt;next;            <span class="comment">/*子串总是从第一个字符开始比较*/</span></span><br><span class="line">        <span class="keyword">if</span> (p-&gt;data==q-&gt;data)<span class="comment">/*判定两串当前字符相等*/</span></span><br><span class="line">        &#123;            <span class="comment">/*若首字符相同,则判定s其后字符是否与t的依次相同*/</span></span><br><span class="line">            p1=p-&gt;next;q1=q-&gt;next;</span><br><span class="line">            <span class="keyword">while</span> (p1!=<span class="literal">NULL</span> &amp;&amp; q1!=<span class="literal">NULL</span> &amp;&amp; p1-&gt;data==q1-&gt;data)</span><br><span class="line">            &#123;</span><br><span class="line">                p1=p1-&gt;next;</span><br><span class="line">                q1=q1-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (q1==<span class="literal">NULL</span>)    <span class="comment">/*若都相同,则返回相同的子串的起始位置*/</span></span><br><span class="line">                <span class="keyword">return</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        p=p-&gt;next;i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>(<span class="number">-1</span>);        <span class="comment">/*若不是子串,返回-1*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-9-子串插入运算"><a href="#4-9-子串插入运算" class="headerlink" title="4.9.子串插入运算"></a>4.9.子串插入运算</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InsStr</span><span class="params">(LinkString *&amp;s,<span class="keyword">int</span> i,LinkString *t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    LinkString *q=s-&gt;next,*p,*str;</span><br><span class="line">    StrCopy(str,t);        <span class="comment">/*将t复制到str*/</span></span><br><span class="line">    p=str;str=str-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(p);            <span class="comment">/*删除str的头结点*/</span></span><br><span class="line">    <span class="keyword">for</span> (k=<span class="number">1</span>;k&lt;i;k++)    <span class="comment">/*在s中找到第i-1个结点,由p指向它,q指向下一个结点*/</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (q==<span class="literal">NULL</span>)    <span class="comment">/*位置参数i错误*/</span></span><br><span class="line">            <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">        p=q;</span><br><span class="line">        q=q-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;next=str;        <span class="comment">/*将str链表链接到*p之后*/</span></span><br><span class="line">    <span class="keyword">while</span> (str-&gt;next!=<span class="literal">NULL</span>)    <span class="comment">/*由str指向尾结点*/</span></span><br><span class="line">        str=str-&gt;next;        </span><br><span class="line">    str-&gt;next=q;        <span class="comment">/*将*q链接到*str之后*/</span></span><br><span class="line">    <span class="keyword">return</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-10-子串删除运算"><a href="#4-10-子串删除运算" class="headerlink" title="4.10.子串删除运算"></a>4.10.子串删除运算</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DelStr</span><span class="params">(LinkString *&amp;s,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    LinkString *q=s-&gt;next,*p,*t;</span><br><span class="line">    <span class="keyword">for</span> (k=<span class="number">1</span>;k&lt;i;k++)    <span class="comment">/*在s中找到第i-1个结点,由p指向它,q指向下一个结点*/</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (q==<span class="literal">NULL</span>)        <span class="comment">/*位置参数i错误*/</span></span><br><span class="line">            <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">        p=q;</span><br><span class="line">        q=q-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (k=<span class="number">1</span>;k&lt;=j;k++)    <span class="comment">/*删除*p之后的j个结点,并由q指向下一个结点*/</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (q==<span class="literal">NULL</span>)    <span class="comment">/*长度参数j错误*/</span></span><br><span class="line">            <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">        t=q;</span><br><span class="line">        q=q-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;next=q;</span><br><span class="line">    <span class="keyword">return</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-11-子串替换运算"><a href="#4-11-子串替换运算" class="headerlink" title="4.11.子串替换运算"></a>4.11.子串替换运算</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LinkString *<span class="title">RepStrAll</span><span class="params">(LinkString *s,LinkString *s1,LinkString *s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    i=Index(s,s1);</span><br><span class="line">    <span class="keyword">while</span> (i&gt;=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        DelStr(s,i+<span class="number">1</span>,StrLength(s1));    <span class="comment">/*删除串s1*/</span></span><br><span class="line">        InsStr(s,i+<span class="number">1</span>,s2);                <span class="comment">/*插入串s2*/</span></span><br><span class="line">        i=Index(s,s1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-12-输出串运算"><a href="#4-12-输出串运算" class="headerlink" title="4.12.输出串运算"></a>4.12.输出串运算</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispStr</span><span class="params">(LinkString *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkString *p=s-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,p-&gt;data);</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-13-main"><a href="#4-13-main" class="headerlink" title="4.13.main"></a>4.13.main</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkString *s1,*s2,*s3,*s4,*s5,*s6,*s7;</span><br><span class="line">    Assign(s1,<span class="string">&quot;abcd&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s1:&quot;</span>);DispStr(s1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s1的长度:%d\n&quot;</span>,StrLength(s1));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s1=&gt;s2\n&quot;</span>);</span><br><span class="line">    StrCopy(s2,s1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s2:&quot;</span>);DispStr(s2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s1和s2%s\n&quot;</span>,(StrEqual(s1,s2)==<span class="number">1</span>?<span class="string">&quot;相同&quot;</span>:<span class="string">&quot;不相同&quot;</span>));</span><br><span class="line">    Assign(s3,<span class="string">&quot;12345678&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s3:&quot;</span>);DispStr(s3);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s1和s3连接=&gt;s4\n&quot;</span>);</span><br><span class="line">    s4=Concat(s1,s3);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s4:&quot;</span>);DispStr(s4);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s3[2..5]=&gt;s5\n&quot;</span>);</span><br><span class="line">    s5=SubStr(s3,<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s5:&quot;</span>);DispStr(s5);</span><br><span class="line">    Assign(s6,<span class="string">&quot;567&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s6:&quot;</span>);DispStr(s6);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s6在s3中位置:%d\n&quot;</span>,Index(s3,s6));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;从s3中删除s3[3..6]字符\n&quot;</span>);</span><br><span class="line">    DelStr(s3,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s3:&quot;</span>);DispStr(s3);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;从s4中将s6替换成s1=&gt;s7\n&quot;</span>);</span><br><span class="line">    s7=RepStrAll(s4,s6,s1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s7:&quot;</span>);DispStr(s7);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h3 id="1-二叉树的基本概念"><a href="#1-二叉树的基本概念" class="headerlink" title="1.二叉树的基本概念"></a>1.二叉树的基本概念</h3><p><a href="https://baike.baidu.com/item/%E4%BA%8C%E5%8F%89%E6%A0%91">二叉树</a>（Binary tree）是树形结构的一个重要类型。许多实际问题抽象出来的数据结构往往是二叉树形式，即使是一般的树也能简单地转换为二叉树，而且二叉树的存储结构及其算法都较为简单，因此二叉树显得特别重要。二叉树特点是每个结点最多只能有两棵子树，且有左右之分。</p><p>二叉树是n个有限元素的集合，该集合或者为空、或者由一个称为根（root）的元素及两个不相交的、被分别称为左子树和右子树的二叉树组成，是有序树。当集合为空时，称该二叉树为空二叉树。在二叉树中，一个元素也称作一个结点。</p><h4 id="1-1-二叉树的定义"><a href="#1-1-二叉树的定义" class="headerlink" title="1.1.二叉树的定义"></a>1.1.二叉树的定义</h4><p>树形结构是一种非线性结构，二叉树是度为2，即子结点的个数最多为2的有序树（左右子树是有次序的）。最重要，应用最广泛的一种树。</p><h4 id="1-2-完全二叉树"><a href="#1-2-完全二叉树" class="headerlink" title="1.2.完全二叉树"></a>1.2.完全二叉树</h4><p>在一个二叉树中，除了最后一层外，其余的其他层都是满的，并且最后一层或者是满的，或者是在右边缺少连续若干个结点，则该树称为<code>完全二叉树</code>。</p><p>满二叉树是一种特殊的完全二叉树，即所有的层的结点都是满的。</p><h4 id="1-3-树的基本术语"><a href="#1-3-树的基本术语" class="headerlink" title="1.3.树的基本术语"></a>1.3.树的基本术语</h4><ul><li>结点的度：该节点的后继节点的个数</li><li>树的度：所有节点的度的最大值</li><li>分支结点</li><li>叶子结点</li><li>孩子结点</li><li>双亲结点</li><li>子孙结点</li><li>祖先结点</li><li>兄弟结点</li><li>结点层数</li><li>树的深度（高度）：树中结点的最大的层数</li><li>有序树：左右子树是有次序的</li><li>无序树：左右子树是无次序的</li><li>森林：不同树的集合</li></ul><h4 id="1-4-二叉树的性质"><a href="#1-4-二叉树的性质" class="headerlink" title="1.4.二叉树的性质"></a>1.4.二叉树的性质</h4><ul><li>二叉树上叶子节点的个数等于度为2的结点的个数加1</li><li>二叉树上第i层上至多有2^(i-1)个结点（i&gt;1）</li><li>深度为h的二叉树至多有2^h-1个结点</li></ul><h4 id="1-5-二叉树的基本运算"><a href="#1-5-二叉树的基本运算" class="headerlink" title="1.5.二叉树的基本运算"></a>1.5.二叉树的基本运算</h4><ul><li>创建二叉树</li><li>求二叉树的高度</li><li>求二叉树结点的个数</li><li>求二叉树叶子结点的个数</li><li>用括号表示法输出二叉树</li><li>用凹入表示法输出二叉树</li></ul><h3 id="2-二叉树的存储结构"><a href="#2-二叉树的存储结构" class="headerlink" title="2.二叉树的存储结构"></a>2.二叉树的存储结构</h3><h4 id="2-1-顺序存储结构-2"><a href="#2-1-顺序存储结构-2" class="headerlink" title="2.1.顺序存储结构"></a>2.1.顺序存储结构</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> ElemType SqBinTree[MaxSize]</span><br></pre></td></tr></table></figure><h4 id="2-2-链式存储结构-2"><a href="#2-2-链式存储结构-2" class="headerlink" title="2.2.链式存储结构"></a>2.2.链式存储结构</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxWidth 40</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tnode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tnode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span></span><br><span class="line">&#125; BTNode;</span><br></pre></td></tr></table></figure><h3 id="3-二叉树基本运算"><a href="#3-二叉树基本运算" class="headerlink" title="3.二叉树基本运算"></a>3.二叉树基本运算</h3><h4 id="3-1-二叉树的定义"><a href="#3-1-二叉树的定义" class="headerlink" title="3.1.二叉树的定义"></a>3.1.二叉树的定义</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxWidth 40</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tnode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tnode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span></span><br><span class="line">&#125; BTNode;</span><br></pre></td></tr></table></figure><h4 id="3-2-由str创建二叉链"><a href="#3-2-由str创建二叉链" class="headerlink" title="3.2.由str创建二叉链"></a>3.2.由str创建二叉链</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateBTree</span><span class="params">(BTNode * &amp;bt,<span class="keyword">char</span> *str)</span>    <span class="comment">/*由str创建二叉链bt*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BTNode *St[MaxSize],*p=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> top=<span class="number">-1</span>,k,j=<span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    bt=<span class="literal">NULL</span>;            <span class="comment">/*建立的二叉树初始时为空*/</span></span><br><span class="line">    ch=str[j];</span><br><span class="line">    <span class="keyword">while</span> (ch!=<span class="string">&#x27;\0&#x27;</span>)      <span class="comment">/*str未扫描完时循环*/</span></span><br><span class="line">    &#123;</span><br><span class="line">              <span class="keyword">switch</span>(ch) </span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>:top++;St[top]=p;k=<span class="number">1</span>; <span class="keyword">break</span>;    <span class="comment">/*为左孩子结点*/</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:top--;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;,&#x27;</span>:k=<span class="number">2</span>; <span class="keyword">break</span>;                    <span class="comment">/*为孩子结点右结点*/</span></span><br><span class="line">        <span class="keyword">default</span>:p=(BTNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">                p-&gt;data=ch;p-&gt;lchild=p-&gt;rchild=<span class="literal">NULL</span>;</span><br><span class="line">                <span class="keyword">if</span> (bt==<span class="literal">NULL</span>)                   <span class="comment">/**p为二叉树的根结点*/</span></span><br><span class="line">                    bt=p;</span><br><span class="line">                <span class="keyword">else</span>                              <span class="comment">/*已建立二叉树根结点*/</span></span><br><span class="line">                &#123;    <span class="keyword">switch</span>(k) </span><br><span class="line">                    &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>:St[top]-&gt;lchild=p;<span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span>:St[top]-&gt;rchild=p;<span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        j++;</span><br><span class="line">        ch=str[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-求二叉树高度"><a href="#3-3-求二叉树高度" class="headerlink" title="3.3.求二叉树高度"></a>3.3.求二叉树高度</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BTHeight</span><span class="params">(BTNode *bt)</span>    <span class="comment">/*求二叉树高度*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       <span class="keyword">int</span> lchilddep,rchilddep;</span><br><span class="line">       <span class="keyword">if</span> (bt==<span class="literal">NULL</span>) <span class="keyword">return</span>(<span class="number">0</span>);             <span class="comment">/*空树的高度为0*/</span></span><br><span class="line">       <span class="keyword">else</span>  </span><br><span class="line">    &#123;    lchilddep=BTHeight(bt-&gt;lchild);    <span class="comment">/*求左子树的高度为lchilddep*/</span></span><br><span class="line">          rchilddep=BTHeight(bt-&gt;rchild);    <span class="comment">/*求右子树的高度为rchilddep*/</span></span><br><span class="line">        <span class="keyword">return</span> (lchilddep&gt;rchilddep)? (lchilddep+<span class="number">1</span>):(rchilddep+<span class="number">1</span>);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4-求二叉树的结点个数"><a href="#3-4-求二叉树的结点个数" class="headerlink" title="3.4.求二叉树的结点个数"></a>3.4.求二叉树的结点个数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">NodeCount</span><span class="params">(BTNode *bt)</span>    <span class="comment">/*求二叉树bt的结点个数*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num1,num2;</span><br><span class="line">        <span class="keyword">if</span> (bt==<span class="literal">NULL</span>)    <span class="comment">/*空树结点个数为0*/</span> </span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;    num1=NodeCount(bt-&gt;lchild);    <span class="comment">/*求出左子树的结点数*/</span></span><br><span class="line">            num2=NodeCount(bt-&gt;rchild);    <span class="comment">/*求出右子树的结点数*/</span></span><br><span class="line">            <span class="keyword">return</span> (num1+num2+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-5-求二叉树的叶子结点个数"><a href="#3-5-求二叉树的叶子结点个数" class="headerlink" title="3.5.求二叉树的叶子结点个数"></a>3.5.求二叉树的叶子结点个数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LeafCount</span><span class="params">(BTNode *bt)</span>    <span class="comment">/*求二叉树bt的叶子结点个数*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num1,num2;</span><br><span class="line">        <span class="keyword">if</span> (bt==<span class="literal">NULL</span>)    <span class="comment">/*空树叶子结点个数为0*/</span> </span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (bt-&gt;lchild==<span class="literal">NULL</span> &amp;&amp; bt-&gt;rchild==<span class="literal">NULL</span>) </span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;    <span class="comment">/*若为叶子结点返回1*/</span> </span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;    num1=LeafCount(bt-&gt;lchild);    <span class="comment">/*求出左子树的叶子结点数*/</span></span><br><span class="line">            num2=LeafCount(bt-&gt;rchild);    <span class="comment">/*求出右子树的叶子结点数*/</span></span><br><span class="line">            <span class="keyword">return</span> (num1+num2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-6-以括号表示法输出二叉树"><a href="#3-6-以括号表示法输出二叉树" class="headerlink" title="3.6.以括号表示法输出二叉树"></a>3.6.以括号表示法输出二叉树</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispBTree</span><span class="params">(BTNode *bt)</span>    <span class="comment">/*以括号表示法输出二叉树*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bt!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;    </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,bt-&gt;data);</span><br><span class="line">        <span class="keyword">if</span> (bt-&gt;lchild!=<span class="literal">NULL</span> || bt-&gt;rchild!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;    </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">            DispBTree(bt-&gt;lchild);        <span class="comment">/*递归处理左子树*/</span></span><br><span class="line">            <span class="keyword">if</span> (bt-&gt;rchild!=<span class="literal">NULL</span>) </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            DispBTree(bt-&gt;rchild);        <span class="comment">/*递归处理右子树*/</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-7-以凹入表示法输出一棵二叉树"><a href="#3-7-以凹入表示法输出一棵二叉树" class="headerlink" title="3.7.以凹入表示法输出一棵二叉树"></a>3.7.以凹入表示法输出一棵二叉树</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispBTree1</span><span class="params">(BTNode *bt)</span>  <span class="comment">/*以凹入表示法输出一棵二叉树*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BTNode *St[MaxSize],*p;</span><br><span class="line">    <span class="keyword">int</span> Level[MaxSize][<span class="number">2</span>],top=<span class="number">-1</span>,n,i,width=<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">char</span> type;        <span class="comment">/*取值L表示为左结点,R表示为右结点,B表示为根结点*/</span></span><br><span class="line">    <span class="keyword">if</span> (bt!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;    </span><br><span class="line">        top++;</span><br><span class="line">        St[top]=bt;                        <span class="comment">/*根结点入栈*/</span></span><br><span class="line">        Level[top][<span class="number">0</span>]=width;</span><br><span class="line">        Level[top][<span class="number">1</span>]=<span class="number">2</span>;                <span class="comment">/*2表示是根*/</span></span><br><span class="line">        <span class="keyword">while</span> (top&gt;<span class="number">-1</span>)</span><br><span class="line">        &#123;    </span><br><span class="line">            p=St[top];                    <span class="comment">/*退栈并凹入显示该结点值*/</span></span><br><span class="line">            n=Level[top][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">switch</span>(Level[top][<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:type=<span class="string">&#x27;L&#x27;</span>;<span class="keyword">break</span>;        <span class="comment">/*左结点之后输出(L)*/</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:type=<span class="string">&#x27;R&#x27;</span>;<span class="keyword">break</span>;        <span class="comment">/*右结点之后输出(R)*/</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:type=<span class="string">&#x27;B&#x27;</span>;<span class="keyword">break</span>;        <span class="comment">/*根结点之后前输出(B)*/</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++)            <span class="comment">/*其中n为显示场宽,字符以右对齐显示*/</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c(%c)&quot;</span>,p-&gt;data,type);</span><br><span class="line">            <span class="keyword">for</span> (i=n+<span class="number">1</span>;i&lt;=MaxWidth;i+=<span class="number">2</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;━&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            top--;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;rchild!=<span class="literal">NULL</span>)</span><br><span class="line">            &#123;                            <span class="comment">/*将右子树根结点入栈*/</span></span><br><span class="line">                top++;</span><br><span class="line">                St[top]=p-&gt;rchild;</span><br><span class="line">                Level[top][<span class="number">0</span>]=n+width;    <span class="comment">/*场宽增width,即缩width格后再输出*/</span></span><br><span class="line">                Level[top][<span class="number">1</span>]=<span class="number">1</span>;        <span class="comment">/*1表示是右子树*/</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;lchild!=<span class="literal">NULL</span>)</span><br><span class="line">            &#123;                            <span class="comment">/*将左子树根结点入栈*/</span></span><br><span class="line">                top++;</span><br><span class="line">                St[top]=p-&gt;lchild;</span><br><span class="line">                Level[top][<span class="number">0</span>]=n+width;  <span class="comment">/*显示场宽增width*/</span></span><br><span class="line">                Level[top][<span class="number">1</span>]=<span class="number">0</span>;        <span class="comment">/*0表示是左子树*/</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-8-main"><a href="#3-8-main" class="headerlink" title="3.8.main"></a>3.8.main</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BTNode *bt;</span><br><span class="line">    CreateBTree(bt,<span class="string">&quot;A(B(D,E(G,H)),C(,F(I)))&quot;</span>);    <span class="comment">/*构造图5.10(a)所示的二叉树*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;二叉树bt:&quot;</span>);DispBTree(bt);<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;bt的高度:%d\n&quot;</span>,BTHeight(bt));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;bt的结点数:%d\n&quot;</span>,NodeCount(bt));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;bt的叶子结点数:%d\n&quot;</span>,LeafCount(bt));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;bt凹入表示:\n&quot;</span>);DispBTree1(bt);<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-二叉树基本运算-By-Go"><a href="#4-二叉树基本运算-By-Go" class="headerlink" title="4.二叉树基本运算(By-Go)"></a>4.二叉树基本运算(By-Go)</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Package binarysearchtree creates a ItemBinarySearchTree data structure for the Item type</span></span><br><span class="line"><span class="keyword">package</span> binarysearchtree</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Item the type of the binary search tree</span></span><br><span class="line"><span class="keyword">type</span> Item <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Node a single node that composes the tree</span></span><br><span class="line"><span class="keyword">type</span> Node <span class="keyword">struct</span> &#123;</span><br><span class="line">    key   <span class="keyword">int</span></span><br><span class="line">    value Item</span><br><span class="line">    left  *Node <span class="comment">//left</span></span><br><span class="line">    right *Node <span class="comment">//right</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ItemBinarySearchTree the binary search tree of Items</span></span><br><span class="line"><span class="keyword">type</span> ItemBinarySearchTree <span class="keyword">struct</span> &#123;</span><br><span class="line">    root *Node</span><br><span class="line">    lock sync.RWMutex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Insert inserts the Item t in the tree</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bst *ItemBinarySearchTree)</span> <span class="title">Insert</span><span class="params">(key <span class="keyword">int</span>, value Item)</span></span> &#123;</span><br><span class="line">    bst.lock.Lock()</span><br><span class="line">    <span class="keyword">defer</span> bst.lock.Unlock()</span><br><span class="line">    n := &amp;Node&#123;key, value, <span class="literal">nil</span>, <span class="literal">nil</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> bst.root == <span class="literal">nil</span> &#123;</span><br><span class="line">        bst.root = n</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        insertNode(bst.root, n)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// internal function to find the correct place for a node in a tree</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insertNode</span><span class="params">(node, newNode *Node)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> newNode.key &lt; node.key &#123;</span><br><span class="line">        <span class="keyword">if</span> node.left == <span class="literal">nil</span> &#123;</span><br><span class="line">            node.left = newNode</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            insertNode(node.left, newNode)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> node.right == <span class="literal">nil</span> &#123;</span><br><span class="line">            node.right = newNode</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            insertNode(node.right, newNode)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// InOrderTraverse visits all nodes with in-order traversing</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bst *ItemBinarySearchTree)</span> <span class="title">InOrderTraverse</span><span class="params">(f <span class="keyword">func</span>(Item)</span>)</span> &#123;</span><br><span class="line">    bst.lock.RLock()</span><br><span class="line">    <span class="keyword">defer</span> bst.lock.RUnlock()</span><br><span class="line">    inOrderTraverse(bst.root, f)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// internal recursive function to traverse in order</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">inOrderTraverse</span><span class="params">(n *Node, f <span class="keyword">func</span>(Item)</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> n != <span class="literal">nil</span> &#123;</span><br><span class="line">        inOrderTraverse(n.left, f)</span><br><span class="line">        f(n.value)</span><br><span class="line">        inOrderTraverse(n.right, f)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PreOrderTraverse visits all nodes with pre-order traversing</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bst *ItemBinarySearchTree)</span> <span class="title">PreOrderTraverse</span><span class="params">(f <span class="keyword">func</span>(Item)</span>)</span> &#123;</span><br><span class="line">    bst.lock.Lock()</span><br><span class="line">    <span class="keyword">defer</span> bst.lock.Unlock()</span><br><span class="line">    preOrderTraverse(bst.root, f)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// internal recursive function to traverse pre order</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">preOrderTraverse</span><span class="params">(n *Node, f <span class="keyword">func</span>(Item)</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> n != <span class="literal">nil</span> &#123;</span><br><span class="line">        f(n.value)</span><br><span class="line">        preOrderTraverse(n.left, f)</span><br><span class="line">        preOrderTraverse(n.right, f)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PostOrderTraverse visits all nodes with post-order traversing</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bst *ItemBinarySearchTree)</span> <span class="title">PostOrderTraverse</span><span class="params">(f <span class="keyword">func</span>(Item)</span>)</span> &#123;</span><br><span class="line">    bst.lock.Lock()</span><br><span class="line">    <span class="keyword">defer</span> bst.lock.Unlock()</span><br><span class="line">    postOrderTraverse(bst.root, f)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// internal recursive function to traverse post order</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">postOrderTraverse</span><span class="params">(n *Node, f <span class="keyword">func</span>(Item)</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> n != <span class="literal">nil</span> &#123;</span><br><span class="line">        postOrderTraverse(n.left, f)</span><br><span class="line">        postOrderTraverse(n.right, f)</span><br><span class="line">        f(n.value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Min returns the Item with min value stored in the tree</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bst *ItemBinarySearchTree)</span> <span class="title">Min</span><span class="params">()</span> *<span class="title">Item</span></span> &#123;</span><br><span class="line">    bst.lock.RLock()</span><br><span class="line">    <span class="keyword">defer</span> bst.lock.RUnlock()</span><br><span class="line">    n := bst.root</span><br><span class="line">    <span class="keyword">if</span> n == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> n.left == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &amp;n.value</span><br><span class="line">        &#125;</span><br><span class="line">        n = n.left</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Max returns the Item with max value stored in the tree</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bst *ItemBinarySearchTree)</span> <span class="title">Max</span><span class="params">()</span> *<span class="title">Item</span></span> &#123;</span><br><span class="line">    bst.lock.RLock()</span><br><span class="line">    <span class="keyword">defer</span> bst.lock.RUnlock()</span><br><span class="line">    n := bst.root</span><br><span class="line">    <span class="keyword">if</span> n == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> n.right == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &amp;n.value</span><br><span class="line">        &#125;</span><br><span class="line">        n = n.right</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Search returns true if the Item t exists in the tree</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bst *ItemBinarySearchTree)</span> <span class="title">Search</span><span class="params">(key <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    bst.lock.RLock()</span><br><span class="line">    <span class="keyword">defer</span> bst.lock.RUnlock()</span><br><span class="line">    <span class="keyword">return</span> search(bst.root, key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// internal recursive function to search an item in the tree</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">search</span><span class="params">(n *Node, key <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> n == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> key &lt; n.key &#123;</span><br><span class="line">        <span class="keyword">return</span> search(n.left, key)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> key &gt; n.key &#123;</span><br><span class="line">        <span class="keyword">return</span> search(n.right, key)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Remove removes the Item with key `key` from the tree</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bst *ItemBinarySearchTree)</span> <span class="title">Remove</span><span class="params">(key <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    bst.lock.Lock()</span><br><span class="line">    <span class="keyword">defer</span> bst.lock.Unlock()</span><br><span class="line">    remove(bst.root, key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// internal recursive function to remove an item</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">remove</span><span class="params">(node *Node, key <span class="keyword">int</span>)</span> *<span class="title">Node</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> key &lt; node.key &#123;</span><br><span class="line">        node.left = remove(node.left, key)</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> key &gt; node.key &#123;</span><br><span class="line">        node.right = remove(node.right, key)</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// key == node.key</span></span><br><span class="line">    <span class="keyword">if</span> node.left == <span class="literal">nil</span> &amp;&amp; node.right == <span class="literal">nil</span> &#123;</span><br><span class="line">        node = <span class="literal">nil</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> node.left == <span class="literal">nil</span> &#123;</span><br><span class="line">        node = node.right</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> node.right == <span class="literal">nil</span> &#123;</span><br><span class="line">        node = node.left</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line">    &#125;</span><br><span class="line">    leftmostrightside := node.right</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="comment">//find smallest value on the right side</span></span><br><span class="line">        <span class="keyword">if</span> leftmostrightside != <span class="literal">nil</span> &amp;&amp; leftmostrightside.left != <span class="literal">nil</span> &#123;</span><br><span class="line">            leftmostrightside = leftmostrightside.left</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    node.key, node.value = leftmostrightside.key, leftmostrightside.value</span><br><span class="line">    node.right = remove(node.right, node.key)</span><br><span class="line">    <span class="keyword">return</span> node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// String prints a visual representation of the tree</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bst *ItemBinarySearchTree)</span> <span class="title">String</span><span class="params">()</span></span> &#123;</span><br><span class="line">    bst.lock.Lock()</span><br><span class="line">    <span class="keyword">defer</span> bst.lock.Unlock()</span><br><span class="line">    fmt.Println(<span class="string">&quot;------------------------------------------------&quot;</span>)</span><br><span class="line">    stringify(bst.root, <span class="number">0</span>)</span><br><span class="line">    fmt.Println(<span class="string">&quot;------------------------------------------------&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// internal recursive function to print a tree</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">stringify</span><span class="params">(n *Node, level <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> n != <span class="literal">nil</span> &#123;</span><br><span class="line">        format := <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; level; i++ &#123;</span><br><span class="line">            format += <span class="string">&quot;       &quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        format += <span class="string">&quot;---[ &quot;</span></span><br><span class="line">        level++</span><br><span class="line">        stringify(n.left, level)</span><br><span class="line">        fmt.Printf(format+<span class="string">&quot;%d\n&quot;</span>, n.key)</span><br><span class="line">        stringify(n.right, level)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-二叉树4种遍历算法"><a href="#5-二叉树4种遍历算法" class="headerlink" title="5.二叉树4种遍历算法"></a>5.二叉树4种遍历算法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxWidth 40</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tnode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tnode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span></span><br><span class="line">&#125; BTNode;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateBTree</span><span class="params">(BTNode * &amp;bt,<span class="keyword">char</span> *str)</span>    <span class="comment">/*由str创建二叉链bt*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BTNode *St[MaxSize],*p=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> top=<span class="number">-1</span>,k,j=<span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    bt=<span class="literal">NULL</span>;            <span class="comment">/*建立的二叉树初始时为空*/</span></span><br><span class="line">    ch=str[j];</span><br><span class="line">    <span class="keyword">while</span> (ch!=<span class="string">&#x27;\0&#x27;</span>)      <span class="comment">/*str未扫描完时循环*/</span></span><br><span class="line">    &#123;</span><br><span class="line">              <span class="keyword">switch</span>(ch) </span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>:top++;St[top]=p;k=<span class="number">1</span>; <span class="keyword">break</span>;    <span class="comment">/*为左孩子结点*/</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:top--;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;,&#x27;</span>:k=<span class="number">2</span>; <span class="keyword">break</span>;                    <span class="comment">/*为孩子结点右结点*/</span></span><br><span class="line">        <span class="keyword">default</span>:p=(BTNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">                p-&gt;data=ch;p-&gt;lchild=p-&gt;rchild=<span class="literal">NULL</span>;</span><br><span class="line">                <span class="keyword">if</span> (bt==<span class="literal">NULL</span>)                   <span class="comment">/**p为二叉树的根结点*/</span></span><br><span class="line">                    bt=p;</span><br><span class="line">                <span class="keyword">else</span>                              <span class="comment">/*已建立二叉树根结点*/</span></span><br><span class="line">                &#123;    <span class="keyword">switch</span>(k) </span><br><span class="line">                    &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>:St[top]-&gt;lchild=p;<span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span>:St[top]-&gt;rchild=p;<span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        j++;</span><br><span class="line">        ch=str[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispBTree</span><span class="params">(BTNode *bt)</span>    <span class="comment">/*以括号表示法输出二叉树*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bt!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;    </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,bt-&gt;data);</span><br><span class="line">        <span class="keyword">if</span> (bt-&gt;lchild!=<span class="literal">NULL</span> || bt-&gt;rchild!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;    </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">            DispBTree(bt-&gt;lchild);        <span class="comment">/*递归处理左子树*/</span></span><br><span class="line">            <span class="keyword">if</span> (bt-&gt;rchild!=<span class="literal">NULL</span>) </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            DispBTree(bt-&gt;rchild);        <span class="comment">/*递归处理右子树*/</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先序遍历序列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrder</span><span class="params">(BTNode *bt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bt!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>,bt-&gt;data);</span><br><span class="line">        PreOrder(bt-&gt;lchild);</span><br><span class="line">        PreOrder(bt-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中序遍历序列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrder</span><span class="params">(BTNode *bt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bt!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;    </span><br><span class="line">        InOrder(bt-&gt;lchild);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>,bt-&gt;data);</span><br><span class="line">        InOrder(bt-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后序遍历序列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrder</span><span class="params">(BTNode *bt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bt!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        PostOrder(bt-&gt;lchild);</span><br><span class="line">        PostOrder(bt-&gt;rchild);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>,bt-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 层次遍历序列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LevelOrder</span><span class="params">(BTNode *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BTNode *p;</span><br><span class="line">    BTNode *qu[MaxSize];            <span class="comment">/*定义环形队列,存放结点指针*/</span></span><br><span class="line">    <span class="keyword">int</span> front,rear;                    <span class="comment">/*定义队头和队尾指针*/</span></span><br><span class="line">    front=rear=<span class="number">-1</span>;                    <span class="comment">/*置队列为空队列*/</span></span><br><span class="line">    rear++;</span><br><span class="line">    qu[rear]=b;                        <span class="comment">/*根结点指针进入队列*/</span></span><br><span class="line">    <span class="keyword">while</span> (front!=rear)                <span class="comment">/*队列不为空*/</span></span><br><span class="line">    &#123;    front=(front+<span class="number">1</span>)%MaxSize;</span><br><span class="line">        p=qu[front];                <span class="comment">/*队头出队列*/</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>,p-&gt;data);        <span class="comment">/*访问结点*/</span></span><br><span class="line">        <span class="keyword">if</span> (p-&gt;lchild!=<span class="literal">NULL</span>)        <span class="comment">/*有左孩子时将其进队*/</span></span><br><span class="line">        &#123;    rear=(rear+<span class="number">1</span>)%MaxSize;</span><br><span class="line">            qu[rear]=p-&gt;lchild;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;rchild!=<span class="literal">NULL</span>)        <span class="comment">/*有右孩子时将其进队*/</span></span><br><span class="line">        &#123;    rear=(rear+<span class="number">1</span>)%MaxSize;</span><br><span class="line">            qu[rear]=p-&gt;rchild;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BTNode *bt;</span><br><span class="line">    CreateBTree(bt,<span class="string">&quot;A(B(D,E(G,H)),C(,F(I)))&quot;</span>);    <span class="comment">/*构造图5.10(a)所示的二叉树*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;二叉树bt:&quot;</span>);DispBTree(bt);<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;先序遍历序列:&quot;</span>);PreOrder(bt);<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;中序遍历序列:&quot;</span>);InOrder(bt);<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;后序遍历序列:&quot;</span>);PostOrder(bt);<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;层次遍历序列:&quot;</span>);LevelOrder(bt);<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-哈夫曼树"><a href="#6-哈夫曼树" class="headerlink" title="6.哈夫曼树"></a>6.哈夫曼树</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 50        <span class="comment">/*叶子结点数*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 2*N-1        <span class="comment">/*树中结点总数*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> data;        <span class="comment">/*结点值*/</span></span><br><span class="line">    <span class="keyword">double</span> weight;    <span class="comment">/*权重*/</span></span><br><span class="line">    <span class="keyword">int</span> parent;        <span class="comment">/*双亲结点*/</span></span><br><span class="line">    <span class="keyword">int</span> lchild;        <span class="comment">/*左孩子结点*/</span></span><br><span class="line">    <span class="keyword">int</span> rchild;        <span class="comment">/*右孩子结点*/</span></span><br><span class="line">&#125; HTNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> cd[N];        <span class="comment">/*存放哈夫曼码*/</span></span><br><span class="line">    <span class="keyword">int</span> start;</span><br><span class="line">&#125; HCode;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateHT</span><span class="params">(HTNode ht[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,k,lnode,rnode;</span><br><span class="line">    <span class="keyword">double</span> min1,min2;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">2</span>*n<span class="number">-1</span>;i++)            <span class="comment">/*所有结点的相关域置初值-1*/</span></span><br><span class="line">        ht[i].parent=ht[i].lchild=ht[i].rchild=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=n;i&lt;<span class="number">2</span>*n<span class="number">-1</span>;i++)            <span class="comment">/*构造哈夫曼树*/</span></span><br><span class="line">    &#123;</span><br><span class="line">        min1=min2=<span class="number">32767</span>;            <span class="comment">/*lnode和rnode为最小权重的两个结点位置*/</span></span><br><span class="line">        lnode=rnode=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (k=<span class="number">0</span>;k&lt;=i<span class="number">-1</span>;k++)</span><br><span class="line">            <span class="keyword">if</span> (ht[k].parent==<span class="number">-1</span>)    <span class="comment">/*只在尚未构造二叉树的结点中查找*/</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (ht[k].weight&lt;min1)</span><br><span class="line">                &#123;</span><br><span class="line">                    min2=min1;rnode=lnode;</span><br><span class="line">                    min1=ht[k].weight;lnode=k;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ht[k].weight&lt;min2)</span><br><span class="line">                &#123;</span><br><span class="line">                    min2=ht[k].weight;rnode=k;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ht[i].weight=ht[lnode].weight+ht[rnode].weight;</span><br><span class="line">        ht[i].lchild=lnode;ht[i].rchild=rnode;</span><br><span class="line">        ht[lnode].parent=i;</span><br><span class="line">        ht[rnode].parent=i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateHCode</span><span class="params">(HTNode ht[],HCode hcd[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,f,c;</span><br><span class="line">    HCode hc;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)    <span class="comment">/*根据哈夫曼树求哈夫曼编码*/</span></span><br><span class="line">    &#123;</span><br><span class="line">        hc.start=n;c=i;</span><br><span class="line">        f=ht[i].parent;</span><br><span class="line">        <span class="keyword">while</span> (f!=<span class="number">-1</span>)    <span class="comment">/*循序直到树根结点*/</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (ht[f].lchild==c)    <span class="comment">/*处理左孩子结点*/</span></span><br><span class="line">                hc.cd[hc.start--]=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">else</span>                    <span class="comment">/*处理右孩子结点*/</span></span><br><span class="line">                hc.cd[hc.start--]=<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">            c=f;f=ht[f].parent;</span><br><span class="line">        &#125;</span><br><span class="line">        hc.start++;        <span class="comment">/*start指向哈夫曼编码最开始字符*/</span></span><br><span class="line">        hcd[i]=hc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispHCode</span><span class="params">(HTNode ht[],HCode hcd[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,k;</span><br><span class="line">    <span class="keyword">double</span> sum=<span class="number">0</span>,m=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输出哈夫曼编码:\n&quot;</span>); <span class="comment">/*输出哈夫曼编码*/</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        j=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;   %c:&quot;</span>,ht[i].data);</span><br><span class="line">        <span class="keyword">for</span> (k=hcd[i].start;k&lt;=n;k++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,hcd[i].cd[k]);</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        m+=ht[i].weight;</span><br><span class="line">        sum+=ht[i].weight*j;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">5</span>,i;        <span class="comment">/*n表示初始字符串的个数*/</span></span><br><span class="line">    <span class="keyword">char</span> str[]=&#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>&#125;;</span><br><span class="line">    <span class="keyword">double</span> fnum[]=&#123;<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    HTNode ht[M];</span><br><span class="line">    HCode hcd[N];</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ht[i].data=str[i];</span><br><span class="line">        ht[i].weight=fnum[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    CreateHT(ht,n);</span><br><span class="line">    CreateHCode(ht,hcd,n);</span><br><span class="line">    DispHCode(ht,hcd,n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构笔记归档1</title>
      <link href="/posts/ef61790b.html"/>
      <url>/posts/ef61790b.html</url>
      
        <content type="html"><![CDATA[<h2 id="数据结构概述"><a href="#数据结构概述" class="headerlink" title="数据结构概述"></a>数据结构概述</h2><h3 id="1-数据结构的基本概念"><a href="#1-数据结构的基本概念" class="headerlink" title="1.数据结构的基本概念"></a>1.数据结构的基本概念</h3><p><a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1450">数据结构</a>是研究各种数据的特性以及数据之间存在的关系，进而根据实际应用的要求，合理地组织和存储数据，设计出相应的算法。</p><p>数据是对客观事物的符号表示。</p><ul><li><code>数据元素（节点）</code>：数据的基本单位，在程序中通常作为一个整体进行考虑和处理。一个数据元素可以由若干个数据项组成。</li><li><code>数据项</code>：具有独立含义的最小标识单位。例如，一条数据记录可以称为一个数据元素，数据记录的某个字段就是一个数据项。</li><li><code>数据结构</code>：相互之间存在一种或多种特点关系的数据元素的集合。</li></ul><h4 id="1-1-数据的逻辑结构"><a href="#1-1-数据的逻辑结构" class="headerlink" title="1.1.数据的逻辑结构"></a>1.1.数据的逻辑结构</h4><p>数据的逻辑结构：数据元素与数据元素之间的逻辑关系。可以分为四类基本结构：</p><ul><li><code>集合</code>：结构中的数据元素属于一个集合（集合类型元素之间过于松散）</li><li><code>线性结构</code>：结构中的数据元素存在一对一的关系</li><li><code>树形结构</code>：结构中的数据元素存在一对多的关系</li><li><code>图形结构</code>：结构中的数据元素存在多对多的关系</li></ul><p>数据的逻辑结构可以用以下的二元组来表示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S=(D,R)</span><br></pre></td></tr></table></figure><p>其中，D是数据节点的有限集合，R是D上的关系的有限集合，其中每个关系都是从D到D的关系。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">S = (D,R)</span><br><span class="line">D = &#123;1,2,3,4&#125;</span><br><span class="line">R = &#123;r&#125;</span><br><span class="line">r = &#123;&lt;1,2&gt;,&lt;1,3&gt;,&lt;3,4&gt;&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>尖括号表示<code>有向</code>关系，例如<code>&lt;a,b&gt;</code>，表示a→b</li><li>圆括号表示<code>无向</code>关系，例如<code>(a,b)</code>，表示a→b,b→a</li><li><code>前驱结点</code>：中a是b的前驱结点</li><li><code>后继结点</code>：中b是a的后继结点</li><li><code>开始结点</code>：没有前驱结点</li><li><code>终端结点</code>：没有后继结点</li><li><code>内部结点</code>：既有前驱结点，又有后继结点</li></ul><h4 id="1-2-数据的存储结构"><a href="#1-2-数据的存储结构" class="headerlink" title="1.2.数据的存储结构"></a>1.2.数据的存储结构</h4><p>数据在计算机中的存储表示称为数据的存储结构，又称物理结构。 数据存储到计算机中即要求存储各节点的<code>数值</code>，又要存储结点与结点之间的<code>逻辑关系</code>。 以下介绍四种基本的存储结构：<code>顺序存储</code>、<code>链式存储</code>、<code>索引存储</code>、<code>散列存储</code>。</p><p><strong>1.顺序存储结构</strong></p><p>顺序存储结构是把逻辑上相邻的元素存储在一组连续的存储单元中，其元素之间的逻辑关系由<code>存储单元地址</code>间的关系隐含表示。</p><p>优点：节省存储空间，只需要存储数据结点，并不需要存储结点的逻辑关系。 缺点：不便于修改，插入和删除某个结点需要修改一系列的结点。</p><p><strong>2.链式存储结构</strong></p><p>链式存储结构，给每个结点增加指针字段，用于存放临近结点的存储地址，每个结点占用两个连续的存储单元，一个存放数据，一个存放临近结点（前驱/后继结点）的地址。</p><p>优点：便于修改，修改时只需要修改结点的指针字段，不需要移动其他结点。 缺点：占用存储空间，因为需要存储结点之间的逻辑关系。因为结点之间不一定相邻，因此不能对结点进行随机访问。</p><p><strong>3.索引存储结构</strong></p><p>索引存储结构即在存储结点的同时，增加索引表，索引表的索引项为：（关键字，地址），关键字标识结点，地址为结点的指针。各结点的地址在索引表中是依次排列的。</p><p>优点：可以快速查找，可以随机访问，方便修改。 缺点：建立索引表增加了时间和空间的开销。</p><p><strong>4.散列存储结构</strong></p><p>散列存储结构是根据结点的值确定结点的存储地址。以结点作为自变量，通过散列函数算出结果i，再把i作为结点的存储地址。</p><p>优点：查找速度快，适用于快速查找和插入的场景。 缺点：只存结点数据，不存结点之间的关系。</p><h4 id="1-3-数据的运算"><a href="#1-3-数据的运算" class="headerlink" title="1.3.数据的运算"></a>1.3.数据的运算</h4><p>数据的运算就是施加于数据的操作，例如对一张表进行增删改查操作，一般数据结构中的运算除了加减乘除外还会涉及<code>算法问题</code>。</p><h4 id="1-4-数据结构与数据类型"><a href="#1-4-数据结构与数据类型" class="headerlink" title="1.4.数据结构与数据类型"></a>1.4.数据结构与数据类型</h4><p>按某种<code>逻辑关系</code>组成的数据元素，按一定的<code>存储方式</code>存储于计算机中，并在其上定义了一个<code>运算</code>的集合，称为一个<code>数据结构</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据结构 = 数据的逻辑结构 + 数据的存储结构 + 数据的运算(算法)</span><br></pre></td></tr></table></figure><p><code>数据类型</code>是程序设计语言中对数据结构的实现，数据类型明显或隐含地规定了数据的取值范围、存储方式及允许进行的运算。</p><p>常用的数据类型：</p><ol><li>基本数据类型</li><li>指针类型</li><li>数组类型</li><li>结构体类型</li><li>组合体类型</li><li>自定义类型</li></ol><h3 id="2-算法的基本概念"><a href="#2-算法的基本概念" class="headerlink" title="2.算法的基本概念"></a>2.算法的基本概念</h3><h4 id="2-1-算法及其特征"><a href="#2-1-算法及其特征" class="headerlink" title="2.1.算法及其特征"></a>2.1.算法及其特征</h4><p>算法是对特定问题求解步骤的描述，是指令的有限序列，每条指令包含一个或多个操作。</p><p>特点：</p><ul><li>有穷性：有限的步骤和有限的时间内完成</li><li>确定性：每个指令有确定的含义</li><li>可行性：算法是可以实现的</li><li>输入性：一个或多个输入</li><li>输出性：一个或多个输出</li></ul><h4 id="2-2-算法描述"><a href="#2-2-算法描述" class="headerlink" title="2.2.算法描述"></a>2.2.算法描述</h4><ol><li>输入语句</li><li>输出语句</li><li>赋值语句</li><li>条件语句</li><li>循环语句</li><li>返回语句（return）</li><li>定义函数语句</li><li>调用函数语句</li></ol><h4 id="2-3-算法分析"><a href="#2-3-算法分析" class="headerlink" title="2.3.算法分析"></a>2.3.算法分析</h4><h5 id="2-3-1-时间复杂度"><a href="#2-3-1-时间复杂度" class="headerlink" title="2.3.1.时间复杂度"></a>2.3.1.时间复杂度</h5><p>算法分析主要涉及<code>时间复杂度</code>和<code>空间复杂度</code>。一般情况我们讨论时间复杂度。</p><ul><li><code>频度</code>：某语句在算法中被执行的次数。</li><li><code>T(n)</code>：所有语句的频度之和，n为问题规模。</li><li><code>时间复杂度</code>：当n趋于无穷大时，T(n)的数量级。记作<code>T(n)=O(f(n))</code>, O的含义是T(n)的数量级。</li></ul><p>用数量级O(f(n))表示算法执行时间T(n)时，f(n)一般去简单形式：1，log<sub>2</sub>n，n，nlog<sub>2</sub>n，n<sup>2</sup>，n<sup>3</sup>，2<sup>n</sup>。</p><p>时间复杂度的关系如下：</p><p><strong>O(1) &lt; O(log<sub>2</sub>n) &lt; O(n) &lt; O(nlog<sub>2</sub>n) &lt; O(n<sup>2</sup>) &lt; O(n<sup>3</sup>) &lt; O(2<sup>n</sup>)</strong></p><p>时间复杂度函数对比:</p><p><img src="https://i.loli.net/2021/10/22/Eid2bjQx7TCGtm8.jpg" alt="time-complexity.jpg"></p><h5 id="2-3-2-空间复杂度"><a href="#2-3-2-空间复杂度" class="headerlink" title="2.3.2.空间复杂度"></a>2.3.2.空间复杂度</h5><p>一个算法的空间复杂度是指该算法所耗费的存储空间，计算公式计作：S(n) = O(f(n))。其中 n 也为数据的规模，f(n) 在这里指的是 n 所占存储空间的函数。</p><p>常用的空间复杂度：</p><ul><li>空间复杂度 O(1)</li><li>空间复杂度 O(n)</li><li>空间复杂度 O(n<sup>2</sup>)</li></ul><hr><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><h3 id="1-线性表的基本概念"><a href="#1-线性表的基本概念" class="headerlink" title="1.线性表的基本概念"></a>1.线性表的基本概念</h3><p><a href="https://baike.baidu.com/item/%E7%BA%BF%E6%80%A7%E8%A1%A8">线性表</a>是最基本、最简单、也是最常用的一种数据结构。线性表（linear list）是数据结构的一种，一个线性表是n个具有相同特性的数据元素的有限序列。</p><p>线性表中数据元素之间的关系是一对一的关系，即除了第一个和最后一个数据元素之外，其它数据元素都是首尾相接的（注意，这句话只适用大部分线性表，而不是全部。比如，循环链表逻辑层次上也是一种线性表（存储层次上属于链式存储，但是把最后一个数据元素的尾指针指向了首位结点）。</p><h4 id="1-1-线性表的定义"><a href="#1-1-线性表的定义" class="headerlink" title="1.1.线性表的定义"></a>1.1.线性表的定义</h4><p>线性表是由n（n&gt;=0）个结点组成的有限序列，通常表示成（a1,a2,…,an），满足以下特征。</p><h4 id="1-2-线性表的特征"><a href="#1-2-线性表的特征" class="headerlink" title="1.2.线性表的特征"></a>1.2.线性表的特征</h4><ul><li>线性表中每个结点至多只有一个前驱结点且至多只有一个后继结点</li><li>起始结点没有前驱结点</li><li>终结结点没有后继结点</li></ul><h4 id="1-3-线性表的基本运算"><a href="#1-3-线性表的基本运算" class="headerlink" title="1.3.线性表的基本运算"></a>1.3.线性表的基本运算</h4><ul><li>初始化线性表</li><li>求线性表的长度</li><li>求线性表的第i个元素</li><li>按值查找元素，返回元素序号</li><li>插入元素</li><li>删除元素</li><li>输出列表</li></ul><h3 id="2-线性表的存储结构"><a href="#2-线性表的存储结构" class="headerlink" title="2.线性表的存储结构"></a>2.线性表的存储结构</h3><h4 id="2-1-顺序存储结构"><a href="#2-1-顺序存储结构" class="headerlink" title="2.1.顺序存储结构"></a>2.1.顺序存储结构</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100 <span class="comment">/*顺序表的容量*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data[MAXSIZE]; <span class="comment">/*存放顺序表的元素*/</span></span><br><span class="line">    <span class="keyword">int</span> length;                <span class="comment">/*顺序表的实际长度*/</span></span><br><span class="line">&#125; SqList;</span><br></pre></td></tr></table></figure><h4 id="2-2-链式存储结构"><a href="#2-2-链式存储结构" class="headerlink" title="2.2.链式存储结构"></a>2.2.链式存储结构</h4><p>单链表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> </span></span><br><span class="line"><span class="class">&#123;</span>     </span><br><span class="line">    ElemType data;        <span class="comment">/*数据域*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span>     <span class="comment">/*指针域*/</span></span><br><span class="line">&#125; SLink;</span><br></pre></td></tr></table></figure><p>双链表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span>    </span><br><span class="line">    ElemType data;                <span class="comment">/*数据域*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">prior</span>,*<span class="title">next</span>;</span>  <span class="comment">/*分别指向前驱结点和后继结点的指针*/</span></span><br><span class="line">&#125; DLink;</span><br></pre></td></tr></table></figure><h3 id="3-顺序表的基本运算"><a href="#3-顺序表的基本运算" class="headerlink" title="3.顺序表的基本运算"></a>3.顺序表的基本运算</h3><h4 id="3-1-线性表的定义"><a href="#3-1-线性表的定义" class="headerlink" title="3.1.线性表的定义"></a>3.1.线性表的定义</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100 <span class="comment">/*顺序表的容量*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data[MAXSIZE]; <span class="comment">/*存放顺序表的元素*/</span></span><br><span class="line">    <span class="keyword">int</span> length;                <span class="comment">/*顺序表的实际长度*/</span></span><br><span class="line">&#125; SqList;</span><br></pre></td></tr></table></figure><h4 id="3-2-初始化线性表"><a href="#3-2-初始化线性表" class="headerlink" title="3.2.初始化线性表"></a>3.2.初始化线性表</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitList</span><span class="params">(SqList &amp;sq)</span> <span class="comment">/*初始化线性表*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sq.length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-求线性表长度"><a href="#3-3-求线性表长度" class="headerlink" title="3.3.求线性表长度"></a>3.3.求线性表长度</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetLength</span><span class="params">(SqList sq)</span> <span class="comment">/*求线性表长度*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sq.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4-求线性表中第i个元素"><a href="#3-4-求线性表中第i个元素" class="headerlink" title="3.4.求线性表中第i个元素"></a>3.4.求线性表中第i个元素</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetElem</span><span class="params">(SqList sq, <span class="keyword">int</span> i, ElemType &amp;e)</span> <span class="comment">/*求线性表中第i个元素*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; sq.length) <span class="comment">/*无效的i值*/</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        e = sq.data[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-5-按值查找"><a href="#3-5-按值查找" class="headerlink" title="3.5.按值查找"></a>3.5.按值查找</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Locate</span><span class="params">(SqList sq, ElemType x)</span> <span class="comment">/*按值查找*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (sq.data[i] != x) <span class="comment">/*查找值为x的第1个结点*/</span></span><br><span class="line">        i++;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; sq.length)</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">0</span>); <span class="comment">/*未找到*/</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> (i + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-6-插入元素"><a href="#3-6-插入元素" class="headerlink" title="3.6.插入元素"></a>3.6.插入元素</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InsElem</span><span class="params">(SqList &amp;sq, ElemType x, <span class="keyword">int</span> i)</span> <span class="comment">/*插入元素*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; sq.length + <span class="number">1</span>) <span class="comment">/*无效的参数i*/</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (j = sq.length; j &gt; i; j--) <span class="comment">/*将位置为i的结点及之后的结点后移*/</span></span><br><span class="line">        sq.data[j] = sq.data[j - <span class="number">1</span>];</span><br><span class="line">    sq.data[i - <span class="number">1</span>] = x; <span class="comment">/*在位置i处放入x*/</span></span><br><span class="line">    sq.length++;        <span class="comment">/*线性表长度增1*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-7-删除元素"><a href="#3-7-删除元素" class="headerlink" title="3.7.删除元素"></a>3.7.删除元素</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DelElem</span><span class="params">(SqList &amp;sq, <span class="keyword">int</span> i)</span> <span class="comment">/*删除元素*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; sq.length) <span class="comment">/*无效的参数i*/</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (j = i; j &lt; sq.length; j++) <span class="comment">/*将位置为i的结点之后的结点前移*/</span></span><br><span class="line">        sq.data[j - <span class="number">1</span>] = sq.data[j];</span><br><span class="line">    sq.length--; <span class="comment">/*线性表长度减1*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-8-输出线性表"><a href="#3-8-输出线性表" class="headerlink" title="3.8.输出线性表"></a>3.8.输出线性表</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispList</span><span class="params">(SqList sq)</span> <span class="comment">/*输出线性表*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= sq.length; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, sq.data[i - <span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-9-main"><a href="#3-9-main" class="headerlink" title="3.9.main"></a>3.9.main</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    ElemType e;</span><br><span class="line">    SqList sq;</span><br><span class="line">    InitList(sq);         <span class="comment">/*初始化顺序表sq*/</span></span><br><span class="line">    InsElem(sq, <span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>); <span class="comment">/*插入元素*/</span></span><br><span class="line">    InsElem(sq, <span class="string">&#x27;c&#x27;</span>, <span class="number">2</span>);</span><br><span class="line">    InsElem(sq, <span class="string">&#x27;a&#x27;</span>, <span class="number">3</span>);</span><br><span class="line">    InsElem(sq, <span class="string">&#x27;e&#x27;</span>, <span class="number">4</span>);</span><br><span class="line">    InsElem(sq, <span class="string">&#x27;d&#x27;</span>, <span class="number">5</span>);</span><br><span class="line">    InsElem(sq, <span class="string">&#x27;b&#x27;</span>, <span class="number">6</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;线性表:&quot;</span>);</span><br><span class="line">    DispList(sq);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;长度:%d\n&quot;</span>, GetLength(sq));</span><br><span class="line">    i = <span class="number">3</span>;</span><br><span class="line">    GetElem(sq, i, e);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;第%d个元素:%c\n&quot;</span>, i, e);</span><br><span class="line">    e = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;元素%c是第%d个元素\n&quot;</span>, e, Locate(sq, e));</span><br><span class="line">    i = <span class="number">4</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;删除第%d个元素\n&quot;</span>, i);</span><br><span class="line">    DelElem(sq, i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;线性表:&quot;</span>);</span><br><span class="line">    DispList(sq);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-单链表的基本运算"><a href="#4-单链表的基本运算" class="headerlink" title="4.单链表的基本运算"></a>4.单链表的基本运算</h3><h4 id="4-1-单链表的定义"><a href="#4-1-单链表的定义" class="headerlink" title="4.1.单链表的定义"></a>4.1.单链表的定义</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> </span></span><br><span class="line"><span class="class">&#123;</span>     </span><br><span class="line">    ElemType data;        <span class="comment">/*数据域*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span>     <span class="comment">/*指针域*/</span></span><br><span class="line">&#125; SLink;</span><br></pre></td></tr></table></figure><h4 id="4-2-初始化单链表"><a href="#4-2-初始化单链表" class="headerlink" title="4.2.初始化单链表"></a>4.2.初始化单链表</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitList</span><span class="params">(SLink *&amp;L)</span>     <span class="comment">/*L作为引用型参数*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L=(SLink *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SLink));  <span class="comment">/*创建头结点*L*/</span></span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-求线性表的长度"><a href="#4-3-求线性表的长度" class="headerlink" title="4.3.求线性表的长度"></a>4.3.求线性表的长度</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetLength</span><span class="params">(SLink *L)</span>    <span class="comment">/*求线性表的长度*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    SLink *p=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p!=<span class="literal">NULL</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        i++;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-求线性表中第i个元素"><a href="#4-4-求线性表中第i个元素" class="headerlink" title="4.4.求线性表中第i个元素"></a>4.4.求线性表中第i个元素</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetElem</span><span class="params">(SLink *L,<span class="keyword">int</span> i,ElemType &amp;e)</span>    <span class="comment">/*求线性表中第i个元素*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line">    SLink *p=L-&gt;next;  </span><br><span class="line">    <span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;GetLength(L)) </span><br><span class="line">        <span class="keyword">return</span>(<span class="number">0</span>);                <span class="comment">/*i参数不正确,返回0*/</span></span><br><span class="line">    <span class="keyword">while</span> (j&lt;i)                  <span class="comment">/*从第1个结点开始找,查找第i个结点*/</span></span><br><span class="line">    &#123; </span><br><span class="line">        p=p-&gt;next;j++;</span><br><span class="line">    &#125;</span><br><span class="line">    e=p-&gt;data;</span><br><span class="line">    <span class="keyword">return</span>(<span class="number">1</span>);                  <span class="comment">/*返回1*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-5-按值查找"><a href="#4-5-按值查找" class="headerlink" title="4.5.按值查找"></a>4.5.按值查找</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Locate</span><span class="params">(SLink *L,ElemType x)</span>    <span class="comment">/*按值查找*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">    SLink *p=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p!=<span class="literal">NULL</span> &amp;&amp; p-&gt;data!=x)      <span class="comment">/*从第1个结点开始查找data域为x的结点*/</span></span><br><span class="line">    &#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-6-插入结点"><a href="#4-6-插入结点" class="headerlink" title="4.6.插入结点"></a>4.6.插入结点</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InsElem</span><span class="params">(SLink *L,ElemType x,<span class="keyword">int</span> i)</span>    <span class="comment">/*插入结点*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line">    SLink *p=L,*s;</span><br><span class="line">    s=(SLink *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SLink));    <span class="comment">/*创建data域为x的结点*/</span></span><br><span class="line">    s-&gt;data=x;s-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;GetLength(L)+<span class="number">1</span>) </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;            <span class="comment">/*i参数不正确,插入失败,返回0*/</span></span><br><span class="line">    <span class="keyword">while</span> (j&lt;i)          <span class="comment">/*从头结点开始找,查找第i-1个结点,由p指向它*/</span></span><br><span class="line">    &#123;  </span><br><span class="line">        p=p-&gt;next;j++;</span><br><span class="line">    &#125;</span><br><span class="line">    s-&gt;next=p-&gt;next;     <span class="comment">/*将*s的next域指向*p的下一个结点(即第i个结点)*/</span></span><br><span class="line">    p-&gt;next=s;            <span class="comment">/*将*p的next域指向*s,这样*s变成第i个结点*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;           <span class="comment">/*插入运算成功,返回1*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-7-删除结点"><a href="#4-7-删除结点" class="headerlink" title="4.7.删除结点"></a>4.7.删除结点</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DelElem</span><span class="params">(SLink *L,<span class="keyword">int</span> i)</span>    <span class="comment">/*删除结点*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line">    SLink *p=L,*q;</span><br><span class="line">    <span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;GetLength(L)) </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;       <span class="comment">/*i参数不正确,插入失败,返回0*/</span></span><br><span class="line">    <span class="keyword">while</span> (j&lt;i)            <span class="comment">/*从头结点开始,查找第i-1个结点,由p指向它*/</span></span><br><span class="line">    &#123;</span><br><span class="line">        p=p-&gt;next;j++;</span><br><span class="line">    &#125;</span><br><span class="line">    q=p-&gt;next;          <span class="comment">/*由q指向第i个结点*/</span></span><br><span class="line">    p-&gt;next=q-&gt;next;    <span class="comment">/*将*p的next指向*q之后结点,即从链表中删除第i个结点*/</span></span><br><span class="line">    <span class="built_in">free</span>(q);                <span class="comment">/*释放第i个结点占用的空间*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;            <span class="comment">/*删除运算成功,返回1*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-8-输出单链表"><a href="#4-8-输出单链表" class="headerlink" title="4.8.输出单链表"></a>4.8.输出单链表</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispList</span><span class="params">(SLink *L)</span>    <span class="comment">/*输出单链表*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SLink *p=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p!=<span class="literal">NULL</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>,p-&gt;data);</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-9-main"><a href="#4-9-main" class="headerlink" title="4.9.main"></a>4.9.main</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    ElemType e;</span><br><span class="line">    SLink *L;</span><br><span class="line">    InitList(L);        <span class="comment">/*初始化单链表L*/</span></span><br><span class="line">    InsElem(L,<span class="string">&#x27;a&#x27;</span>,<span class="number">1</span>);    <span class="comment">/*插入元素*/</span></span><br><span class="line">    InsElem(L,<span class="string">&#x27;c&#x27;</span>,<span class="number">2</span>);</span><br><span class="line">    InsElem(L,<span class="string">&#x27;a&#x27;</span>,<span class="number">3</span>);</span><br><span class="line">    InsElem(L,<span class="string">&#x27;e&#x27;</span>,<span class="number">4</span>);</span><br><span class="line">    InsElem(L,<span class="string">&#x27;d&#x27;</span>,<span class="number">5</span>);</span><br><span class="line">    InsElem(L,<span class="string">&#x27;b&#x27;</span>,<span class="number">6</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;线性表:&quot;</span>);DispList(L);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;长度:%d\n&quot;</span>,GetLength(L));</span><br><span class="line">    i=<span class="number">3</span>;GetElem(L,i,e);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;第%d个元素:%c\n&quot;</span>,i,e);</span><br><span class="line">    e=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;元素%c是第%d个元素\n&quot;</span>,e,Locate(L,e));</span><br><span class="line">    i=<span class="number">4</span>;<span class="built_in">printf</span>(<span class="string">&quot;删除第%d个元素\n&quot;</span>,i);</span><br><span class="line">    DelElem(L,i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;线性表:&quot;</span>);DispList(L);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-链表的基本运算-By-Go"><a href="#5-链表的基本运算-By-Go" class="headerlink" title="5.链表的基本运算(By-Go)"></a>5.链表的基本运算(By-Go)</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Package linkedlist creates a ItemLinkedList data structure for the Item type</span></span><br><span class="line"><span class="keyword">package</span> linkedlist</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Item the type of the linked list</span></span><br><span class="line"><span class="keyword">type</span> Item <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Node a single node that composes the list</span></span><br><span class="line"><span class="keyword">type</span> Node <span class="keyword">struct</span> &#123;</span><br><span class="line">    content Item</span><br><span class="line">    next    *Node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ItemLinkedList the linked list of Items</span></span><br><span class="line"><span class="keyword">type</span> ItemLinkedList <span class="keyword">struct</span> &#123;</span><br><span class="line">    head *Node</span><br><span class="line">    size <span class="keyword">int</span></span><br><span class="line">    lock sync.RWMutex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Append adds an Item to the end of the linked list</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ll *ItemLinkedList)</span> <span class="title">Append</span><span class="params">(t Item)</span></span> &#123;</span><br><span class="line">    ll.lock.Lock()</span><br><span class="line">    node := Node&#123;t, <span class="literal">nil</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> ll.head == <span class="literal">nil</span> &#123;</span><br><span class="line">        ll.head = &amp;node</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        last := ll.head</span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> last.next == <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            last = last.next</span><br><span class="line">        &#125;</span><br><span class="line">        last.next = &amp;node</span><br><span class="line">    &#125;</span><br><span class="line">    ll.size++</span><br><span class="line">    ll.lock.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Insert adds an Item at position i</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ll *ItemLinkedList)</span> <span class="title">Insert</span><span class="params">(i <span class="keyword">int</span>, t Item)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    ll.lock.Lock()</span><br><span class="line">    <span class="keyword">defer</span> ll.lock.Unlock()</span><br><span class="line">    <span class="keyword">if</span> i &lt; <span class="number">0</span> || i &gt; ll.size &#123;</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;Index out of bounds&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    addNode := Node&#123;t, <span class="literal">nil</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">0</span> &#123;</span><br><span class="line">        addNode.next = ll.head</span><br><span class="line">        ll.head = &amp;addNode</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    node := ll.head</span><br><span class="line">    j := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j &lt; i<span class="number">-2</span> &#123;</span><br><span class="line">        j++</span><br><span class="line">        node = node.next</span><br><span class="line">    &#125;</span><br><span class="line">    addNode.next = node.next</span><br><span class="line">    node.next = &amp;addNode</span><br><span class="line">    ll.size++</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RemoveAt removes a node at position i</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ll *ItemLinkedList)</span> <span class="title">RemoveAt</span><span class="params">(i <span class="keyword">int</span>)</span> <span class="params">(*Item, error)</span></span> &#123;</span><br><span class="line">    ll.lock.Lock()</span><br><span class="line">    <span class="keyword">defer</span> ll.lock.Unlock()</span><br><span class="line">    <span class="keyword">if</span> i &lt; <span class="number">0</span> || i &gt; ll.size &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;Index out of bounds&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    node := ll.head</span><br><span class="line">    j := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j &lt; i<span class="number">-1</span> &#123;</span><br><span class="line">        j++</span><br><span class="line">        node = node.next</span><br><span class="line">    &#125;</span><br><span class="line">    remove := node.next</span><br><span class="line">    node.next = remove.next</span><br><span class="line">    ll.size--</span><br><span class="line">    <span class="keyword">return</span> &amp;remove.content, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IndexOf returns the position of the Item t</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ll *ItemLinkedList)</span> <span class="title">IndexOf</span><span class="params">(t Item)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    ll.lock.RLock()</span><br><span class="line">    <span class="keyword">defer</span> ll.lock.RUnlock()</span><br><span class="line">    node := ll.head</span><br><span class="line">    j := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> node.content == t &#123;</span><br><span class="line">            <span class="keyword">return</span> j</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> node.next == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        &#125;</span><br><span class="line">        node = node.next</span><br><span class="line">        j++</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IsEmpty returns true if the list is empty</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ll *ItemLinkedList)</span> <span class="title">IsEmpty</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    ll.lock.RLock()</span><br><span class="line">    <span class="keyword">defer</span> ll.lock.RUnlock()</span><br><span class="line">    <span class="keyword">if</span> ll.head == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Size returns the linked list size</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ll *ItemLinkedList)</span> <span class="title">Size</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    ll.lock.RLock()</span><br><span class="line">    <span class="keyword">defer</span> ll.lock.RUnlock()</span><br><span class="line">    size := <span class="number">1</span></span><br><span class="line">    last := ll.head</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> last == <span class="literal">nil</span> || last.next == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        last = last.next</span><br><span class="line">        size++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> size</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Insert adds an Item at position i</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ll *ItemLinkedList)</span> <span class="title">String</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ll.lock.RLock()</span><br><span class="line">    <span class="keyword">defer</span> ll.lock.RUnlock()</span><br><span class="line">    node := ll.head</span><br><span class="line">    j := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        j++</span><br><span class="line">        fmt.Print(node.content)</span><br><span class="line">        fmt.Print(<span class="string">&quot; &quot;</span>)</span><br><span class="line">        node = node.next</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Head returns a pointer to the first node of the list</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ll *ItemLinkedList)</span> <span class="title">Head</span><span class="params">()</span> *<span class="title">Node</span></span> &#123;</span><br><span class="line">    ll.lock.RLock()</span><br><span class="line">    <span class="keyword">defer</span> ll.lock.RUnlock()</span><br><span class="line">    <span class="keyword">return</span> ll.head</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-循环单链表的基本运算"><a href="#6-循环单链表的基本运算" class="headerlink" title="6.循环单链表的基本运算"></a>6.循环单链表的基本运算</h3><h4 id="6-1-循环单链表的定义"><a href="#6-1-循环单链表的定义" class="headerlink" title="6.1.循环单链表的定义"></a>6.1.循环单链表的定义</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> </span></span><br><span class="line"><span class="class">&#123;</span>     </span><br><span class="line">    ElemType data;            <span class="comment">/*数据域*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span>         <span class="comment">/*指针域*/</span></span><br><span class="line">&#125; SLink;</span><br></pre></td></tr></table></figure><h4 id="6-2-初始化循环单链表"><a href="#6-2-初始化循环单链表" class="headerlink" title="6.2.初始化循环单链表"></a>6.2.初始化循环单链表</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitList</span><span class="params">(SLink *&amp;L)</span>       <span class="comment">/*初始化线性表,L为引用型参数*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L=(SLink *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SLink));</span><br><span class="line">    L-&gt;next=L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-3-求线性表的长度"><a href="#6-3-求线性表的长度" class="headerlink" title="6.3.求线性表的长度"></a>6.3.求线性表的长度</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetLength</span><span class="params">(SLink *L)</span>    <span class="comment">/*求线性表的长度*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    SLink *p=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p!=L) </span><br><span class="line">    &#123;</span><br><span class="line">        i++;p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-4-求线性表中第i个元素"><a href="#6-4-求线性表中第i个元素" class="headerlink" title="6.4.求线性表中第i个元素"></a>6.4.求线性表中第i个元素</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetElem</span><span class="params">(SLink *L,<span class="keyword">int</span> i,ElemType &amp;e)</span>    <span class="comment">/*求线性表中第i个元素*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line">    SLink *p=L-&gt;next;  </span><br><span class="line">    <span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;GetLength(L)) </span><br><span class="line">        <span class="keyword">return</span>(<span class="number">0</span>);            <span class="comment">/*i参数不正确,返回0*/</span></span><br><span class="line">    <span class="keyword">while</span> (j&lt;i)              <span class="comment">/*从第1个结点开始,查找第i个结点*/</span></span><br><span class="line">    &#123;     </span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    e=p-&gt;data;</span><br><span class="line">    <span class="keyword">return</span>(<span class="number">1</span>);              <span class="comment">/*返回1*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-5-按值查找"><a href="#6-5-按值查找" class="headerlink" title="6.5.按值查找"></a>6.5.按值查找</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Locate</span><span class="params">(SLink *L,ElemType x)</span>    <span class="comment">/*按值查找*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">    SLink *p=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p!=L &amp;&amp; p-&gt;data!=x)      <span class="comment">/*从第1个结点开始查找data域为x的结点*/</span></span><br><span class="line">    &#123;    p=p-&gt;next;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p==L)</span><br><span class="line">        <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-6-插入结点"><a href="#6-6-插入结点" class="headerlink" title="6.6.插入结点"></a>6.6.插入结点</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InsElem</span><span class="params">(SLink *L,ElemType x,<span class="keyword">int</span> i)</span>    <span class="comment">/*插入结点*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line">    SLink *p=L,*s;</span><br><span class="line">    s=(SLink *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SLink));</span><br><span class="line">    s-&gt;data=x;s-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;GetLength(L)+<span class="number">1</span>) </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (j&lt;i) </span><br><span class="line">    &#123;</span><br><span class="line">        p=p-&gt;next;j++;</span><br><span class="line">    &#125;</span><br><span class="line">    s-&gt;next=p-&gt;next;</span><br><span class="line">    p-&gt;next=s;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-7-删除结点"><a href="#6-7-删除结点" class="headerlink" title="6.7.删除结点"></a>6.7.删除结点</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DelElem</span><span class="params">(SLink *L,<span class="keyword">int</span> i)</span>    <span class="comment">/*删除结点*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line">    SLink *p=L,*q;</span><br><span class="line">    <span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;GetLength(L)) </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (j&lt;i) </span><br><span class="line">    &#123;</span><br><span class="line">        p=p-&gt;next;j++;</span><br><span class="line">    &#125;</span><br><span class="line">    q=p-&gt;next;</span><br><span class="line">    p-&gt;next=q-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-8-输出线性表"><a href="#6-8-输出线性表" class="headerlink" title="6.8.输出线性表"></a>6.8.输出线性表</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispList</span><span class="params">(SLink *L)</span>    <span class="comment">/*输出线性表*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SLink *p=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p!=L) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>,p-&gt;data);p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-9-main"><a href="#6-9-main" class="headerlink" title="6.9.main"></a>6.9.main</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    ElemType e;</span><br><span class="line">    SLink *L;</span><br><span class="line">    InitList(L);        <span class="comment">/*初始化单链表L*/</span></span><br><span class="line">    InsElem(L,<span class="string">&#x27;a&#x27;</span>,<span class="number">1</span>);    <span class="comment">/*插入元素*/</span></span><br><span class="line">    InsElem(L,<span class="string">&#x27;c&#x27;</span>,<span class="number">2</span>);</span><br><span class="line">    InsElem(L,<span class="string">&#x27;a&#x27;</span>,<span class="number">3</span>);</span><br><span class="line">    InsElem(L,<span class="string">&#x27;e&#x27;</span>,<span class="number">4</span>);</span><br><span class="line">    InsElem(L,<span class="string">&#x27;d&#x27;</span>,<span class="number">5</span>);</span><br><span class="line">    InsElem(L,<span class="string">&#x27;b&#x27;</span>,<span class="number">6</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;线性表:&quot;</span>);DispList(L);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;长度:%d\n&quot;</span>,GetLength(L));</span><br><span class="line">    i=<span class="number">3</span>;GetElem(L,i,e);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;第%d个元素:%c\n&quot;</span>,i,e);</span><br><span class="line">    e=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;元素%c是第%d个元素\n&quot;</span>,e,Locate(L,e));</span><br><span class="line">    i=<span class="number">4</span>;<span class="built_in">printf</span>(<span class="string">&quot;删除第%d个元素\n&quot;</span>,i);</span><br><span class="line">    DelElem(L,i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;线性表:&quot;</span>);DispList(L);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-双链表的基本运算"><a href="#7-双链表的基本运算" class="headerlink" title="7.双链表的基本运算"></a>7.双链表的基本运算</h3><h4 id="7-1-双链表的定义"><a href="#7-1-双链表的定义" class="headerlink" title="7.1.双链表的定义"></a>7.1.双链表的定义</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span>    </span><br><span class="line">    ElemType data;                <span class="comment">/*数据域*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">prior</span>,*<span class="title">next</span>;</span>  <span class="comment">/*分别指向前驱结点和后继结点的指针*/</span></span><br><span class="line">&#125; DLink;</span><br></pre></td></tr></table></figure><h4 id="7-2-初始化双链表"><a href="#7-2-初始化双链表" class="headerlink" title="7.2.初始化双链表"></a>7.2.初始化双链表</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitList</span><span class="params">(DLink *&amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L=(DLink *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DLink));  <span class="comment">/*创建头结点*L*/</span></span><br><span class="line">    L-&gt;prior=L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-3-求表长运算"><a href="#7-3-求表长运算" class="headerlink" title="7.3.求表长运算"></a>7.3.求表长运算</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetLength</span><span class="params">(DLink *L)</span>    <span class="comment">/*求表长运算*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    DLink *p=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p!=<span class="literal">NULL</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        i++;p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-4-求线性表中第i个元素"><a href="#7-4-求线性表中第i个元素" class="headerlink" title="7.4.求线性表中第i个元素"></a>7.4.求线性表中第i个元素</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetElem</span><span class="params">(DLink *L,<span class="keyword">int</span> i,ElemType &amp;e)</span>    <span class="comment">/*求线性表中第i个元素*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line">    DLink *p=L-&gt;next;  </span><br><span class="line">    <span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;GetLength(L)) </span><br><span class="line">        <span class="keyword">return</span>(<span class="number">0</span>);                <span class="comment">/*i参数不正确,返回0*/</span></span><br><span class="line">    <span class="keyword">while</span> (j&lt;i)                  <span class="comment">/*从第1个结点开始,查找第i个结点*/</span></span><br><span class="line">    &#123; </span><br><span class="line">        p=p-&gt;next;j++;</span><br><span class="line">    &#125;</span><br><span class="line">    e=p-&gt;data;</span><br><span class="line">    <span class="keyword">return</span>(<span class="number">1</span>);                  <span class="comment">/*返回1*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-5-按值查找"><a href="#7-5-按值查找" class="headerlink" title="7.5.按值查找"></a>7.5.按值查找</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Locate</span><span class="params">(DLink *L,ElemType x)</span>    <span class="comment">/*按值查找*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">    DLink *p=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p!=<span class="literal">NULL</span> &amp;&amp; p-&gt;data!=x)      <span class="comment">/*从第1个结点开始查找data域为x的结点*/</span></span><br><span class="line">    &#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-6-插入运算"><a href="#7-6-插入运算" class="headerlink" title="7.6.插入运算"></a>7.6.插入运算</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InsElem</span><span class="params">(DLink *L,ElemType x,<span class="keyword">int</span> i)</span>    <span class="comment">/*插入运算*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line">    DLink *p=L,*s;</span><br><span class="line">    s=(DLink *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DLink));      <span class="comment">/*创建data域为x的结点*/</span></span><br><span class="line">    s-&gt;data=x;s-&gt;prior=s-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;GetLength(L)+<span class="number">1</span>)        <span class="comment">/*i参数不正确,插入失败,返回0*/</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (j&lt;i)              <span class="comment">/*找到第i-1个结点,由p指向它*/</span></span><br><span class="line">    &#123;</span><br><span class="line">            p=p-&gt;next;j++;</span><br><span class="line">    &#125;</span><br><span class="line">    s-&gt;next=p-&gt;next;           <span class="comment">/**s的next域指向*p的下一个结点*/</span></span><br><span class="line">    s-&gt;prior=p;             <span class="comment">/**s的prior域指向*p*/</span></span><br><span class="line">    <span class="keyword">if</span> (p-&gt;next!=<span class="literal">NULL</span>)      <span class="comment">/*若*p不是最后结点,则将*p之后结点的prior域指向*s*/</span></span><br><span class="line">        s-&gt;next-&gt;prior=s;</span><br><span class="line">     p-&gt;next=s;              <span class="comment">/**p的next域指向*s*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;                 <span class="comment">/*插入运算成功,返回1*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-7-删除运算"><a href="#7-7-删除运算" class="headerlink" title="7.7.删除运算"></a>7.7.删除运算</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DelElem</span><span class="params">(DLink *L,<span class="keyword">int</span> i)</span>    <span class="comment">/*删除运算*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line">    DLink *p=L,*q;</span><br><span class="line">    <span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;GetLength(L))    <span class="comment">/*i参数不正确,删除失败,返回0*/</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (j&lt;i)                <span class="comment">/*找到第i-1个结点,由p指向它*/</span></span><br><span class="line">    &#123;</span><br><span class="line">           p=p-&gt;next;j++;</span><br><span class="line">    &#125;</span><br><span class="line">    q=p-&gt;next;                 <span class="comment">/*q指向*p的下一个结点,即要删除的结点*/</span></span><br><span class="line">    p-&gt;next=q-&gt;next;</span><br><span class="line">    <span class="keyword">if</span> (q-&gt;next!=<span class="literal">NULL</span>)        <span class="comment">/*若*q不是最后结点,则将*q之后结点的prior域指向*p*/</span></span><br><span class="line">        q-&gt;next-&gt;prior=p;</span><br><span class="line">    <span class="built_in">free</span>(q);                    <span class="comment">/*释放第i个结点占用的空间*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;                   <span class="comment">/*删除运算成功,返回1*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-8-输出线性表"><a href="#7-8-输出线性表" class="headerlink" title="7.8.输出线性表"></a>7.8.输出线性表</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispList</span><span class="params">(DLink *L)</span>    <span class="comment">/*输出线性表*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DLink *p=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p!=<span class="literal">NULL</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>,p-&gt;data);p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-9-main"><a href="#7-9-main" class="headerlink" title="7.9.main"></a>7.9.main</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    ElemType e;</span><br><span class="line">    DLink *L;</span><br><span class="line">    InitList(L);        <span class="comment">/*初始化双链表L*/</span></span><br><span class="line">    InsElem(L,<span class="string">&#x27;a&#x27;</span>,<span class="number">1</span>);    <span class="comment">/*插入元素*/</span></span><br><span class="line">    InsElem(L,<span class="string">&#x27;c&#x27;</span>,<span class="number">2</span>);</span><br><span class="line">    InsElem(L,<span class="string">&#x27;a&#x27;</span>,<span class="number">3</span>);</span><br><span class="line">    InsElem(L,<span class="string">&#x27;e&#x27;</span>,<span class="number">4</span>);</span><br><span class="line">    InsElem(L,<span class="string">&#x27;d&#x27;</span>,<span class="number">5</span>);</span><br><span class="line">    InsElem(L,<span class="string">&#x27;b&#x27;</span>,<span class="number">6</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;线性表:&quot;</span>);DispList(L);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;长度:%d\n&quot;</span>,GetLength(L));</span><br><span class="line">    i=<span class="number">3</span>;GetElem(L,i,e);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;第%d个元素:%c\n&quot;</span>,i,e);</span><br><span class="line">    e=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;元素%c是第%d个元素\n&quot;</span>,e,Locate(L,e));</span><br><span class="line">    i=<span class="number">4</span>;<span class="built_in">printf</span>(<span class="string">&quot;删除第%d个元素\n&quot;</span>,i);</span><br><span class="line">    DelElem(L,i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;线性表:&quot;</span>);DispList(L);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-循环双链表的基本运算"><a href="#8-循环双链表的基本运算" class="headerlink" title="8.循环双链表的基本运算"></a>8.循环双链表的基本运算</h3><h4 id="8-1-循环双链表的定义"><a href="#8-1-循环双链表的定义" class="headerlink" title="8.1.循环双链表的定义"></a>8.1.循环双链表的定义</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span>    </span><br><span class="line">    ElemType data;                <span class="comment">/*数据域*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">prior</span>,*<span class="title">next</span>;</span>  <span class="comment">/*分别指向前驱结点和后继结点的指针*/</span></span><br><span class="line">&#125; DLink;</span><br></pre></td></tr></table></figure><h4 id="8-2-初始化循环双链表"><a href="#8-2-初始化循环双链表" class="headerlink" title="8.2.初始化循环双链表"></a>8.2.初始化循环双链表</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitList</span><span class="params">(DLink *&amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L=(DLink *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DLink));</span><br><span class="line">    L-&gt;prior=L-&gt;next=L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-3-求表长运算"><a href="#8-3-求表长运算" class="headerlink" title="8.3.求表长运算"></a>8.3.求表长运算</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetLength</span><span class="params">(DLink *L)</span>    <span class="comment">/*求表长运算*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    DLink *p=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p!=L) </span><br><span class="line">    &#123;</span><br><span class="line">        i++;p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-4-求线性表中第i个元素"><a href="#8-4-求线性表中第i个元素" class="headerlink" title="8.4.求线性表中第i个元素"></a>8.4.求线性表中第i个元素</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetElem</span><span class="params">(DLink *L,<span class="keyword">int</span> i,ElemType &amp;e)</span>    <span class="comment">/*求线性表中第i个元素*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line">    DLink *p=L-&gt;next;  </span><br><span class="line">    <span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;GetLength(L)) </span><br><span class="line">        <span class="keyword">return</span>(<span class="number">0</span>);                <span class="comment">/*i参数不正确,返回0*/</span></span><br><span class="line">    <span class="keyword">while</span> (j&lt;i)                  <span class="comment">/*从第1个结点开始,查找第i个结点*/</span></span><br><span class="line">    &#123; </span><br><span class="line">        p=p-&gt;next;j++;</span><br><span class="line">    &#125;</span><br><span class="line">    e=p-&gt;data;</span><br><span class="line">    <span class="keyword">return</span>(<span class="number">1</span>);                  <span class="comment">/*返回1*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-5-按值查找"><a href="#8-5-按值查找" class="headerlink" title="8.5.按值查找"></a>8.5.按值查找</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Locate</span><span class="params">(DLink *L,ElemType x)</span>    <span class="comment">/*按值查找*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">    DLink *p=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p!=L &amp;&amp; p-&gt;data!=x)      <span class="comment">/*从第1个结点开始查找data域为x的结点*/</span></span><br><span class="line">    &#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p==L)</span><br><span class="line">        <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-6-插入运算"><a href="#8-6-插入运算" class="headerlink" title="8.6.插入运算"></a>8.6.插入运算</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InsElem</span><span class="params">(DLink *L,ElemType x,<span class="keyword">int</span> i)</span>    <span class="comment">/*插入运算*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line">    DLink *p=L,*s;</span><br><span class="line">    s=(DLink *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DLink));</span><br><span class="line">    s-&gt;data=x;s-&gt;prior=s-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;GetLength(L)+<span class="number">1</span>) </span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (j&lt;i)              <span class="comment">/*找到第i-1个结点,由p指向它*/</span></span><br><span class="line">    &#123;</span><br><span class="line">           p=p-&gt;next;j++;</span><br><span class="line">    &#125;</span><br><span class="line">    s-&gt;next=p-&gt;next;      <span class="comment">/*s的next域指向p之后的结点*/</span></span><br><span class="line">    s-&gt;next-&gt;prior=s;     <span class="comment">/*p之后结点的prior域指向s*/</span></span><br><span class="line">    p-&gt;next=s;             <span class="comment">/*p的next域指向s*/</span></span><br><span class="line">    s-&gt;prior=p;            <span class="comment">/*s的prior域指向p*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-7-删除运算"><a href="#8-7-删除运算" class="headerlink" title="8.7.删除运算"></a>8.7.删除运算</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DelElem</span><span class="params">(DLink *L,<span class="keyword">int</span> i)</span>    <span class="comment">/*删除运算*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line">    DLink *p=L,*q;</span><br><span class="line">    <span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;GetLength(L)) </span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (j&lt;i)         <span class="comment">/*找到第i-1个结点,由p指向它*/</span></span><br><span class="line">    &#123;</span><br><span class="line">           p=p-&gt;next;j++;</span><br><span class="line">    &#125;</span><br><span class="line">    q=p-&gt;next;          <span class="comment">/*q指向p的下一个结点,即要删除的结点*/</span></span><br><span class="line">    p-&gt;next=q-&gt;next;       <span class="comment">/*p的next指向q的下一个结点*/</span></span><br><span class="line">    q-&gt;next-&gt;prior=p;    <span class="comment">/*q的下一个结点的prior域指向p*/</span></span><br><span class="line">    <span class="built_in">free</span>(q);            <span class="comment">/*释放q所占用的空间*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-8-输出线性表"><a href="#8-8-输出线性表" class="headerlink" title="8.8.输出线性表"></a>8.8.输出线性表</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispList</span><span class="params">(DLink *L)</span>    <span class="comment">/*输出线性表*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DLink *p=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p!=L) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>,p-&gt;data);p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-9-main"><a href="#8-9-main" class="headerlink" title="8.9.main"></a>8.9.main</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    ElemType e;</span><br><span class="line">    DLink *L;</span><br><span class="line">    InitList(L);        <span class="comment">/*初始化双链表L*/</span></span><br><span class="line">    InsElem(L,<span class="string">&#x27;a&#x27;</span>,<span class="number">1</span>);    <span class="comment">/*插入元素*/</span></span><br><span class="line">    InsElem(L,<span class="string">&#x27;c&#x27;</span>,<span class="number">2</span>);</span><br><span class="line">    InsElem(L,<span class="string">&#x27;a&#x27;</span>,<span class="number">3</span>);</span><br><span class="line">    InsElem(L,<span class="string">&#x27;e&#x27;</span>,<span class="number">4</span>);</span><br><span class="line">    InsElem(L,<span class="string">&#x27;d&#x27;</span>,<span class="number">5</span>);</span><br><span class="line">    InsElem(L,<span class="string">&#x27;b&#x27;</span>,<span class="number">6</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;线性表:&quot;</span>);DispList(L);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;长度:%d\n&quot;</span>,GetLength(L));</span><br><span class="line">    i=<span class="number">3</span>;GetElem(L,i,e);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;第%d个元素:%c\n&quot;</span>,i,e);</span><br><span class="line">    e=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;元素%c是第%d个元素\n&quot;</span>,e,Locate(L,e));</span><br><span class="line">    i=<span class="number">4</span>;<span class="built_in">printf</span>(<span class="string">&quot;删除第%d个元素\n&quot;</span>,i);</span><br><span class="line">    DelElem(L,i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;线性表:&quot;</span>);DispList(L);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-顺序表求约瑟夫问题"><a href="#9-顺序表求约瑟夫问题" class="headerlink" title="9.顺序表求约瑟夫问题"></a>9.顺序表求约瑟夫问题</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 50</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">jose</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mon[MaxSize];            <span class="comment">/*存放n个猴子的编号*/</span></span><br><span class="line">    <span class="keyword">int</span> i,d,count;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)            <span class="comment">/*设置猴子的编号*/</span></span><br><span class="line">        mon[i]=i+<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;出队前:&quot;</span>);            <span class="comment">/*输出出列前的编号*/</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++) </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,mon[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;出队后:&quot;</span>);</span><br><span class="line">    count=<span class="number">0</span>;                    <span class="comment">/*记录退出圈外的猴子个数*/</span></span><br><span class="line">    i=<span class="number">-1</span>;                        <span class="comment">/*从0号位置的猴子开始计数*/</span></span><br><span class="line">    <span class="keyword">while</span> (count&lt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        d=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (d&lt;m)                <span class="comment">/*累计m个猴子*/</span></span><br><span class="line">        &#123;</span><br><span class="line">            i=(i+<span class="number">1</span>)%n;</span><br><span class="line">            <span class="keyword">if</span> (mon[i]!=<span class="number">0</span>)</span><br><span class="line">                d++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,mon[i]);    <span class="comment">/*猴子出列*/</span></span><br><span class="line">        mon[i]=<span class="number">0</span>;</span><br><span class="line">        count++;                <span class="comment">/*出列数增1*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入猴子个数n,m:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    jose(n,m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-两个多项式相加运算"><a href="#10-两个多项式相加运算" class="headerlink" title="10.两个多项式相加运算"></a>10.两个多项式相加运算</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span>      <span class="keyword">float</span> coef;            <span class="comment">/*序数*/</span></span><br><span class="line">       <span class="keyword">int</span> expn;              <span class="comment">/*指数*/</span></span><br><span class="line">       <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span>    <span class="comment">/*指向下一个结点的指针*/</span></span><br><span class="line">&#125; PolyNode;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitList</span><span class="params">(PolyNode *&amp;L)</span>        <span class="comment">/*初始化多项式单链表*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L=(PolyNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PolyNode));    <span class="comment">/*建立头结点*/</span></span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetLength</span><span class="params">(PolyNode *L)</span>        <span class="comment">/*求多项式单链表的长度*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    PolyNode *p=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p!=<span class="literal">NULL</span>)        <span class="comment">/*扫描单链表L,用i累计数据结点个数*/</span></span><br><span class="line">    &#123;</span><br><span class="line">        i++;p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">PolyNode *<span class="title">GetElem</span><span class="params">(PolyNode *L,<span class="keyword">int</span> i)</span>    <span class="comment">/*返回多项式单链表中第i个结点的指针*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line">    PolyNode *p=L-&gt;next;</span><br><span class="line">    <span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;GetLength(L)) </span><br><span class="line">           <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (j&lt;i)                <span class="comment">/*沿next域找第i个结点*/</span></span><br><span class="line">    &#123;</span><br><span class="line">           p=p-&gt;next;j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">PolyNode *<span class="title">Locate</span><span class="params">(PolyNode *L,<span class="keyword">float</span> c,<span class="keyword">int</span> e)</span>    <span class="comment">/*在多项式单链表中按值查找*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PolyNode *p=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p!=<span class="literal">NULL</span> &amp;&amp; (p-&gt;coef!=c ||p-&gt;expn!=e))</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InsElem</span><span class="params">(PolyNode *&amp;L,<span class="keyword">float</span> c,<span class="keyword">int</span> e,<span class="keyword">int</span> i)</span>  <span class="comment">/*在多项式单链表中插入一个结点*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line">    PolyNode *p=L,*s;</span><br><span class="line">    s=(PolyNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PolyNode));</span><br><span class="line">    s-&gt;coef=c;s-&gt;expn=e;s-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;GetLength(L)+<span class="number">1</span>) </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (j&lt;i)        <span class="comment">/*查找第i-1个结点*p*/</span></span><br><span class="line">    &#123;</span><br><span class="line">        p=p-&gt;next;j++;</span><br><span class="line">    &#125;</span><br><span class="line">    s-&gt;next=p-&gt;next;</span><br><span class="line">    p-&gt;next=s;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DelElem</span><span class="params">(PolyNode *L,<span class="keyword">int</span> i)</span>        <span class="comment">/*在多项式单链表中删除一个结点*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line">    PolyNode *p=L,*q;</span><br><span class="line">    <span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;GetLength(L)) </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (j&lt;i)        <span class="comment">/*在单链表中查找第i-1个结点*p*/</span></span><br><span class="line">    &#123;</span><br><span class="line">        p=p-&gt;next;j++;</span><br><span class="line">    &#125;</span><br><span class="line">    q=p-&gt;next;</span><br><span class="line">    p-&gt;next=q-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispList</span><span class="params">(PolyNode *L)</span>        <span class="comment">/*输出多项式单链表的元素值*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PolyNode *p=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;(%g,%d) &quot;</span>,p-&gt;coef,p-&gt;expn);</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreaPolyList</span><span class="params">(PolyNode *&amp;L,<span class="keyword">float</span> C[],<span class="keyword">int</span> E[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    InitList(L);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        InsElem(L,C[i],E[i],i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SortPloy</span><span class="params">(PolyNode *&amp;L)</span>    <span class="comment">/*对L的多项式单链表按expn域递增排序*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PolyNode *p=L-&gt;next,*q,*pre;</span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (p!=<span class="literal">NULL</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (L-&gt;next==<span class="literal">NULL</span>)                     <span class="comment">/*处理第1个结点*/</span></span><br><span class="line">        &#123;</span><br><span class="line">            L-&gt;next=p;p=p-&gt;next;</span><br><span class="line">            L-&gt;next-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">           &#125;</span><br><span class="line">        <span class="keyword">else</span>                                  <span class="comment">/*处理其余结点*/</span></span><br><span class="line">        &#123;</span><br><span class="line">            pre=L;q=pre-&gt;next;</span><br><span class="line">            <span class="keyword">while</span> (q!=<span class="literal">NULL</span> &amp;&amp; p-&gt;expn&gt;q-&gt;expn)     <span class="comment">/*找q-&gt;expn刚大于或等于p-&gt;expn的结点*q的前驱结点*pre*/</span></span><br><span class="line">            &#123;</span><br><span class="line">                pre=q;q=q-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            q=p-&gt;next;                      <span class="comment">/*在*pre结点之后插入*p*/</span></span><br><span class="line">            p-&gt;next=pre-&gt;next;</span><br><span class="line">            pre-&gt;next=p;</span><br><span class="line">            p=q;</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">PolyNode *<span class="title">AddPoly</span><span class="params">(PolyNode *pa,PolyNode *pb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PolyNode *pc,*p1=pa-&gt;next,*p2=pb-&gt;next,*p,*tc,*s;</span><br><span class="line">    pc=(PolyNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PolyNode));    <span class="comment">/*新建头结点*/</span></span><br><span class="line">    pc-&gt;next=<span class="literal">NULL</span>;                    <span class="comment">/*pc为新建单链表的头结点*/</span></span><br><span class="line">    tc=pc;                            <span class="comment">/*tc始终指向新建单链表的最后结点*/</span></span><br><span class="line">    <span class="keyword">while</span> (p1!=<span class="literal">NULL</span> &amp;&amp; p2!=<span class="literal">NULL</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (p1-&gt;expn&lt;p2-&gt;expn)        <span class="comment">/*将*p1结点复制到*s并链到pc尾*/</span></span><br><span class="line">        &#123;</span><br><span class="line">            s=(PolyNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PolyNode));</span><br><span class="line">            s-&gt;coef=p1-&gt;coef;s-&gt;expn=p1-&gt;expn;s-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">            tc-&gt;next=s;tc=s;</span><br><span class="line">            p1=p1-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p1-&gt;expn&gt;p2-&gt;expn)    <span class="comment">/*将*p2结点复制到*s并链到pc尾*/</span></span><br><span class="line">        &#123;</span><br><span class="line">            s=(PolyNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PolyNode));</span><br><span class="line">            s-&gt;coef=p2-&gt;coef;s-&gt;expn=p2-&gt;expn;s-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">            tc-&gt;next=s;tc=s;</span><br><span class="line">            p2=p2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>   <span class="comment">/*p1-&gt;expn=p2-&gt;expn的情况*/</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (p1-&gt;coef+p2-&gt;coef!=<span class="number">0</span>) <span class="comment">/*序数相加不为0时新建结点*s并链到pc尾*/</span></span><br><span class="line">            &#123;</span><br><span class="line">                s=(PolyNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PolyNode));</span><br><span class="line">                s-&gt;coef=p1-&gt;coef+p2-&gt;coef;s-&gt;expn=p1-&gt;expn;</span><br><span class="line">                s-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">                tc-&gt;next=s;tc=s;</span><br><span class="line">            &#125;</span><br><span class="line">            p1=p1-&gt;next;p2=p2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p1!=<span class="literal">NULL</span>) p=p1;  <span class="comment">/*将尚未扫描完的余下结点复制并链接到pc单链表之后*/</span></span><br><span class="line">    <span class="keyword">else</span> p=p2;</span><br><span class="line">    <span class="keyword">while</span> (p!=<span class="literal">NULL</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        s=(PolyNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PolyNode));</span><br><span class="line">        s-&gt;coef=p-&gt;coef;s-&gt;expn=p-&gt;expn;s-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">        tc-&gt;next=s;tc=s;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    tc-&gt;next=<span class="literal">NULL</span>;        <span class="comment">/*新建单链表最后结点的next域置空*/</span></span><br><span class="line">    <span class="keyword">return</span> pc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PolyNode *L1,*L2,*L3;</span><br><span class="line">    <span class="keyword">float</span> C1[]=&#123;<span class="number">3</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">9</span>&#125;,C2[]=&#123;<span class="number">-9</span>,<span class="number">8</span>,<span class="number">22</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> E1[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">17</span>,<span class="number">8</span>&#125;,E2[]=&#123;<span class="number">8</span>,<span class="number">1</span>,<span class="number">7</span>&#125;;</span><br><span class="line">    InitList(L1);</span><br><span class="line">    InitList(L2);</span><br><span class="line">    InitList(L3);</span><br><span class="line">    CreaPolyList(L1,C1,E1,<span class="number">4</span>);</span><br><span class="line">    CreaPolyList(L2,C2,E2,<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;两多项式相加运算\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;     原多项式A:&quot;</span>);DispList(L1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;     原多项式B:&quot;</span>);DispList(L2);</span><br><span class="line">    SortPloy(L1);</span><br><span class="line">    SortPloy(L2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排序后的多项式A:&quot;</span>);DispList(L1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排序后的多项式B:&quot;</span>);DispList(L2);</span><br><span class="line">    L3=AddPoly(L1,L2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;多项式相加结果:&quot;</span>);DispList(L3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="1-栈的基本概念"><a href="#1-栈的基本概念" class="headerlink" title="1.栈的基本概念"></a>1.栈的基本概念</h3><p><a href="https://baike.baidu.com/item/%E6%A0%88/12808149">栈</a>（stack）又名堆栈，它是一种运算受限的线性表。限定仅在表尾进行插入和删除操作的线性表。这一端被称为栈顶，相对地，把另一端称为栈底。向一个栈插入新元素又称作进栈、入栈或压栈，它是把新元素放到栈顶元素的上面，使之成为新的栈顶元素；从一个栈删除元素又称作出栈或退栈，它是把栈顶元素删除掉，使其相邻的元素成为新的栈顶元素。</p><h4 id="1-1-栈的定义"><a href="#1-1-栈的定义" class="headerlink" title="1.1.栈的定义"></a>1.1.栈的定义</h4><p>栈是一种特殊的线性表，插入和删除操作在表的某一端进行，允许插入和删除操作的一端称为<code>栈顶</code>，另一端称为<code>栈底</code>。</p><p>可以把栈看作一个竖直的桶，每次只能放入一个元素，先放入的元素在下，后放入的元素在上，后放入的元素先出。</p><h4 id="1-2-栈的特征"><a href="#1-2-栈的特征" class="headerlink" title="1.2.栈的特征"></a>1.2.栈的特征</h4><ul><li>后进先出（LIFO）</li></ul><h4 id="1-3-栈的基本运算"><a href="#1-3-栈的基本运算" class="headerlink" title="1.3.栈的基本运算"></a>1.3.栈的基本运算</h4><ul><li>初始化栈</li><li>进栈</li><li>出栈，即返回栈顶元素，并删除当前的栈顶元素</li><li>取栈顶元素</li><li>判断栈空</li></ul><h3 id="2-栈的存储结构"><a href="#2-栈的存储结构" class="headerlink" title="2.栈的存储结构"></a>2.栈的存储结构</h3><p>栈的结构定义主要包含以下属性：</p><ul><li>data: 一维数组，用于保存栈中的元素<ul><li>StackSize：栈的大小，即数组的大小</li><li>ElemType：元素的类型</li></ul></li><li>top: 栈顶的指针</li></ul><h4 id="2-1-顺序存储结构-1"><a href="#2-1-顺序存储结构-1" class="headerlink" title="2.1.顺序存储结构"></a>2.1.顺序存储结构</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> StackSize 100        <span class="comment">/*顺序栈的初始分配空间*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span>    </span><br><span class="line">    ElemType data[StackSize];    <span class="comment">/*保存栈中元素*/</span></span><br><span class="line">    <span class="keyword">int</span> top;                    <span class="comment">/*栈指针*/</span></span><br><span class="line">&#125; SqStack;</span><br></pre></td></tr></table></figure><h4 id="2-2-链式存储结构-1"><a href="#2-2-链式存储结构-1" class="headerlink" title="2.2.链式存储结构"></a>2.2.链式存储结构</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">lsnode</span> </span></span><br><span class="line"><span class="class">&#123;</span>    </span><br><span class="line">    ElemType data;            <span class="comment">/*存储结点数据*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">lsnode</span> *<span class="title">next</span>;</span>    <span class="comment">/*指针域*/</span></span><br><span class="line">&#125; LinkStack;</span><br></pre></td></tr></table></figure><h3 id="3-顺序栈基本运算"><a href="#3-顺序栈基本运算" class="headerlink" title="3.顺序栈基本运算"></a>3.顺序栈基本运算</h3><h4 id="3-1-栈的定义"><a href="#3-1-栈的定义" class="headerlink" title="3.1.栈的定义"></a>3.1.栈的定义</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> StackSize 100        <span class="comment">/*顺序栈的初始分配空间*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span>    </span><br><span class="line">    ElemType data[StackSize];    <span class="comment">/*保存栈中元素*/</span></span><br><span class="line">    <span class="keyword">int</span> top;                    <span class="comment">/*栈指针*/</span></span><br><span class="line">&#125; SqStack;</span><br></pre></td></tr></table></figure><h4 id="3-2-初始化栈"><a href="#3-2-初始化栈" class="headerlink" title="3.2.初始化栈"></a>3.2.初始化栈</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitStack</span><span class="params">(SqStack &amp;st)</span>        <span class="comment">/*st为引用型参数*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    st.top=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-进栈运算"><a href="#3-3-进栈运算" class="headerlink" title="3.3.进栈运算"></a>3.3.进栈运算</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Push</span><span class="params">(SqStack &amp;st,ElemType x)</span>    <span class="comment">/*进栈运算,st为引用型参数*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (st.top==StackSize<span class="number">-1</span>)    <span class="comment">/*栈满*/</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span>                        <span class="comment">/*栈不满*/</span></span><br><span class="line">    &#123;</span><br><span class="line">        st.top++;</span><br><span class="line">        st.data[st.top]=x;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4-出栈运算"><a href="#3-4-出栈运算" class="headerlink" title="3.4.出栈运算"></a>3.4.出栈运算</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Pop</span><span class="params">(SqStack &amp;st,ElemType &amp;x)</span>        <span class="comment">/*出栈运算,st和x为引用型参数*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (st.top==<span class="number">-1</span>)        <span class="comment">/*栈空*/</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span>                <span class="comment">/*栈不空*/</span></span><br><span class="line">    &#123;</span><br><span class="line">        x=st.data[st.top];</span><br><span class="line">        st.top--;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-5-取栈顶元素"><a href="#3-5-取栈顶元素" class="headerlink" title="3.5.取栈顶元素"></a>3.5.取栈顶元素</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetTop</span><span class="params">(SqStack st,ElemType &amp;x)</span>    <span class="comment">/*取栈顶元素,x为引用型参数*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (st.top==<span class="number">-1</span>)        <span class="comment">/*栈空*/</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        x=st.data[st.top];</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-6-判断栈空运算"><a href="#3-6-判断栈空运算" class="headerlink" title="3.6.判断栈空运算"></a>3.6.判断栈空运算</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StackEmpty</span><span class="params">(SqStack st)</span>    <span class="comment">/*判断栈空运算*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (st.top==<span class="number">-1</span>)    <span class="comment">/*栈空*/</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span>            <span class="comment">/*栈不空*/</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-7-main"><a href="#3-7-main" class="headerlink" title="3.7.main"></a>3.7.main</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SqStack st;</span><br><span class="line">    ElemType e;</span><br><span class="line">    InitStack(st);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;栈%s\n&quot;</span>,(StackEmpty(st)==<span class="number">1</span>?<span class="string">&quot;空&quot;</span>:<span class="string">&quot;不空&quot;</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a进栈\n&quot;</span>);Push(st,<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;b进栈\n&quot;</span>);Push(st,<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c进栈\n&quot;</span>);Push(st,<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;d进栈\n&quot;</span>);Push(st,<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;栈%s\n&quot;</span>,(StackEmpty(st)==<span class="number">1</span>?<span class="string">&quot;空&quot;</span>:<span class="string">&quot;不空&quot;</span>));</span><br><span class="line">    GetTop(st,e);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;栈顶元素:%c\n&quot;</span>,e);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;出栈次序:&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (!StackEmpty(st))</span><br><span class="line">    &#123;</span><br><span class="line">        Pop(st,e);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>,e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-链栈基本运算"><a href="#4-链栈基本运算" class="headerlink" title="4.链栈基本运算"></a>4.链栈基本运算</h3><h4 id="4-1-链式栈的定义"><a href="#4-1-链式栈的定义" class="headerlink" title="4.1.链式栈的定义"></a>4.1.链式栈的定义</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">lsnode</span> </span></span><br><span class="line"><span class="class">&#123;</span>    </span><br><span class="line">    ElemType data;            <span class="comment">/*存储结点数据*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">lsnode</span> *<span class="title">next</span>;</span>    <span class="comment">/*指针域*/</span></span><br><span class="line">&#125; LinkStack;</span><br></pre></td></tr></table></figure><h4 id="4-2-初始化栈"><a href="#4-2-初始化栈" class="headerlink" title="4.2.初始化栈"></a>4.2.初始化栈</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitStack</span><span class="params">(LinkStack *&amp;ls)</span>        <span class="comment">/*ls为引用型参数*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ls=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-进栈运算"><a href="#4-3-进栈运算" class="headerlink" title="4.3.进栈运算"></a>4.3.进栈运算</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(LinkStack *&amp;ls,ElemType x)</span>        <span class="comment">/*进栈运算,ls为引用型参数*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkStack *p;</span><br><span class="line">    p=(LinkStack *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkStack));</span><br><span class="line">    p-&gt;data=x;</span><br><span class="line">    p-&gt;next=ls;</span><br><span class="line">    ls=p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-出栈运算"><a href="#4-4-出栈运算" class="headerlink" title="4.4.出栈运算"></a>4.4.出栈运算</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Pop</span><span class="params">(LinkStack *&amp;ls,ElemType &amp;x)</span>        <span class="comment">/*出栈运算,ls为引用型参数*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkStack *p;</span><br><span class="line">    <span class="keyword">if</span> (ls==<span class="literal">NULL</span>)     <span class="comment">/*栈空,下溢出*/</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        p=ls;</span><br><span class="line">        x=p-&gt;data;</span><br><span class="line">        ls=p-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">           <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-5-取栈顶元素运算"><a href="#4-5-取栈顶元素运算" class="headerlink" title="4.5.取栈顶元素运算"></a>4.5.取栈顶元素运算</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetTop</span><span class="params">(LinkStack *ls,ElemType &amp;x)</span>    <span class="comment">/*取栈顶元素运算*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ls==<span class="literal">NULL</span>)     <span class="comment">/*栈空,下溢出*/</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        x=ls-&gt;data;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-6-判断栈空运算"><a href="#4-6-判断栈空运算" class="headerlink" title="4.6.判断栈空运算"></a>4.6.判断栈空运算</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StackEmpty</span><span class="params">(LinkStack *ls)</span>    <span class="comment">/*判断栈空运算*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ls==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-7-main"><a href="#4-7-main" class="headerlink" title="4.7.main"></a>4.7.main</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkStack *ls;</span><br><span class="line">    ElemType e;</span><br><span class="line">    InitStack(ls);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;栈%s\n&quot;</span>,(StackEmpty(ls)==<span class="number">1</span>?<span class="string">&quot;空&quot;</span>:<span class="string">&quot;不空&quot;</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a进栈\n&quot;</span>);Push(ls,<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;b进栈\n&quot;</span>);Push(ls,<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c进栈\n&quot;</span>);Push(ls,<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;d进栈\n&quot;</span>);Push(ls,<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;栈%s\n&quot;</span>,(StackEmpty(ls)==<span class="number">1</span>?<span class="string">&quot;空&quot;</span>:<span class="string">&quot;不空&quot;</span>));</span><br><span class="line">    GetTop(ls,e);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;栈顶元素:%c\n&quot;</span>,e);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;出栈次序:&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (!StackEmpty(ls))</span><br><span class="line">    &#123;</span><br><span class="line">        Pop(ls,e);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>,e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-栈的基本运算-By-Go"><a href="#5-栈的基本运算-By-Go" class="headerlink" title="5.栈的基本运算(By-Go)"></a>5.栈的基本运算(By-Go)</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Package stack creates a ItemStack data structure for the Item type</span></span><br><span class="line"><span class="keyword">package</span> stack</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Item the type of the stack</span></span><br><span class="line"><span class="keyword">type</span> Item <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ItemStack the stack of Items</span></span><br><span class="line"><span class="keyword">type</span> ItemStack <span class="keyword">struct</span> &#123;</span><br><span class="line">    items []Item</span><br><span class="line">    lock  sync.RWMutex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// New creates a new ItemStack</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *ItemStack)</span> <span class="title">New</span><span class="params">()</span> *<span class="title">ItemStack</span></span> &#123;</span><br><span class="line">    s.items = []Item&#123;&#125;</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Push adds an Item to the top of the stack</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *ItemStack)</span> <span class="title">Push</span><span class="params">(t Item)</span></span> &#123;</span><br><span class="line">    s.lock.Lock()</span><br><span class="line">    s.items = <span class="built_in">append</span>(s.items, t)</span><br><span class="line">    s.lock.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pop removes an Item from the top of the stack</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *ItemStack)</span> <span class="title">Pop</span><span class="params">()</span> *<span class="title">Item</span></span> &#123;</span><br><span class="line">    s.lock.Lock()</span><br><span class="line">    item := s.items[<span class="built_in">len</span>(s.items)<span class="number">-1</span>]</span><br><span class="line">    s.items = s.items[<span class="number">0</span> : <span class="built_in">len</span>(s.items)<span class="number">-1</span>]</span><br><span class="line">    s.lock.Unlock()</span><br><span class="line">    <span class="keyword">return</span> &amp;item</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>尼采哲学思想浅析</title>
      <link href="/posts/f1611687.html"/>
      <url>/posts/f1611687.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2021/10/09/38LEJHqb9rSFkUh.jpg"></p><blockquote><p>What does not kill me, makes me stronger.<br>-Friedrich Nietzsche</p></blockquote><h2 id="尼采哲学思想浅析"><a href="#尼采哲学思想浅析" class="headerlink" title="尼采哲学思想浅析"></a>尼采哲学思想浅析</h2><p><a href="https://baike.baidu.com/item/%E5%BC%97%E9%87%8C%E5%BE%B7%E9%87%8C%E5%B8%8C%C2%B7%E5%A8%81%E5%BB%89%C2%B7%E5%B0%BC%E9%87%87/2630781">尼采</a>批判<a href="https://baike.baidu.com/item/%E4%BA%9A%E7%91%9F%C2%B7%E5%8F%94%E6%9C%AC%E5%8D%8E?fromtitle=%E5%8F%94%E6%9C%AC%E5%8D%8E&fromid=224844">叔本华</a>以自我毁灭为终点的哲学，建立高扬生命活力，倡导个体独特性和创造力的酒神精神，权力意志与酒神精神一脉相承，都是批判颓废和虚无主义的利刃。权力意志引出了永恒轮回，为了能够完全满足权力意志的要求，尼采创造了超人的概念。尼采是一个积极反驳颓废消极的旧传统价值的战士，他强烈批判理性主义和基督教精神对人本性的压抑，倡导生命本能的健康发展。</p><h3 id="1-叔本华与尼采"><a href="#1-叔本华与尼采" class="headerlink" title="1.叔本华与尼采"></a>1.叔本华与尼采</h3><p>尼采所处的时代人们高扬理性关注物质生活，认为理性和科学技术能给人带来终极幸福。这种盲目的乐观主义在遇到叔本华悲观主义哲学之后开始瓦解，叔本华将世界本质看做是生命意志，每个个体都被生命意志支配，个体无法发挥自己的能动性，整个生命受伟大的生命意志的控制，于是摆脱生命意志枷锁唯一的出路就是结束生命。叔本华自身的学术观点不够彻底，但是深受叔本华思想影响的中国清代学者王国维就以亲身经历贯彻了叔本华的思想，他自杀了。尼采深受叔本华的影响，其整个哲学思想的基调也是悲观的，但是他称自己的哲学是积极的虚无主义。尼采将虚无主义分为两类，即积极的虚无主义和消极的虚无主义。缥缈消极的虚无主义是现代人在否认一切价值观念之后表现出的一种无所适从和自我沉沦的状态，一切旧传统价值遭到否认之后处于彻底的价值虚空之中，丧失信仰无人管束做什么都可以的失控儿童。而积极的虚无主义则是指在批判一切传统价值之后重新建立一种全新的价值体系，重塑现代人的价值观，在对一切旧价值感到失望之时，身处绝境却不自暴自弃，起身反抗从而克服虚无主义，这种反抗精神在尼采思想中就表现为高扬生命活力的酒神精神和权力意志。其积极的虚无主义使他认识到生命本身的悲剧性质，即能够自由运用理性思索整个宇宙的人生命却是有限的，有限的生命和无限的宇宙之间的张力使人必须承认自身的悲剧性。但同时，在认识到个人是被伟大的生命意志所控制之后，应该勇敢地面对悲剧的人生，用顽强的生命力来战胜掌控一切的生命意志，这也就是尼采与叔本华最大的区别所在。</p><h3 id="2-尼采对理性的批判"><a href="#2-尼采对理性的批判" class="headerlink" title="2.尼采对理性的批判"></a>2.尼采对理性的批判</h3><p>尼采对理性批判的靶子首先对准的是<a href="https://baike.baidu.com/item/%E8%8B%8F%E6%A0%BC%E6%8B%89%E5%BA%95/12690">苏格拉底</a>和<a href="https://baike.baidu.com/item/%E6%9F%8F%E6%8B%89%E5%9B%BE/85471">柏拉图</a>。他强烈地批判苏格拉底以来欧洲历史上的理性主义。苏格拉底提出“知识即美德，无知即罪恶”这句话成为后世理性主义的开端，这里知识就是理性的代表，苏格拉底认为只有以理性的态度对外部世界和内在心灵进行分析、归纳和总结，最终才能得出对人类有用的知识。而缺乏理性能力的人则是个缺乏善的人，也就是罪恶的人。在此，理性与本能被对立起来，而且从此以后奠定了理性相对本能具有绝对优势的地位。而尼采认为理性破坏了人的生命力基础，削弱了人的本能，因此要解放人的生命力就必须反对理性抬高意志呼唤本能。柏拉图认为，现实世界并非永远存在的，而是由一个神或造物主以善的理念为指导，以理念世界为模型，将各种理念模式加诸原始混沌的“物质”文明而创造出来的。因此现实世界都是不完善、不完美的，它之所以存在完全是由于对理念世界和善的世界的分有和模仿，并不是真实的世界。在此种思想的基础之上，他对雅典的民主和政治产生了很大反感，于是他按照各种善的理念设计了一套理想的政治制度，企图建立一个理想的国家，即理想国，在理想国中由最具有知识的哲学家来当国王。虽然柏拉图“哲学王”的理想在今天已被人当作不切实际的乌托邦，而且甚至他自己也不相信理想国能够真的实现，不过柏拉图对理性的信任程度由此可见一斑。在尼采看来，柏拉图理想国以及理念世界的思想都是否定现实世界的态度，这种态度应该遭到坚决反对。尼采将这种把希望寄托于彼岸世界的悲观态度归结于理性的罪过。由于理性对感官的绝对地位，人所感触到的一切都不值得相信，感觉世界背后必然存在一个不变不动的世界，是理性构造出这个世界。但这个世界对现实人生起不到任何积极或指导作用。漫长而黑暗的中世纪上演的种种悲剧就是由于人们看到水深火热的现世，受到教会精神控制的广大人民只好将目光投向彼岸世界，对此岸世界采取消极的态度，所有希望寄托于来生和天国，这种推到极致的消极的基督教精神正是对理性设计的彼岸世界过于信任的结果。尼采对理性的批判使得他的整个哲学导向非理性的生命哲学。人们一味向往美好的彼岸世界的生活，于是失去了对现世生活的激情和信心，尼采生命哲学意欲重新激发人们对于生活的热情，人生的唯一意义就是生命，生命应该而且必须取代理性成为人生的目的而不是达到其他目的的手段，颓废的现代精神应该被旺盛的生命力代替。只有高昂的意志和健康的体魄才能战胜人生的悲剧性。因此尼采用酒神精神和权力意志作为自己生存哲学的核心。</p><h3 id="3-酒神精神及权力意志"><a href="#3-酒神精神及权力意志" class="headerlink" title="3.酒神精神及权力意志"></a>3.酒神精神及权力意志</h3><p>权力意志脱胎于<a href="https://baike.baidu.com/item/%E9%85%92%E7%A5%9E%E7%B2%BE%E7%A5%9E">酒神精神</a>，酒神精神指的是沉迷于绘画和音乐中迷狂的状态，这种状态中包含了一种充沛的力量，该力量产生自对艺术的陶醉和悲剧中的自我肯定。尼采的酒神精神具有本体和终极的意义。酒神精神来源于古希腊，丰收之时农民们尽情狂欢，四处游荡，不顾一切道德规范和神圣法则，放纵情欲，恢复人的自然本性，释放人的本能，与宇宙和大自然融为一体。如此摆脱理性和道德的束缚，打破一切法则的精神贯穿了尼采的全部思想。权力意志与酒神精神具有高度的一致性，酒神精神要求人们尽情释放自己的本能与大自然融为一体，权力意志则被尼采认为是万物的本源，不论是人类还是其他的自然事物，权力意志都是本质。因此二者实际上是一体的。权力意志目的在于肯定人生，以强大的生命力来克服一切悲剧。生命的真谛在于从高于自身处吸取一种力量，从而让自身变强大，因此所谓强者不是只追求生命，而是要使自己变得更加强大，不只是活着而且要认真的活着，这种向上的力量使人脱离常人变得更加强大有力，生命力也会永不枯竭充沛丰盈。权力意志的本体论意义在于，意志对外部事物进行支配的力量来源不仅仅在只于外部而且还在自身，因此生命自身会变得越来越强大，生命力消退的论断不攻自破。但同时尼采也认为权力意志意味着剥削，战胜一切比自己更为强大的东西，使别人为自己服役，软弱代表着没有存在的价值，理应被征服和奴役。不能够按照自己的意志行事的人，失去自由的意志的人就理应被奴役。他声称“凡有生命的地方都有权力意志”，“权力意志是完美所揭示的最终事实”上，“权力意志是感情的始基，一切其他感情仅仅是它的扩展”，“生命本身本质上就是掠夺、伤害，对陌生者和弱者的压迫、剥削、严酷，把自己的意志强加于人”。他认为对于不属于自己的东西的欲望和渴望占有一切的权力构成了人生本质。</p><p>伟大的权力意志，不断创造出新的生命，同时也不断毁灭年老的生命，生成和毁灭永恒存在，永不疲倦永不停止。肯定并珍惜每一个独立的意志，抓住每一次能够实现自己的自由意志的机会。独立和自由就是强大，服从和依赖就是软弱，生命的意义不在于活得长久而在于活得强大有力，在于其来源的高贵性和神圣性，以及对平庸的鄙夷。</p><h3 id="4-永恒轮回"><a href="#4-永恒轮回" class="headerlink" title="4.永恒轮回"></a>4.永恒轮回</h3><p>尼采为了打破陈旧的价值观念而提出高扬生命意志的权力意志精神，但他自己追根究底仍旧是一个悲观主义者。他依旧承认生命的残忍、虚伪、诱惑和无意义，即使拥有强大的生命力，短暂的人生也依旧有终结的一天。于是尼采提出了<a href="https://zh.wikipedia.org/wiki/%E6%B0%B8%E6%81%92%E8%BD%AE%E5%9B%9E">永恒轮回</a>的学说，试图用永恒轮回的权力意志将短暂的生命与永恒的灵魂联系起来。尼采并不是第一位提出永恒轮回这个命题的哲学家，古希腊的“晦涩哲人”赫拉克利特就说过，“世界是一团永不熄灭的活火，在一定的分寸上燃烧，在一定的分寸上熄灭。”在这里永恒的活火就是循环往复的生命力的象征，分寸即是道。赫拉克利特早早的就看破了生命的意义，即道的精神：生生不息。但是尼采并不是简单在重复过去陈旧的思想，对他思想的误读使人们认为他是一个机械的循环论者，但事实上他的永恒轮回思想包含着新的内涵。永恒轮回思想的产生是为了克服虚无主义，但是否正因为该思想的出现，人陷入了更深的虚无主义呢？在他看来，人生的每一次短暂或漫长的经历在过去和未来都曾经千百次地发生过，没有新的事件发生，有的只是重复。尼采试图让生命的循环消减短暂生命的悲剧性，但是一次次没有新鲜事物产生的人生难道不会让人感觉无聊和厌烦吗？既然人生的轨迹早已被确定下来，那么奋斗与否，颓废与否还重要吗？尼采本想借永恒轮回来逃避人生的虚无性，但却陷入了更深的虚无。他只能肯定一切虚无，努力战胜一切软弱颓废的精神，努力热爱无意义的人生，在巨大的悲剧中加入一点乐观的色彩。尼采的权力意志和酒神精神本来是为了超越一切虚无和软弱，但永恒轮回却使这种超越变得苍白无力，永恒轮回毁灭了超越的机会，禁锢了生命的所有可能和希望。因此尼采能做的只有承认悲剧，面对悲剧，热爱悲剧，尽管无法战胜它。</p><h3 id="5-超人哲学"><a href="#5-超人哲学" class="headerlink" title="5.超人哲学"></a>5.超人哲学</h3><p><a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E4%BA%BA%E8%AA%AA">超人</a>是尼采的梦想，是尼采为克服虚无主义设立的目标，在整个社会普世价值缺失的时代，尼采不仅要解构形而上学，而且以重建形而上学为己任。他的酒神精神和权力意志都具有形而上的意义，超人就代表建立在酒神精神和权力意志基础上的尼采的价值观。尼采并不相信存在一种适用于整个世界的普遍的价值，他认为价值是由意志确立起来的。每个平凡人都应该依照自己的自由意志确立自己的价值，并且能够按照这种价值去行动。这就是尼采理想中超人应该具备的能力，可惜的是这个要求没有人能够达到。超人的形象仅存在于理论中，它并不是一种新的族群或人向更高级别进化的结果，而是尼采理想中的人。在尼采看来超人的形象恰好在人的内部，潜在于每个人心中。每个常人都是未经雕琢的大理石，借用尼采的手对其进行雕琢就可以使得超人的形象显现出来。生命的超越性是本自具足的，只不过这种超越性在颓废和得过且过不思进取的现代人身上已经看不到了，因此尼采只能将超越颓废人生的希望寄托在超人身上。超人不被陈旧的道德体系束缚，为自己立法，具有旺盛的好奇心、强大的创造力和独特的个性，勇于为自己设立远大的目标并积极实现。但超人本身并不是神，尼采也反对将超人神化，反对英雄主义。因为每一个英雄的存在都意味着他周围聚集着一群愚昧无知盲目崇拜的群氓。尼采将这些与超人相反的群氓称做“末人”，“末人”的特征几乎遍布在每一个现代人身上，他们胆小、猥琐、平庸而且自甘堕落，但他们又自以为是洋洋得意。尼采憎恨“末人”，他试图通过建立超人的形象来起到价值导向的作用，引导末人朝向超人的方向发展，唤醒末人心中具有超越性和奋进心的一面。不过，无论末人是否能够达到超人，尼采的愿景始终激励着有志奋进的人们。 尼采既认为通过人的自我超越能够达到超人的目标，又否认现在、过去、未来会出现超人，超人始终是一个不可能达到的理想。而超人最大的现实意义就是人们越来越多地开始谈论人的超越性，他敦促着人不断超越自身达到更加完善的形象。</p><h2 id="尼采哲学意义及影响"><a href="#尼采哲学意义及影响" class="headerlink" title="尼采哲学意义及影响"></a>尼采哲学意义及影响</h2><p>尼采创立了一种以人为出发点和归宿点的生命哲学，他用实践权力意志的超人肯定和超越“悲剧人生”，引导和启发现代人与拒斥感性、惧怕变化无常生命的独断理性主义、颓废基督教信仰、悲观主义不断抗争，用昂扬生命斗志去塑造完整、幸福的意义人生。</p><p>弗里德里希・威廉・尼采是一位带有转折色彩的生命哲学家，其权力意志思想和超人哲学影响深远，而又备受争议。他确立“悲剧人生”生存意义范式，主张新人生观，强调非理性因素，抨击传统理性主义、基督教道德等，试图为丧失精神家园的人们奠定一个超越“悲剧人生”，追求和创造幸福生活的价值基础。</p><h3 id="1-对于人生的肯定"><a href="#1-对于人生的肯定" class="headerlink" title="1.对于人生的肯定"></a>1.对于人生的肯定</h3><p>叔本华开启了关切人生的生命哲学大门。他断言，世界是意志和表象，意志属于操控人生的意欲力量，有限生命经常因无限意欲无法满足而痛苦不堪，而稍纵即逝的意欲暂时实现又让生命倍添无聊，“所以人生是在痛苦和无聊之间像钟摆一样的来回摆动着”。他认为只有消灭意志和生命，才能从无尽的痛苦和无聊中获得解脱。叔本华悲观主义人生观吸引了尼采的注意力。尼采也认同人生易逝多变、痛苦无奈，但他深信人生的意义来源于肯定而不是否定生命意志，痛苦是幸福人生的兴奋剂。</p><p>尼采借助希腊文明的“悲剧精神”，扬弃和深化叔本华悲观主义。他认为古希腊悲剧文化是唯一能表达真正生命意志的审美文化。尼采强调，悲剧不是悲观主义人生哲学的戏剧表现，而是人艺术地审视人生的途径。它体现了生命本能意志魅力，是日神阿波罗和酒神狄奥尼索斯相结合的产物。它内蕴的“悲剧精神”，真切揭示人生痛苦的悲剧本性，展现人战胜痛苦的悲剧态度和超越历程，充分张扬人性的美和尊严。日神是理性式自我肯定的代表，他在梦境中追求美好人生，不惧怕任何悲苦；酒神是非理性式自我否定的写照，他通过醉态尽情释放受压抑的自然本性和生命意志，消融所有不幸，征服无法抗拒的悲剧命运。尼采对酒神推崇备至，他说“我不知道还有比这希腊的酒神象征更高的象征意义。在其中可以宗教式地感觉到最深邃的生命本能，求生命之未来的本能，求生命之永恒的本能。”酒神虽然在尘世遭遇了众多苦难，但他喜爱生命，用健全生命意志在艰难、禁忌和束缚中不断提升生命价值，构筑自己的幸福。</p><p>尼采肯定悲剧人生，不仅是对叔本华悲观主义和古希腊悲剧文化研究的结果，也是对自身生命深思的结果。尼采本身就是一位典型的坚韧奋发的悲剧式人物。他年幼痛失亲人，青年时期经受失败爱情和背叛友谊的打击，终生饱受病痛的凶猛折磨和孤独的无情缠绕，但他却能以卓越精神意志撑持自己，一直不屈不挠地发挥旺盛创作欲。正如他本人所说，“对生命的肯定，甚至对它最奇妙最困难问题的肯定：在其致力于追求最高形态的过程中，对其生命力之无穷无尽而感到欢欣的生命意志――这就是我说的狄奥尼索斯情态，这就是我所指的达到悲剧诗人心理状态的桥梁……在这个意义上说，我有理由把自己当做第一位悲剧哲学家――也就是说，与悲观主义哲学家完全相反的哲学家。”</p><p>尼采认为，面对神秘莫测的大自然、无法摆脱的灾难、与生俱来的死亡惶恐，渺小个体必然遭遇悲剧性命运，但这种命运不是外在于生命的，而是生命的内在部分，自决的生命可以谱写出坚不可摧毁的悲剧人生乐章。肯定生命意味着欢迎快乐，以及毫无保留地接纳悲苦忧伤本身。每个人都用赞赏的态度“承认生命的最恐怖和最可疑的特性”，在任何危险和毁灭中敢于承担，凸显强劲生命力量的丰富活力和个性超越，体验生命的骄傲、绵延不绝。</p><h3 id="2-对于人生的超越"><a href="#2-对于人生的超越" class="headerlink" title="2.对于人生的超越"></a>2.对于人生的超越</h3><p>尼采肯定悲剧人生的目的在于更好地超越，肯定给超越悲剧人生提供了磨炼和提升的养分。他宣布“上帝死了”，勇敢地用超人和权力意志，直面弥达斯国王传说中的人类绝望之境：人最好最妙的东西是不要降生，次好的东西是立刻死亡。攻破这种绝望堡垒的最好武器是不断创造和超越，充满权力意志的超人像古希腊悲剧英雄那样，在曲折多难又短暂可悲的人世间驰骋，既享受今生肉体的欢乐，又追求凤凰涅的永垂不朽，开拓波澜壮阔的生命意义和永恒幸福。</p><p>尼采塑造超人形象，不是树立替代上帝的新偶像。超人是反基督教、反宿命论、反旧世界的非理性主义者、批判主义者、创造主义者。尼采指出，超人诞生，经历了“精神三变”：由坚忍负重的骆驼，变成积极攫取自由的狮子，最后成为永恒更新的赤子，获得了赫拉克利特辩证法般的永恒崇高。超人与缺乏个性、创造性的碌碌无为的庸众不同，它是大地的意义，有着更强壮、更敏锐、更快乐的超凡胆量和健康。狄奥尼索斯、查拉斯图特拉都是尼采心目中的超人代表。超人这一理想人格要表达的不是具体的个人，而是一种人生态度和处世精神，他立足于现实，热爱生活，主宰自己命运，发挥权力意志，自我创造。超人的诞生，是给世人演绎生命的美丽可贵。生命既然存在着，就得赋予它某种意义和幸福，这种意义不是灭绝其身，而在于焕发生命激情和冲力，与不幸命运抗争，超越生活的坎坷曲折，完成其灵魂不朽的悲剧创作。超人健康强劲有力，坚忍不拔，自主创造和超越，不断升华生命，是因为“超人不是那种超级人，超人不是人，不是个体，而是一种活动的名称。这种活动有着超越出去和回归自我的一般性结构。”他的超越行动的动力因来自其固有的权力意志。所谓权力意志，“不是政治意义上的政治暴力和权势，而是文化意义上体现在超人身上的生命力、创造力、支配力。”</p><p>第一，权力意志精神是一种旺盛的生命本能。生命建立在肉体基础上，“信仰肉体比信仰精神具有根本意义”，“要以肉体为准绳”。灵魂不是生命的主宰者，它只是肉体的一部分。丰富完整的生命包括思想、欲望，肉体的冲动、激情不是罪恶，而是独特的创造性人生的最宝贵财富。尼采极力反对理性至上原则，猛烈抨击宿命论和基督教给人生进程涂上的浓烈悲观色彩。他用超人的抗争人生，去反驳基督教“蔑视生命”、“侮辱肉体”。超人具有来源于生命冲动的巨大权力意志，这属于人的情感意志和心理本能活动，与理性主义相对，绝不屈从理性安排。凡有生命的地方，都要通过权力意志表现出生命的存在和力量。他认为苏格拉底以来的理性主义造就了麻木不仁的人生看客和过客，他们的本能欲望和权力意志处处受怜悯、同情的奴隶道德压抑。而权力意志是人的生命本质，它使人成为自己和世界的主人，不受外来的、凌驾于人之上的非人力量支配。在权力意志的推动之，人不仅是单纯地求生存，而是追求生命意志带来的快感和幸福价值，他总能深信“这曾是人生？好罢，再来一次！”健全的生命本能渴望最大限度的权力感，敢于承受命运，进而成为自身的命运，通过不断表现自我、释放生存激情、超越自我的过程，充分展露生命本质力量，以及五彩缤纷的人生发展前景。</p><p>第二，权力意志精神是不屈不挠的生命超越。超人的权力意志是一种生命意志，更是一种超越生命的力量。尼采强调人生是一个不断创造、超越的过程。他在《查拉斯图特拉如是说》的序言篇写道：“我教你们什么是超人，人类是应当被超越的。你们曾作怎样的努力去超越他呢？直到现在，一切生物都创造了高出于自己的种类，难道你们愿意做这大潮流的回浪，难道你们愿意返于兽类，不肯超越人类吗？”“人类之伟大之处，正在于它是一座桥梁而不是一个目的，人类之可爱之处，正在于它是一个过程与一个没落。”在尼采看来，人生是一座充满荆棘，持续向前发展，不断超越过去，通向未来的桥梁。人可以通过创造性活动，实现自我肯定和超越。他指出，传统理性主义和基督教是摧残生命的危险力量，前者使人缺乏超越热情，后者更是损害和消融了人的创造力。超人是具有创造性的自由人，在任何情况下都有确立或重新确立自己目的和行动的自由。他追求的不仅是生命本身，更有超越生命之上的意义。他要发挥生命的内在力量，把意志力和行动力输入世界，创造一个属人的价值体系，以显示生命存在的价值和幸福。</p><h3 id="3-对于人生的启示"><a href="#3-对于人生的启示" class="headerlink" title="3.对于人生的启示"></a>3.对于人生的启示</h3><p>20世纪初，尼采的权力意志思想在中国产生了共鸣。它包含的刚毅进取，积极创造的精神鼓舞着人们不畏艰险和侵略压迫，敢于打破封建传统，争取民族独立和解放。20世纪80年代，尼采悲剧人生倡导个人奋斗、独立创新和超越自我的精神又在国内产生了积极影响。它鼓励人们奋发图强，敢闯敢做，尊重和善待生命，拼搏和享受人生。今天，现代化事业使物质生活水平不断提高，人们憧憬幸福人生的实现，却发现幸福与财富增加没有必然的正相关联系。低层次物质性需要的争取和满足容易使幸福产生边际效用递减效应，为了获得一种持续和递增的幸福，人们需要超人那样的创造、超越意识和毅力，把内在权力意志投入实现和超越自我中。</p><p>其次，悲剧人生理论的乐观主义人生观视痛苦、灾难为生命意义和幸福的重要内容。人类中心主义、享乐主义、物欲主义风靡全球，孕育了自私自利的“消费人”。人们习惯舒缓、享受，又孤独、脆弱，容易自暴自弃，甚至草率结束生命。当恐惧、无望、疾病、痛苦、死亡来临时，人们没有控诉、拒绝或抗争，只有哀叹或默默忍受或匆匆离开尘世。而超人面对命运的捉弄时，也无奈、惶惑不解，但并没失去其抗争力和创造力，他敢于接受命运挑战，做生命强者。悲剧人生把冒险和犯难作为健康人生和快乐生活的最大享受，幸福人生不是回避痛苦，而是需要痛苦的历练。尼采宣称，“我是按照意志对反抗、痛苦和折磨的忍受程度来评价意志力的；我不把生命的恶劣和痛苦的特征作为谴责生命的借口，而是希望生命有一天会变得比过去更加恶劣和痛苦…”。</p><p>人生许多固有的苦难可通过抗争、超越来克服，即使抗争失败，也还可以引领生命进入另一种重建人格和深层生活方式的可能。没有抗争和超越的生和死都缺乏幸福的内容和意义。人生存着绝不是人活着的充足理由，痛苦和死亡也绝不是对生活的否定。面对人生的一切不幸和种种限制，以及非人格化的工业社会导致的生命异化，人们要有奋起自救的勇气，在早已设定起点和终点生命之线中，不是延长这根生命线，而是不断去抗争和超越，让它变得更宽广、更有色彩和更幸福。</p><h3 id="4-对于世界的影响"><a href="#4-对于世界的影响" class="headerlink" title="4.对于世界的影响"></a>4.对于世界的影响</h3><p>尼采的影响是多方面的，特别在哲学和文学的领域里。现代西方哲学主流派别之一的存在主义，便与尼采思想有密切的渊源。考夫曼说：在存在主义的演进过程中，尼采占着中心的席位：如果没有尼采，那么雅斯培、海德格和沙特是不可思议的，并且，卡缪《薛西弗斯的神话》的结论，听来也像是尼采遥远的回音。卡缪也曾经详细地写过尼采。在沙特的主要哲学著作《存在与空无》中，尼采是第一个被提到的名字。雅斯培撰写过两大册有关他的书籍，且在其他的几本著作中，也详细讨论过；而海德格，在他后期的作品中，比雅斯培更为重视尼采。”是的，存在主义哲学影响力最大的这几个人之中，海德格写过四本论述尼采的著作，而沙特虽然没有发表过有关尼采的专着，但他哲学的基础，却始于尼采宣称的“上帝已死”的命题。沙特在论人文主义的演讲中，明确地表示：“存在主义不是别的，只是一种企图从一种前后一致的无神论的观点去获得所有结果的看法。”沙特从无神论中所获得的最重要的结论便是：如果没有上帝，就没有任何普遍必然的道德律和绝对确定价值观念，事实上，这就是尼采的声音。</p><p>尽管现代的存在主义，一方面是以基于异常的宗教体验而明确意识到自己之“存在”的巴斯噶或齐克果为其思想源流，但却产生出另一种倾向，即逐渐远离了巴斯噶或齐克果所指向的目标——与基督在人格上的交会，而与反基督的尼采发生了共鸣，从而探索无神性的深度。在无神论方面，尼采宣扬“上帝已死”，否定传统以上帝为创造泉源及准则的价值观，建立以人为中心的价值观，这对西方思想界引起了很大的冲击。尼采推崇希腊悲剧人生观，贬抑基督教之奴隶道德观，进而对西方传统文化进行“一切价值的转换”，这些论题对当代哲学与文学都有很大的启发，对于存在主义影响尤大。</p><p>再者，纵观尼采的生命哲学，他在西方崇尚“超越世界”的玄学传统的主流思想中，是独树一帜的。其发布“上帝已死”的讯息，宣称对传统文化（基督教文化）进行“一切价值重估”，以及对柏拉图以来二元论世界观的否定，并指责传统哲学家注入太多神学的血液，这在西方文化史上，具有深刻的意义。尼采诚然是个“精神界之战士”（借用鲁迅的话）。他的作品似乎预告资本主义种种恶质化的弊害：拜金主义、军国主义、以及现代化生活中的庸俗主义，即使在现在读来，仍是如此动人心弦。他那浪漫主义代表作《查拉图斯特拉如是说》洋溢着热肠孤愤、发扬蹈历之激情，带给人无比的共鸣与启发，的确是“给予人类一项伟大的赠礼。</p><p>尼采是位举世称着的反传统主义者，但他对于文化传统，并非简单化的全盘否定。他强烈的批判基督教文化而极力推崇古希腊的悲剧文化，并从悲剧文化的戴欧尼索士因素中发展出他的创造力的意志哲学。尼采对于西方传统价值的反思、对现在庸俗文化的反省，以及从古典文化中吸取创作的动力与泉源。尼采激烈的怀疑主义使他对基督教的一些基本教义发生了怀疑。在《人性的、太人性的》一书中表现了下列主要观点。他认为世界上不存在绝对的价值，没有超然的真理标准与圣戒；超人的本性之间没有绝对的对立。善与恶都是在人类出现后才存在的，并且在相互的对立依存中发展。</p><p>以上观点源于互联网收集，略带个人主观色彩，可作为认知理解的一个参考方向。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基于WSL搭建Hadoop伪分布式</title>
      <link href="/posts/4a3195fd.html"/>
      <url>/posts/4a3195fd.html</url>
      
        <content type="html"><![CDATA[<h2 id="WSL使用指南"><a href="#WSL使用指南" class="headerlink" title="WSL使用指南"></a>WSL使用指南</h2><h3 id="1-开启WSL"><a href="#1-开启WSL" class="headerlink" title="1.开启WSL"></a>1.开启WSL</h3><p>开启WSL第一步是 <code>启动Windows Subsystem for Linux功能</code>，有两种方法实现。</p><h4 id="1-1-通过命令行"><a href="#1-1-通过命令行" class="headerlink" title="1.1.通过命令行"></a>1.1.通过命令行</h4><p>以 <code>管理员</code>身份运行 <code>PowerShell</code>。右键单击屏幕左下角 <code>“开始”</code>菜单，找到“Windows PowerShell(管理员)”并运行。</p><p>执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux</span><br></pre></td></tr></table></figure><p>安装完成后重启即可</p><h4 id="1-2-通过控制面板"><a href="#1-2-通过控制面板" class="headerlink" title="1.2.通过控制面板"></a>1.2.通过控制面板</h4><p>打开控制面板——“程序”——“启用或关闭Windows功能”——勾选“适用于Linux的Windows子系统”——“确定”。</p><p>点击确定后重启即可</p><p><img src="https://i.loli.net/2021/10/10/vVYbjdyt8Mnlk1C.jpg"></p><h3 id="2-安装LINUX子系统"><a href="#2-安装LINUX子系统" class="headerlink" title="2.安装LINUX子系统"></a>2.安装LINUX子系统</h3><p>推荐打开微软商店搜索”LINUX”，点击安装Ubuntu</p><p><img src="https://i.loli.net/2021/10/10/8HdEDyAp6MsSfZR.jpg"></p><ul><li><p>可安装多种Linux发行版，不冲突。</p></li><li><p>安装完成后设置用户名和输入密码（两次）即可</p></li></ul><h3 id="3-启动WSL"><a href="#3-启动WSL" class="headerlink" title="3.启动WSL"></a>3.启动WSL</h3><ol><li>直接从开始菜单点击图标运行</li><li>启动CMD，输入<code>bash</code>即可运行</li></ol><h3 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4.注意事项"></a>4.注意事项</h3><h4 id="4-1-端口冲突（备用）"><a href="#4-1-端口冲突（备用）" class="headerlink" title="4.1.端口冲突（备用）"></a>4.1.端口冲突（备用）</h4><p>WSL和Win10共享同一套端口，如果出现两者监听同一个端口的情况，Windows主系统的程序拥有更高的优先级。可以考虑修改WSL中SSH的监听端口。</p><p>修改/etc/ssh/sshd_config配置中相应条目如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Port 2222   # 将22改为2222</span><br></pre></td></tr></table></figure><p>重启sshd服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service ssh restart</span><br></pre></td></tr></table></figure><h4 id="4-2-文件系统"><a href="#4-2-文件系统" class="headerlink" title="4.2.文件系统"></a>4.2.文件系统</h4><p>WSL和Windows主系统之间的文件系统可以互相访问</p><p>Linux发行版的数据文件夹在 <code>C:\Users\&#123;你的用户名&#125;\AppData\Local\Packages\&#123;Linux发行版包名&#125;\LocalState\rootfs</code>路径内，<code>rootfs</code>文件夹为WSL的根目录。</p><p>也可直接映射在此电脑中：</p><ol><li>在win10的资源管理器内输入<code>\\wsl$</code></li><li>右键映射为网络驱动器即可在此电脑中看到</li></ol><p><strong>注意：在Windows下对WSL文件修改可能会造成权限错误</strong></p><h3 id="5-尾巴"><a href="#5-尾巴" class="headerlink" title="5.尾巴"></a>5.尾巴</h3><p>更多信息可参阅微软官方文档</p><ul><li><a href="https://docs.microsoft.com/en-us/windows/wsl/install">Install WSL | Microsoft Docs</a></li></ul><hr><h2 id="Hadoop伪分布式配置"><a href="#Hadoop伪分布式配置" class="headerlink" title="Hadoop伪分布式配置"></a>Hadoop伪分布式配置</h2><h3 id="1-JDK配置"><a href="#1-JDK配置" class="headerlink" title="1.JDK配置"></a>1.JDK配置</h3><p>进入<a href="https://www.oracle.com/java/technologies/downloads/#java8">Java Downloads | Oracle</a>下载页面。（建议使用JDK1.8）</p><p>根据Linux系统的位数选择要下载的压缩包。</p><p>执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getconf LONG_BIT</span><br></pre></td></tr></table></figure><p>如果显示32，则是23位的Linux系统，如果显示64，则是64位的Linux系统。这里是64位的，所以下载<strong>Linux x64</strong></p><p>下载需要注册Oracle的账号，注册邮箱推荐<a href="https://mail.163.com/">网易邮箱</a>。</p><p><strong>注：JDK8或者JDK1.8是由于自从JDK1.5/JDK5命名方式改变后遗留的新旧命令方式问题。所以JDK8和JDK1.8等价。</strong></p><h4 id="1-1-解压安装"><a href="#1-1-解压安装" class="headerlink" title="1.1.解压安装"></a>1.1.解压安装</h4><ol><li><p>创建安装目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/local/java/</span><br></pre></td></tr></table></figure></li><li><p>将压缩包直接移动到该目录下</p></li><li><p>解压缩到安装目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -zxvf jdk-8u231-linux-x64.tar.gz -C /usr/local/java/ #注意下载的jdk版本</span><br></pre></td></tr></table></figure></li><li><p>解压缩以后，进入/usr/local/java/目录后，你会发现多一个目录，它就是JDK所在目录。JDK版本不同，这个目录名有所不同，这里是<strong>jdk1.8.0_231</strong>，那么完整路径就是**/usr/local/java/jdk1.8.0_231**，记住这个路径，下面会用到。</p></li></ol><h4 id="1-2-设置环境变量"><a href="#1-2-设置环境变量" class="headerlink" title="1.2.设置环境变量"></a>1.2.设置环境变量</h4><ol><li><p>编辑变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim ~/.profile</span><br></pre></td></tr></table></figure></li><li><p>编辑模式下输入配置的环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">set</span> java1.8</span></span><br><span class="line">    export JAVA_HOME=/usr/local/java/jdk1.8.0_231</span><br><span class="line">    export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class="line">    export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib</span><br><span class="line">    export PATH=.:$&#123;JAVA_HOME&#125;/bin:$PATH</span><br></pre></td></tr></table></figure></li><li><p>使环境变量生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.profile</span><br></pre></td></tr></table></figure></li><li><p>查看Java版本信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure></li><li><p>得到输出结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java version &quot;1.8.0_231&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_231-b12)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.231-b12, mixed mode)</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-SSH配置"><a href="#2-SSH配置" class="headerlink" title="2.SSH配置"></a>2.SSH配置</h3><ol><li><p>Ubuntu已经自带了SSH client，还需要安装<strong>SSH server</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure></li><li><p>手动启动<strong>sshd</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service ssh restart</span><br></pre></td></tr></table></figure></li><li><p>接下来进入ssh配置文件并修改一些设置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure></li><li><p>允许root用户以任何认证方式登录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ListenAddress 0.0.0.0</span><br><span class="line">PermitRootLogin yes</span><br></pre></td></tr></table></figure></li><li><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh localhost</span><br></pre></td></tr></table></figure></li><li><p>启动后，可以通过如下命令查看服务是否正确启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -e | grep ssh</span><br></pre></td></tr></table></figure></li><li><p>输出以下结果说明ssh启动成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">286 ? 00:00:00 sshd  </span><br><span class="line">699 tty1 00:00:00 ssh  </span><br><span class="line">700 ? 00:00:00 sshd  </span><br><span class="line">768 ? 00:00:00 sshd</span><br></pre></td></tr></table></figure></li></ol><h4 id="2-1-ssh-localhost报错处理"><a href="#2-1-ssh-localhost报错处理" class="headerlink" title="2.1.ssh localhost报错处理"></a>2.1.ssh localhost报错处理</h4><p>如果遇到诸如<code>ssh: connect to host localhost port 22: Connection refused</code>之类的错误，请运行以下命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ssh</span><br></pre></td></tr></table></figure><p>安装成功后重新启动ssh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service ssh restart</span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh localhost</span><br></pre></td></tr></table></figure><p>连接成功则输出系统信息</p><h3 id="3-Hadoop配置"><a href="#3-Hadoop配置" class="headerlink" title="3.Hadoop配置"></a>3.Hadoop配置</h3><h4 id="3-1-下载Hadoop"><a href="#3-1-下载Hadoop" class="headerlink" title="3.1.下载Hadoop"></a>3.1.下载Hadoop</h4><ol><li><p>从<a href="https://hadoop.apache.org/releases.html">Apache Hadoop</a>下载hadoop-3.2.2.tar.gz直接拖拽到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\用户名\AppData\Local\Packages\CanonicalGroupLimited.Ubuntu18.04onWindows_79rhkp1fndgsc\LocalState\rootfs\usr\local</span><br></pre></td></tr></table></figure></li><li><p>重启电脑后在WSL终端<code>/user/local/</code>下执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -xvf hadoop-3.2.2.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>查看Hadoop是否安装成功，在<code>/usr/local/hadoop-3.2.2</code>目录下执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/hadoop version</span><br></pre></td></tr></table></figure></li><li><p>得到输出结果<br><img src="https://i.loli.net/2021/10/11/l2BLUmjKJPOZWsg.png"></p></li><li><p>给与读写权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod -R 777 /usr/local/hadoop-3.2.2</span><br></pre></td></tr></table></figure></li></ol><h4 id="3-2-配置伪分布式环境"><a href="#3-2-配置伪分布式环境" class="headerlink" title="3.2.配置伪分布式环境"></a>3.2.配置伪分布式环境</h4><p>配置Hadoop伪分布式环境需要修改<code>/usr/local/hadoop-3.2.2/etc/hadoop/</code>文件夹下的<code>hadoop-env.sh</code>、<code>core-site.xml</code>、<code>hdfs-site.xml</code> 、<code>maprep-site.xml</code>、<code>yarn-site.xml</code></p><ol><li>修改<code>hadoop-env.sh</code><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim hadoop-env.sh</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/java/jdk1.8.0_231</span><br><span class="line">export HADOOP_OS_TYPE=$&#123;HADOOP_OS_TYPE:-$(uname -s)&#125;</span><br><span class="line">HADOOP_SHELL_EXECNAME=root</span><br></pre></td></tr></table></figure><ol start="2"><li>修改<code>core-site.xml</code><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim core-site.xml</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 指定 NameNode 的地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定 Hadoop 数据的存储目录 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/hadoop-3.2.2/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>A base for other temporary directories.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>修改<code>hdfs-site.xml</code><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim hdfs-site.xml</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.permissions<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/hadoop-3.2.2/tmp/hdfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/hadoop-3.2.2/tmp/hdfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>修改<code>maprep-site.xml</code><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim maprep-site.xml</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定 MapReduce 程序运行在 Yarn 上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>修改<code>yarn-site.xml</code><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim yarn-site.xml</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定 MR 走 shuffle --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-启动Hadoop"><a href="#4-启动Hadoop" class="headerlink" title="4.启动Hadoop"></a>4.启动Hadoop</h3><ol><li><p>在<code>hadoop-3.2.2</code>目录下执行命令将NameNode格式化（第一次启动时执行），格式化成功会在<code>/usr/local/hadoop-3.2.2/tmp</code>创建dfs文件夹。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/hadoop-3.2.2</span><br><span class="line">./bin/hdfs namenode –format</span><br></pre></td></tr></table></figure></li><li><p>在<code>hadoop-3.2.2/sbin</code>目录下执行启动命令打开所有进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./start-all.sh</span><br></pre></td></tr></table></figure></li><li><p>在<code>hadoop-3.2.2/sbin</code>目录下执行启动命令打开工作历史日志服务进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./mr-jobhistory-daemon.sh start historyserver</span><br></pre></td></tr></table></figure></li><li><p>执行<code>JPS</code>查看进程情况，显示七个进程说明成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">12436 SecondaryNameNode  </span><br><span class="line">13397 ResourceManager  </span><br><span class="line">11960 NameNode  </span><br><span class="line">14138 JobHistoryServer  </span><br><span class="line">13771 NodeManager  </span><br><span class="line">14205 Jps  </span><br><span class="line">12175 DataNode</span><br></pre></td></tr></table></figure></li></ol><h3 id="5-通过Web页面查看管理进程"><a href="#5-通过Web页面查看管理进程" class="headerlink" title="5.通过Web页面查看管理进程"></a>5.通过Web页面查看管理进程</h3><ol><li>查看 HDFS 的 NameNode</li></ol><ul><li><a href="http://localhost:9870/">http://localhost:9870</a> </li></ul><p><strong>注：Hadoop2.x为 <a href="http://localhost:50070/">http://localhost:50070</a></strong></p><ol start="2"><li>查看 YARN 的 ResourceManager</li></ol><ul><li><a href="http://localhost:8088/">http://localhost:8088</a></li></ul><ol start="3"><li>查看工作历史日志服务进程</li></ol><ul><li><a href="http://localhost:19888/">http://localhost:19888</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python3基础</title>
      <link href="/posts/99832f47.html"/>
      <url>/posts/99832f47.html</url>
      
        <content type="html"><![CDATA[<h2 id="Python3基础"><a href="#Python3基础" class="headerlink" title="Python3基础"></a>Python3基础</h2><h3 id="1-常量和变量"><a href="#1-常量和变量" class="headerlink" title="1.常量和变量"></a>1.常量和变量</h3><ul><li><p>变量<br>变量在程序中就是用一个变量名表示的，变量名是大小写英文、数字和_组合，且不能用==数字==开头。</p></li><li><p>常量<br>即不能变的变量，通常用==全部大写==的变量名表示常量</p></li></ul><h3 id="2-Python语言算术运算符"><a href="#2-Python语言算术运算符" class="headerlink" title="2.Python语言算术运算符"></a>2.Python语言算术运算符</h3><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">例子</th></tr></thead><tbody><tr><td align="center">**</td><td align="center">指数，执行对操作数的幂计算</td><td align="center">a**b = 10^20(10的20次方)</td></tr><tr><td align="center">//</td><td align="center">整除，其结果是将商的小数点后的数舍去</td><td align="center">9//2 = 4，而9.0//2.0 = 4.0</td></tr></tbody></table><h3 id="3-序列数据结构"><a href="#3-序列数据结构" class="headerlink" title="3.序列数据结构"></a>3.序列数据结构</h3><ul><li>列表、元组和字符串</li></ul><p><strong>Python列表操作符</strong></p><ul><li>+用于组合列表，*用于重复列表。</li></ul><table><thead><tr><th align="center">Python表达式</th><th align="center">描述</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">[1,2,3] + [4,5,6]</td><td align="center">组合</td><td align="center">[1,2,3,4,5,6]</td></tr><tr><td align="center">[‘Hi!’] * 4</td><td align="center">重复</td><td align="center">[‘Hi!’,’Hi!’,’Hi!’,’Hi!’]</td></tr></tbody></table><h3 id="4-元组"><a href="#4-元组" class="headerlink" title="4.元组"></a>4.元组</h3><p>Python的元组(tuple)和列表类似，不同之处在于==元组==的元素==不能修改==，元组使用圆括号(),列表使用方括号[],元组的元素类型也可以不相同。</p><p><strong>元组与列表的区别</strong></p><ul><li>列表是==动态==数组，它们==可变==且可以重设长度（改变其内部元素的个数）。</li><li>元组是==静态==数组，它们==不可变==，且其内部数据一旦创建便无法改变。</li><li>元组缓存于Python运行时环境，这意味着我们每次使用元组时无须访问内核去分配内存。</li></ul><h3 id="5-字典"><a href="#5-字典" class="headerlink" title="5.字典"></a>5.字典</h3><ul><li>字典的每个==键/值==对里面键和值用==冒号==分隔，键/值对==之间用逗号==分隔，整个字典包括在==花括号==中</li></ul><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;key1 : value1 , key2 : value2&#125;</span><br></pre></td></tr></table></figure><p><strong>特性</strong></p><ol><li>字典值可以是任何Python对象，如字符串、数字、元组等。</li><li>不允许同一个键出现两次。创建时如果同一个键被赋值两次，后一个值会覆盖前面的值。</li></ol><p><strong>典方法和内置函数</strong></p><table><thead><tr><th align="center">函数</th><th align="center">函数描述</th></tr></thead><tbody><tr><td align="center">dict1.get(key , default = None)</td><td align="center">返回指定键的值，如果值不在字典中则返回default值</td></tr></tbody></table><h3 id="6-集合"><a href="#6-集合" class="headerlink" title="6.集合"></a>6.集合</h3><p>集合(set)是一个==无序不重复==元素的序列。集合基本功能是进行==成员关系测试==和==删除重复元素==。</p><ul><li>字典可以使用花括号{}或者set()函数创建集合。注意，创建一个==空集合必须用set()==而不是{}，因为{}用来创建一个空字典。</li></ul><h3 id="7-Python控制语句"><a href="#7-Python控制语句" class="headerlink" title="7.Python控制语句"></a>7.Python控制语句</h3><h4 id="7-1-分支结构"><a href="#7-1-分支结构" class="headerlink" title="7.1.分支结构"></a>7.1.分支结构</h4><ol><li><p>单分支结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> &lt;条件&gt;：</span><br><span class="line">&lt;语句块&gt;</span><br></pre></td></tr></table></figure></li><li><p>二分支结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>&lt;条件&gt;： </span><br><span class="line">&lt;语句块<span class="number">1</span>&gt;</span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line">&lt;语句块<span class="number">2</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>多分支结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> &lt;条件<span class="number">1</span>&gt; :</span><br><span class="line">&lt;语句块<span class="number">1</span>&gt; </span><br><span class="line"><span class="keyword">elif</span>&lt;条件<span class="number">2</span>&gt; :</span><br><span class="line">&lt;语句块<span class="number">2</span>&gt;</span><br><span class="line">...... </span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line">&lt;语句块N&gt;</span><br></pre></td></tr></table></figure></li></ol><p><strong>注意:</strong></p><ul><li>该语句可以利用一系列条件表达式进行检查，并在某个表达式为真的情况下执行相应的代码。</li><li>虽然该语句的备选动作较多，但是==有且只有一组==动作被执行。 </li><li> 最后面的else语句没有进行条件判断，它实际处理的是跟前面所有条件都不匹配的情况下的情况，所以else语句==必须放在最后==。</li></ul><h4 id="7-2-循环结构"><a href="#7-2-循环结构" class="headerlink" title="7.2.循环结构"></a>7.2.循环结构</h4><ol><li><strong>while语句</strong></li></ol><ul><li>当<code>判断条件1</code>为<code>true</code>时执行循环语句。若此时<code>判断条件2</code>为<code>true</code>，执行<code>break</code>跳出<code>while</code>循环，若<code>判断条件2</code>一直为<code>false</code>，则执行<code>while</code>循环，一直到<code>判断条件1</code>为<code>false</code>。  </li></ul><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span>(count &lt;= <span class="number">10</span>):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;现在计数为:&quot;</span>,count)</span><br><span class="line">count += <span class="number">1</span> </span><br><span class="line"><span class="keyword">if</span>(count \&gt; <span class="number">5</span>): </span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>for语句&amp;continue</strong></li></ol><ul><li>可以遍历任何一个序列的项目，比如一个列表、元祖、或者一个字符串</li></ul><p>当遍历序列时，如果<code>判断语句1</code>为真，则执行<code>continue</code>语句，跳出当前循环，直接进入下一次循环。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> iteration\_var <span class="keyword">in</span> sequence:    </span><br><span class="line">循环语句   </span><br><span class="line"><span class="keyword">if</span> 判断语句<span class="number">1</span>：    </span><br><span class="line"><span class="keyword">continue</span></span><br></pre></td></tr></table></figure><ol start="3"><li><strong>range()函数</strong></li></ol><p>例如，range(0,5)或range(5)生成的序列是从0开始到小于5的整数，不包括5==（左闭右开）==，实例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure><h3 id="8-求最大数和最小数"><a href="#8-求最大数和最小数" class="headerlink" title="8.求最大数和最小数"></a>8.求最大数和最小数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(<span class="built_in">list</span>)) <span class="comment">#输出最小数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(<span class="built_in">list</span>)) <span class="comment">#输出最大数</span></span><br></pre></td></tr></table></figure><h3 id="9-Python函数与模块"><a href="#9-Python函数与模块" class="headerlink" title="9.Python函数与模块"></a>9.Python函数与模块</h3><h4 id="9-1-函数的优点"><a href="#9-1-函数的优点" class="headerlink" title="9.1.函数的优点"></a>9.1.函数的优点</h4><ol><li>代码重用</li><li>保持一致性，易维护</li><li>可扩展性强</li></ol><h4 id="9-2-Lambda表达式"><a href="#9-2-Lambda表达式" class="headerlink" title="9.2.Lambda表达式"></a>9.2.Lambda表达式</h4><ul><li>用于声明匿名函数，只可以包含一个表达式</li></ul><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> [arg1 [,arg2,.....argn]]:expression</span><br></pre></td></tr></table></figure><p>冒号前是参数，可以有多个，用逗号隔开，冒号右边的为表达式（只能为一个）。其实lambda返回值是一个函数的地址，也就是函数对象。</p><p><strong>注意：</strong></p><p>Python中函数是可以返回多个值的，如果返回多个值，会将多个值放在一个元组或者其他类型的集合中来返回。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span>():</span></span><br><span class="line">x = <span class="number">2</span></span><br><span class="line">y = [<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">return</span> (x,y)</span><br><span class="line"><span class="built_in">print</span> (function)</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>])</span><br></pre></td></tr></table></figure><p><em>**若无 return ，将返回 None **</em></p><h3 id="10-函数参数"><a href="#10-函数参数" class="headerlink" title="10.函数参数"></a>10.函数参数</h3><h4 id="10-1-函数形参和实参的区别"><a href="#10-1-函数形参和实参的区别" class="headerlink" title="10.1.函数形参和实参的区别"></a>10.1.函数形参和实参的区别</h4><p>括号里面的变量称为形参，调用函数提供的值或者变量称为实参。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">a,b</span>):</span><span class="comment">#这里a和b就是形参</span></span><br><span class="line"><span class="keyword">return</span> a+b</span><br><span class="line"><span class="comment">#下面是调用参数</span></span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>)<span class="comment">#这里1和2是实参</span></span><br><span class="line">x = <span class="number">2</span></span><br><span class="line">y = <span class="number">3</span></span><br><span class="line">add(x,y)<span class="comment">#这里x和y是实参</span></span><br></pre></td></tr></table></figure><h4 id="10-2-函数参数的类型"><a href="#10-2-函数参数的类型" class="headerlink" title="10.2.函数参数的类型"></a>10.2.函数参数的类型</h4><ol><li>默认参数</li></ol><p>在定义函数时给形参赋予一个默认值，当调用函数时，如果没有给该参数赋新值，则会使用这个默认值。如果给参数赋予了新值，则会使用新值。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span>(<span class="params">name = <span class="string">&#x27;Mark&#x27;</span> , age = <span class="number">22</span></span>):</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%s今年%s岁&#x27;</span> % (name , age))</span><br><span class="line"></span><br><span class="line">info()<span class="comment">#这里输出默认值</span></span><br><span class="line">info(<span class="string">&#x27;Lily&#x27;</span> , <span class="number">24</span>)<span class="comment">#默认参数已被覆盖，输出新值</span></span><br></pre></td></tr></table></figure><ol start="2"><li>关键字参数</li></ol><p>关键字参数是以键值对的形式定义和调用的，清除了参数的顺序要求，在调用的时候不需要考虑参数的位置。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span>(<span class="params">name , age</span>):</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%s今年%s岁&#x27;</span> % (name , age))</span><br><span class="line"></span><br><span class="line">info(name = <span class="string">&#x27;Ken&#x27;</span> , age = <span class="number">23</span>)<span class="comment">#输出：Ken今年23岁</span></span><br><span class="line"><span class="comment">#关键字参数，可以不考虑参数位置，即name和age可以交换位置</span></span><br></pre></td></tr></table></figure><ol start="3"><li>任意个数参数（可变参数）</li></ol><p>可变参数分为可变位置参数和可变关键字参数。</p><ul><li>可变==位置==参数使用args，把一个或多个参数封装成一个元组，然后在元组里面进行迭代。</li></ul><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">*args</span>):</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(args))<span class="comment">#type()函数用于返回对象的类型</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> args:</span><br><span class="line"><span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line">func(<span class="number">1</span>,<span class="number">20</span>,<span class="number">35</span>)<span class="comment">#参数个数可变</span></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">35</span></span><br></pre></td></tr></table></figure><ul><li>可变==关键字==参数使用**kwargs，把参数构成一个key-value键值对组成的字典。</li></ul><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">**kwargs</span>):</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(kwargs))</span><br><span class="line"><span class="keyword">for</span> key , value <span class="keyword">in</span> kwargs.items():</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;key = &#123;&#125; , value = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(key , value))</span><br><span class="line"></span><br><span class="line">func(name = <span class="string">&#x27;Summer&#x27;</span> , age = <span class="number">20</span>)<span class="comment">#参数个数可变</span></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">key = name , value = Summer</span><br><span class="line">key = age , value = <span class="number">20</span></span><br></pre></td></tr></table></figure><h3 id="11-变量的作用域"><a href="#11-变量的作用域" class="headerlink" title="11.变量的作用域"></a>11.变量的作用域</h3><p>变量起作用的范围称为变量的作用域，一个变量在函数外部定义和函数内部定义，其作用域是不同的。</p><ol><li>局部变量</li></ol><p> 在函数内部定义的变量，作用域也仅限于函数内部，出了函数便不能使用。</p><ol start="2"><li>全局变量</li></ol><p> 和局部变量不同，全局变量的默认作用域是整个程序，即全局变量既可以在各个函数的外部使用，也可以在各函数内部使用。</p><p> <strong>注意：</strong></p><p> 如果一个局部变量和一个全局变量重名，则局部变量会“屏蔽”全局变量，也就是局部变量起作用。</p><h3 id="12-字符串函数"><a href="#12-字符串函数" class="headerlink" title="12.字符串函数"></a>12.字符串函数</h3><table><thead><tr><th align="center">函数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">string.lstrip()</td><td align="center">截掉string左边的空格</td></tr><tr><td align="center">string.rstrip()</td><td align="center">删除string字符串末尾的空格</td></tr><tr><td align="center">string.strip()</td><td align="center">删除string字符串首尾全部空格</td></tr></tbody></table><h3 id="13-文件的访问"><a href="#13-文件的访问" class="headerlink" title="13.文件的访问"></a>13.文件的访问</h3><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">“r”</td><td align="center">以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td align="center">“w”</td><td align="center">打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td></tr><tr><td align="center">“a”</td><td align="center">打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr></tbody></table><p>** 读取文本文件**</p><ol><li> read() 每次读取==整个文件==，它通常将读取到底文件内容放到一个==字符串变量==中，也就是说 read() 生成文件内容是一个==字符串类型==。</li><li> readline()每只读取文件的==一行==，通常也是读取到的一行内容放到一个==字符串变量==中，返回==str类型==。 </li><li> readlines()每次按行读取==整个文件==内容，将读取到的内容放到一个==列表==中，返回==list类型==。</li></ol><p><strong>写入文本文件</strong></p><ol><li>write()方法<br>write()方法将==字符串参数==写入文件</li><li>writelines()方法<br>writelines()方法将==字符串序列==写入文件</li></ol><p><strong>注意：</strong><br>write() &amp; writelines()方法不能自动在字符串末尾添加换行符，需要自己添加==”\n“==。</p><h3 id="14-文件的关闭"><a href="#14-文件的关闭" class="headerlink" title="14.文件的关闭"></a>14.文件的关闭</h3><p><strong>可使用try/finally语句 &amp; with语句自动关闭文件</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#try/finally语句</span></span><br><span class="line">File = <span class="built_in">open</span>(<span class="string">&#x27;c:\\hello.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">File.write(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">File.close()</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="comment">#with自动关闭</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;c:\\hello.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">s = f.read()</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><p><strong>raise()语句抛出异常</strong></p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#当x小于0时，抛出异常并停止程序:</span></span><br><span class="line">x = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line"><span class="keyword">raise</span> Exception(<span class="string">&quot;x需要是大于等于0的数字&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="15-目录操作"><a href="#15-目录操作" class="headerlink" title="15.目录操作"></a>15.目录操作</h3><ul><li>os.makedirs()函数创建新==多级==目录。</li><li>os.mkdir()函数创建新==一级==目录。</li></ul><h3 id="16-类和对象"><a href="#16-类和对象" class="headerlink" title="16.类和对象"></a>16.类和对象</h3><ul><li><strong>self（约定俗成的一种习惯）</strong></li></ul><p>类的成员函数必须有一个参数self，而且位于参数列表的开头。self就代表类的实例（对象）自身，可以使用self引用类的属性和成员变量。在类的成员函数中访问实例属性时需要以self为前缀。</p><h3 id="17-构造函数"><a href="#17-构造函数" class="headerlink" title="17.构造函数"></a>17.构造函数</h3><p><strong>解释：</strong></p><p>在对象进行实例化的时候，系统==自动==调用的一个函数叫构造函数，通常此函数用来对实例化对象进行==初始化==。</p><p><code>__init__()</code>方法是一个特殊的方法，在对象实例化时会被调用，<code>__init__()</code>方法的作用是初始化。</p><h3 id="18-私有成员和公有成员"><a href="#18-私有成员和公有成员" class="headerlink" title="18.私有成员和公有成员"></a>18.私有成员和公有成员</h3><ul><li>  在定义类的成员时，如果成员名以两个下划线“_ _”或更多下划线开头而不以两个或更多下划线结束则表示是私有成员。</li></ul><p>访问方法：</p><p>==对象名._类名+私有成员==</p><h3 id="19-SQLite数据库"><a href="#19-SQLite数据库" class="headerlink" title="19.SQLite数据库"></a>19.SQLite数据库</h3><ul><li>Python自带一个==轻量级==的关系型数据库SQLite。</li><li>SQLite是非常小的、轻量级的、自给自足的，==无服务器==，所以不需要安装和管理。</li><li>SQLite3采用了==动态==的数据类型，会根据存入值自动判断。</li><li>SQLite使用==弱==数据类型，除了主键，对其它字段不指定类型是完全有效的。</li></ul><h3 id="20-TCP和UDP的区别"><a href="#20-TCP和UDP的区别" class="headerlink" title="20.TCP和UDP的区别"></a>20.TCP和UDP的区别</h3><ul><li>TCP 提供的是面向连接、可靠的字节流服务,并且有流量控制和拥塞控制功能。</li><li>UDP 提供的是无连接、不可靠的数据报传输,无流量控制和拥塞控制。</li></ul><h3 id="21-科学计算"><a href="#21-科学计算" class="headerlink" title="21.科学计算"></a>21.科学计算</h3><p><strong>主要工具：</strong></p><ul><li><a href="https://numpy.org/">NumPy</a></li><li><a href="https://pandas.pydata.org/">Pandas - Python Data Analysis Library</a></li><li><a href="https://seaborn.pydata.org/">Seaborn: statistical data visualization — seaborn 0.11.2 documentation</a></li></ul><hr><h2 id="经典例题"><a href="#经典例题" class="headerlink" title="经典例题"></a>经典例题</h2><h3 id="1-数据库操作"><a href="#1-数据库操作" class="headerlink" title="1.数据库操作"></a>1.数据库操作</h3><p><strong>要求：</strong></p><ol><li>数据库表的创建。</li><li>sql批量插入5条记录。</li><li>查询，带条件，<code>select * from 表 where 条件</code>。</li><li>删除数据，带条件。</li></ol><p><a href="https://blog.csdn.net/youngdianfeng/article/details/105928848">Python SQLite数据库操作</a></p><p><strong>实例代码1：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mysqlite</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,dbpath</span>):</span></span><br><span class="line">        <span class="comment"># 如果不存在则创建</span></span><br><span class="line">        self.con = sqlite3.connect(dbpath)</span><br><span class="line">        self.cur = self.con.cursor()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.close()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute_sqlite3</span>(<span class="params">self,sql</span>):</span></span><br><span class="line">        <span class="comment"># 命令处理</span></span><br><span class="line">        sql = sql.lower()</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;insert&#x27;</span> <span class="keyword">in</span> sql <span class="keyword">or</span> <span class="string">&#x27;delete&#x27;</span> <span class="keyword">in</span> sql <span class="keyword">or</span>  <span class="string">&#x27;update&#x27;</span> <span class="keyword">in</span> sql <span class="keyword">or</span>  <span class="string">&#x27;create&#x27;</span> <span class="keyword">in</span> sql:</span><br><span class="line">            self.cur.execute(sql)</span><br><span class="line">            self.con.commit()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;done..&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&#x27;select&#x27;</span> <span class="keyword">in</span> sql :</span><br><span class="line">            self.cur.execute(sql)</span><br><span class="line">            data = self.cur.fetchall()</span><br><span class="line">            <span class="built_in">print</span>(data)</span><br><span class="line">            <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_table</span>(<span class="params">self,table_name,title</span>):</span></span><br><span class="line">        <span class="comment"># 自定义创建表</span></span><br><span class="line">        sql = <span class="string">&quot;CREATE TABLE &#123;&#125;(&#123;&#125;)&quot;</span>.<span class="built_in">format</span>(table_name,title)</span><br><span class="line">        self.execute_sqlite3(sql)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_value</span>(<span class="params">self,table_name,value</span>):</span></span><br><span class="line">        <span class="comment"># 插入自定义数据</span></span><br><span class="line">        sql = <span class="string">&quot;INSERT INTO &#123;&#125; values(&#123;&#125;)&quot;</span>.<span class="built_in">format</span>(table_name,value)</span><br><span class="line">        self.execute_sqlite3(sql)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select_data</span>(<span class="params">self,table_name</span>):</span></span><br><span class="line">        <span class="comment"># 查询数据</span></span><br><span class="line">        sql = <span class="string">&quot;SELECT * FROM &#123;&#125;&quot;</span>.<span class="built_in">format</span>(table_name)</span><br><span class="line">        self.execute_sqlite3(sql)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_data</span>(<span class="params">self,table_name,field,value,<span class="built_in">id</span></span>):</span></span><br><span class="line">        <span class="comment"># 修改数据</span></span><br><span class="line">        sql = <span class="string">&quot;UPDATE &#123;&#125; set &#123;&#125; = &#x27;&#123;&#125;&#x27; where id = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(table_name,field,value,<span class="built_in">id</span>)</span><br><span class="line">        self.execute_sqlite3(sql)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete_data</span>(<span class="params">self,table_name,<span class="built_in">id</span></span>):</span></span><br><span class="line">        <span class="comment"># 删除数据</span></span><br><span class="line">        sql = <span class="string">&quot;DELETE FROM &#123;&#125; where id = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(table_name,<span class="built_in">id</span>)</span><br><span class="line">        self.execute_sqlite3(sql)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 关闭资源</span></span><br><span class="line">        self.cur.close()</span><br><span class="line">        self.con.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    sqlite = Mysqlite(<span class="string">&#x27;test.db&#x27;</span>)</span><br><span class="line">    table_name = <span class="string">&#x27;foo&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        sqlite.create_table(table_name,<span class="string">&#x27;id integer primary key autoincrement, name varchar(128), info varchar(128)&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; created..&quot;</span>)</span><br><span class="line">    sqlite.insert_value(table_name,<span class="string">&#x27;NULL,\&quot;apple\&quot;,\&quot;broccoli\&quot;&#x27;</span>)</span><br><span class="line">    sqlite.select_data(table_name)</span><br><span class="line">    sqlite.update_data(table_name,<span class="string">&#x27;name&#x27;</span>,<span class="string">&quot;orange&quot;</span>,<span class="number">1</span>)</span><br><span class="line">    sqlite.select_data(table_name)</span><br><span class="line">    sqlite.delete_data(table_name,<span class="number">2</span>)</span><br><span class="line">    sqlite.select_data(table_name)</span><br></pre></td></tr></table></figure><p><strong>实例代码2：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selectdb</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        con = sqlite3.connect(<span class="string">&quot;student.db&quot;</span>)</span><br><span class="line">        cur = con.cursor()</span><br><span class="line">        cur.execute(<span class="string">&quot;select * from student&quot;</span>)</span><br><span class="line">        a=cur.fetchall()</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(a) &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;--------------------------------&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;序号&quot;</span><span class="string">&quot;\t\t&quot;</span><span class="string">&quot;姓名&quot;</span><span class="string">&quot;\t\t&quot;</span><span class="string">&quot;年龄&quot;</span><span class="string">&quot;\t\t&quot;</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">                <span class="built_in">print</span>(a[i][<span class="number">0</span>], <span class="string">&quot;  \t&quot;</span>, a[i][<span class="number">1</span>], <span class="string">&quot; \t&quot;</span>, a[i][<span class="number">2</span>])</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;--------------------------------&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;------信息表为空------&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># print(cur.rowcount)</span></span><br><span class="line">        con.commit()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> ex:</span><br><span class="line">        <span class="built_in">print</span>(ex)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        cur.close()</span><br><span class="line">        con.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deldb</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        con = sqlite3.connect(<span class="string">&quot;student.db&quot;</span>)</span><br><span class="line">        cur = con.cursor()</span><br><span class="line">        cur.execute(<span class="string">&quot;delete from student where name=?&quot;</span>, (<span class="string">&quot;小奥&quot;</span>,))</span><br><span class="line">        cur.execute(<span class="string">&quot;select * from student&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;删除数据后：&quot;</span> )</span><br><span class="line">        <span class="comment"># print(cur.rowcount)</span></span><br><span class="line">        con.commit()</span><br><span class="line">        selectdb()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> ex:</span><br><span class="line">        <span class="built_in">print</span>(ex)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        cur.close()</span><br><span class="line">        con.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">updatedb</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        con = sqlite3.connect(<span class="string">&quot;student.db&quot;</span>)</span><br><span class="line">        cur = con.cursor()</span><br><span class="line">        cur.execute(<span class="string">&quot;update student set name=? where id=?&quot;</span>, (<span class="string">&quot;小仔&quot;</span>, <span class="number">6</span>))</span><br><span class="line">        cur.execute(<span class="string">&quot;select * from student&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;更新数据后：&quot;</span> )</span><br><span class="line">        <span class="comment"># print(cur.rowcount)</span></span><br><span class="line">        con.commit()</span><br><span class="line">        selectdb()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> ex:</span><br><span class="line">        <span class="built_in">print</span>(ex)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        cur.close()</span><br><span class="line">        con.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    con = sqlite3.connect(<span class="string">&quot;student.db&quot;</span>)</span><br><span class="line">    cur = con.cursor()</span><br><span class="line">    cur = con.execute(<span class="string">&quot;&quot;&quot;create table if not exists student</span></span><br><span class="line"><span class="string">                        (</span></span><br><span class="line"><span class="string">                        id integer primary key autoincrement,</span></span><br><span class="line"><span class="string">                        name varchar(40),</span></span><br><span class="line"><span class="string">                        age varchar(30))&quot;&quot;&quot;</span>)</span><br><span class="line">    student = [(<span class="number">1</span>, <span class="string">&quot;小明&quot;</span>, <span class="string">&#x27;18&#x27;</span>), (<span class="number">2</span>, <span class="string">&quot;小白&quot;</span>, <span class="string">&#x27;18&#x27;</span>), (<span class="number">3</span>, <span class="string">&quot;小奥&quot;</span>, <span class="string">&#x27;19&#x27;</span>), (<span class="number">4</span>, <span class="string">&#x27;小火&#x27;</span>, <span class="string">&#x27;19&#x27;</span>), (<span class="number">5</span>, <span class="string">&#x27;小子&#x27;</span>, <span class="string">&#x27;17&#x27;</span>)]</span><br><span class="line">    cur.executemany(<span class="string">&quot;insert into student(id,name,age) values (?,?,?)&quot;</span>, student)</span><br><span class="line">    <span class="built_in">print</span>(cur.rowcount)</span><br><span class="line">    cur.execute(<span class="string">&quot;insert into student(id,name,age) values (6,&#x27;小考&#x27;,&#x27;17&#x27;)&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(cur.rowcount)</span><br><span class="line">    con.commit()</span><br><span class="line">    <span class="comment"># cur.close()</span></span><br><span class="line">    <span class="comment"># con.close()</span></span><br><span class="line">    selectdb()</span><br><span class="line">    deldb()</span><br><span class="line">    updatedb()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="2-TCP-amp-UDP"><a href="#2-TCP-amp-UDP" class="headerlink" title="2.TCP&amp;UDP"></a>2.TCP&amp;UDP</h3><p><a href="https://www.cnblogs.com/studyming/p/13671051.html">TCP文件下载简单实现</a></p><p><strong>什么是下载？</strong></p><ol><li>首先客户端会问服务器，有没有xxx文件？服务器开始寻找，找到后答复客户端，然后客户端在本地新建一个文件，双方实时的发送和接收，待所有接收到的数据都写入到这个文件中，就完成了下载的操作。</li><li>所以下载需要两个部分。服务器的发送方和客户端的接收方。</li><li>这里不考虑复杂的情况，只实现最简单的逻辑。</li></ol><p><strong>客户端参考代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建socket</span></span><br><span class="line">    tcp_client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 目的信息</span></span><br><span class="line">    server_ip = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">    server_port = <span class="number">8888</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 链接服务器</span></span><br><span class="line">    tcp_client_socket.connect((server_ip, server_port))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输入需要下载的文件名</span></span><br><span class="line">    file_name = <span class="built_in">input</span>(<span class="string">&quot;请输入要下载的文件名：&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送文件下载请求</span></span><br><span class="line">    tcp_client_socket.send(file_name.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 接收对方发送过来的数据，最大接收1024个字节（1K）</span></span><br><span class="line">    recv_data = tcp_client_socket.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="comment"># 如果接收到数据再创建文件，否则不创建</span></span><br><span class="line">    <span class="keyword">if</span> recv_data:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_name + <span class="string">&quot;[接收]&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(recv_data)</span><br><span class="line">    <span class="comment"># 关闭套接字</span></span><br><span class="line">    tcp_client_socket.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p><strong>服务端参考代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_file_content</span>(<span class="params">file_name</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;获取文件的内容&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_name, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            content = f.read()</span><br><span class="line">        <span class="keyword">return</span> content</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;没有下载的文件:%s&quot;</span> % file_name)</span><br><span class="line"></span><br><span class="line">host = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">port = <span class="number">8888</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 创建socket</span></span><br><span class="line">    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    <span class="comment"># 本地信息</span></span><br><span class="line">    address = (<span class="string">&#x27;&#x27;</span>, port)</span><br><span class="line">    <span class="comment"># 绑定本地信息</span></span><br><span class="line">    tcp_server_socket.bind(address)</span><br><span class="line">    <span class="comment"># 将主动套接字变为被动套接字</span></span><br><span class="line">    tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 等待客户端的链接，即为这个客户端发送文件</span></span><br><span class="line">        client_socket, clientAddr = tcp_server_socket.accept()</span><br><span class="line">        <span class="comment"># 接收对方发送过来的数据</span></span><br><span class="line">        recv_data = client_socket.recv(<span class="number">1024</span>)  <span class="comment"># 接收1024个字节</span></span><br><span class="line">        file_name = recv_data.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;对方请求下载的文件名为:%s&quot;</span> % file_name)</span><br><span class="line">        file_content = get_file_content(file_name)</span><br><span class="line">        <span class="comment"># 发送文件的数据给客户端</span></span><br><span class="line">        <span class="comment"># 因为获取打开文件时是以rb方式打开，所以file_content中的数据已经是二进制的格式，因此不需要encode编码</span></span><br><span class="line">        <span class="keyword">if</span> file_content:</span><br><span class="line">            client_socket.send(file_content)</span><br><span class="line">        <span class="comment"># 关闭这个套接字</span></span><br><span class="line">        client_socket.close()</span><br><span class="line">    <span class="comment"># 关闭监听套接字</span></span><br><span class="line">    tcp_server_socket.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="3-下标和"><a href="#3-下标和" class="headerlink" title="3.下标和"></a>3.下标和</h3><p>编写函数实现输入整型列表L,和一个整型参数goal,求列表L中所有满足两两之和为goal的元素的下标。</p><p>例如：输入一个整型列表L·=[1,3,5,7,9,2,-1],goal=8,而列表L中所有满足和为goal的元素为：<br>L[0]+L[3]=8<br>L[1]+L[2]=8<br>L[4]+L[6]=8<br>则输出为：((0,3),(1,2),(4,6))</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">2</span>,-<span class="number">1</span>,<span class="number">3</span>]</span><br><span class="line">goal = <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">TwoNumSum</span>(<span class="params">L,goal</span>):</span></span><br><span class="line">list1 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(L)):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,<span class="built_in">len</span>(L)):</span><br><span class="line"><span class="keyword">if</span> L[i] + L[j] == goal:</span><br><span class="line">list1.append((i,j))</span><br><span class="line"><span class="keyword">return</span>(<span class="built_in">tuple</span>(list1))</span><br><span class="line"></span><br><span class="line">a = TwoNumSum(L,goal)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><h3 id="4-目录logs"><a href="#4-目录logs" class="headerlink" title="4.目录logs"></a>4.目录logs</h3><p>在桌面新建目录logs,并完成以下操作：</p><ol><li>在logs目录下新建11个文件，分别作为凌晨0点到早上10点的日志文件，文件命名规则为<code>2021042000.txt~2021042010.txt</code>,文件内容为长度为10的随机字符串。</li><li>将logs目录下所有以.txt结尾的后缀名都改为.log</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os  </span><br><span class="line"><span class="keyword">import</span> random  </span><br><span class="line"><span class="keyword">import</span> shutil  </span><br><span class="line"></span><br><span class="line">logspath = <span class="string">&quot;C:\\Users\\admin\\Desktop\\logs&quot;</span>  </span><br><span class="line">s = <span class="string">&quot;wfowiefnguow209384f389&quot;</span>  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(logspath):  </span><br><span class="line">os.mkdir(logspath)  </span><br><span class="line">os.chdir(logspath)  </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2021042000</span>, <span class="number">2021042011</span>):  </span><br><span class="line">filename = <span class="built_in">str</span>(i) + <span class="string">&#x27;.txt&#x27;</span>  </span><br><span class="line">content = <span class="string">&#x27;&#x27;</span>.join(random.sample(s, <span class="number">10</span>))  </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:  </span><br><span class="line">f.write(content)  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(os.getcwd()):  </span><br><span class="line">newfile = file.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>] + <span class="string">&#x27;.log&#x27;</span>  </span><br><span class="line">shutil.move(file, newfile)</span><br></pre></td></tr></table></figure><h3 id="5-升序排列"><a href="#5-升序排列" class="headerlink" title="5.升序排列"></a>5.升序排列</h3><p>scores = [( ‘B’ , 89), ( ‘A’ , 16), ( ‘ C’ , 60), ( ‘D’ , 67)]<br>用sorted函数对上述列表元素按照成绩升序排列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scores = [(<span class="string">&#x27;B&#x27;</span>, <span class="number">89</span>), (<span class="string">&#x27;A&#x27;</span>, <span class="number">16</span>), (<span class="string">&#x27;C&#x27;</span>, <span class="number">60</span>), (<span class="string">&#x27;D&#x27;</span>, <span class="number">67</span>)]</span><br><span class="line">a = <span class="built_in">sorted</span>(scores, key = <span class="keyword">lambda</span> s: s[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><h3 id="6-包含abc输出"><a href="#6-包含abc输出" class="headerlink" title="6.包含abc输出"></a>6.包含abc输出</h3><p>已知下列一组字符串列表，完成以下需求：<br>L=[‘fwieng’,’weiabcfwie’,’ sdfaafaab’,asdfverabc’ ,’ ebeabrifje’ ,’ abcfwefwe’ ]<br>将所有包含’abc’的字符串输出，例如result=[‘weiabcfwie’,’asdfverabc’,’ abcfwefwe’ ]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">result = [ ]</span><br><span class="line">L=[<span class="string">&#x27;fwieng&#x27;</span>, <span class="string">&#x27;weiabcfwie&#x27;</span>,<span class="string">&#x27;sdfaafaab&#x27;</span>, <span class="string">&#x27;asdfverabc&#x27;</span>, <span class="string">&#x27;ebeabrifje&#x27;</span>, <span class="string">&#x27;abcfwefwe&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> L :</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;abc&quot;</span> <span class="keyword">in</span> s:</span><br><span class="line">result.append(s)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h3 id="7-汽车Car"><a href="#7-汽车Car" class="headerlink" title="7.汽车Car"></a>7.汽车Car</h3><p>建立一个汽车car类，包括：</p><p>属性：汽车颜色color、车身重量weight、速度speed。</p><p>构造函数：能初始化各个属性值（speed初始值设为50)。</p><p>方法：<br>speedup():将属性值 speed+10 并显示 speed 值；<br>speedCut():将属性值 speed-10 并显示 speed 值；<br>show():显示属性值color、weight、speed。</p><p>在主程序中创建实例并初始化各属性值，调用show方法、加速方法、减速方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self , color=<span class="string">&#x27;&#x27;</span>, weight=<span class="number">0</span>, speed=<span class="number">0</span></span>):</span>  </span><br><span class="line">        self.color = color  </span><br><span class="line">        self.weight = weight  </span><br><span class="line">        self.speed = speed  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">speedUp</span>(<span class="params">self</span>):</span>  </span><br><span class="line">        self.speed += <span class="number">10</span>  </span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&#x27;车辆正在加速,当前speed值为：&#x27;</span>,self.speed)  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">speedCut</span>(<span class="params">self</span>):</span>  </span><br><span class="line">        self.speed -= <span class="number">10</span>  </span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&#x27;车辆正在减速,当前speed值为：&#x27;</span>,self.speed)  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">self</span>):</span>  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;车辆的颜色为:&#x27;</span>,self.color,<span class="string">&#x27;车辆的重量为:&#x27;</span>,self.weight,<span class="string">&#x27;车辆的速度为:&#x27;</span>,self.speed)  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line"> c = Car(<span class="string">&#x27;白色&#x27;</span>, <span class="number">800</span>, <span class="number">50</span>)  </span><br><span class="line"> c.show()  </span><br><span class="line"> c.speedUp()  </span><br><span class="line"> c.speedCut()</span><br></pre></td></tr></table></figure><h3 id="8-数据库查询"><a href="#8-数据库查询" class="headerlink" title="8.数据库查询"></a>8.数据库查询</h3><p>前三行数据查询</p><p>cur.fetch==all==():返回结果集的剩余行（Row对象列表），无数据时，返回空List。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">res = cur.fetchall()</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> res:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;id:&#123;&#125;,price:&#123;&#125;,name:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(line[<span class="number">0</span>],line[<span class="number">1</span>],line[<span class="number">2</span>]))</span><br><span class="line">line = cur.fetchone()</span><br></pre></td></tr></table></figure><p>cur.fetch==many==():返回结果集的多行（Row对象列表），无数据时，返回空List。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">res = cur.fetchmany(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> res:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;id:&#123;&#125;,price:&#123;&#125;,name:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(line[<span class="number">0</span>],line[<span class="number">1</span>],line[<span class="number">2</span>]))</span><br><span class="line">line = cur.fetchone()</span><br></pre></td></tr></table></figure><hr><h2 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h2><ul><li><p><a href="https://docs.python.org/zh-cn/3.6/">Python 3.6.15 Documentation</a></p></li><li><p><a href="https://wiki.python.org/moin/IntroductoryBooks">IntroductoryBooks - Python Wiki</a></p></li><li><p><a href="https://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/">Python风格规范 — Google 开源项目风格指南</a></p></li><li><p><a href="https://regex101.com/">regex101: build, test, and debug regex</a></p></li><li><p><a href="https://www.runoob.com/python3/python3-tutorial.html">Python3 教程 | 菜鸟教程</a></p></li><li><p><a href="https://www.liaoxuefeng.com/wiki/1016959663602400">Python教程 - 廖雪峰的官方网站</a></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>解决Github访问、下载慢的问题</title>
      <link href="/posts/b457641.html"/>
      <url>/posts/b457641.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Mac-Win10-无法访问Github"><a href="#1-Mac-Win10-无法访问Github" class="headerlink" title="1.Mac || Win10 无法访问Github"></a>1.Mac || Win10 无法访问Github</h2><p>有时候我们的电脑出现突然上不了网，或者某些网站打不开的情况，这种情况很多是<a href="https://baike.baidu.com/item/%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F/2251573?fromtitle=dns&fromid=427444">DNS</a>缓存延时导致，可以通过执行DNS缓存清理命令来更新DNS缓存来解决。</p><ul><li><a href="https://github.com.ipaddress.com/">▷ GitHub.com : GitHub: Where the world builds software · GitHub</a></li><li><a href="https://fastly.net.ipaddress.com/github.global.ssl.fastly.net#ipinfo">▷ github.global.ssl.Fastly.net Website statistics and traffic analysis | Fastly | fastly.net</a></li></ul><p>从上面两个网站，可查看网站对应的IP地址。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">140.82</span>.<span class="number">112.3</span> github<span class="selector-class">.com</span> </span><br><span class="line"><span class="number">199.232</span>.<span class="number">69.194</span> github<span class="selector-class">.global</span><span class="selector-class">.ssl</span><span class="selector-class">.fastly</span><span class="selector-class">.net</span></span><br></pre></td></tr></table></figure><ol><li>修改电脑的hosts</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Mac: 打开访达 快捷键comand+shift+g 位置/private/etc/hosts  </span><br><span class="line">Win: C:\Windows\System32\drivers\etc\hosts</span><br></pre></td></tr></table></figure><ol start="2"><li>刷新DNS</li></ol><p>Mac: Terminal</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo killall -HUP mDNSResponder;say DNS cache has been flushed</span><br></pre></td></tr></table></figure><p>Win: CMD</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig/flushdns</span><br></pre></td></tr></table></figure><p>此时<a href="https://github.com/">GitHub</a>就可以登陆了</p><hr><h2 id="2-Github下载速度慢"><a href="#2-Github下载速度慢" class="headerlink" title="2.Github下载速度慢"></a>2.Github下载速度慢</h2><h3 id="2-1-Github加速网站"><a href="#2-1-Github加速网站" class="headerlink" title="2.1.Github加速网站"></a>2.1.Github加速网站</h3><p><a href="https://toolwa.com/github/">GitHub 加速下载</a></p><p>使用方法：</p><ol><li> 打开你要下载的 <a href="https://github.com/">GitHub</a> 仓库页面</li><li> 点击右侧的绿色按钮 “Code” &gt; “Download ZIP”</li><li> 等浏览器弹出下载框后复制下载框中的链接地址并粘贴到以上输入框</li><li> 点击加速下载</li></ol><h3 id="2-2-码云-Gitee"><a href="#2-2-码云-Gitee" class="headerlink" title="2.2.码云(Gitee)"></a>2.2.码云(Gitee)</h3><p><a href="https://gitee.com/">Gitee</a></p><p>使用方法：</p><ol><li>首先确保<a href="https://gitee.com/">Gitee</a>上有账户，可以正常使用。</li><li>点击右上角新建仓库的加号 + ，选择“ 从 GitHub/GitLab导入仓库 ”菜单。</li><li>然后填写位于<a href="https://github.com/">GitHub</a>上你想Clone的仓库地址并导入。</li><li>通过导入到码云上的项目地址，将项目Clone到本地。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Scoop&amp;Chocolatey不完全上手指南</title>
      <link href="/posts/cd19d6b5.html"/>
      <url>/posts/cd19d6b5.html</url>
      
        <content type="html"><![CDATA[<h2 id="Scoop"><a href="#Scoop" class="headerlink" title="Scoop"></a>Scoop</h2><h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h3><p><a href="https://github.com/lukesampson/scoop">Scoop</a>是一个 Windows 包管理工具，类似于 Debian 的 <code>apt</code>、macOS 的 <code>homebrew</code>。它由开源社区驱动，体验可能是是目前所有 Windows 包管理工具中最好的。对开发者来说，包管理器能非常方便的部署开发环境，比如 Python、Node.js。而对于普通的计算机使用者来说，可以方便的安装一些常用软件，尤其是开源软件，免去了手动去官网下载的繁琐步骤，而且后续对软件进行升级只需要输入一行命令，非常便捷。</p><h3 id="2-环境要求"><a href="#2-环境要求" class="headerlink" title="2.环境要求"></a>2.环境要求</h3><ul><li>  Windows 7 SP1 + / Windows Server 2008 +</li><li>  <a href="https://www.microsoft.com/en-us/download/details.aspx?id=54616">PowerShell 5 + </a>和<a href="https://dotnet.microsoft.com/download">.NET Framework 4.5 + </a></li><li>  Windows 用户名为英文（Windows 用户环境变量中路径值不支持中文字符）</li><li>  <strong>正常、快速</strong>的访问<a href="https://github.com/">GitHub</a>并下载资源</li></ul><h3 id="3-Scoop安装"><a href="#3-Scoop安装" class="headerlink" title="3.Scoop安装"></a>3.Scoop安装</h3><ol><li>设置<code>powershell</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set-executionpolicy remotesigned -scope currentuser</span><br></pre></td></tr></table></figure><ul><li>默认安装(安装到<code>C:\Users\&lt;user&gt;\scoop</code>), 在<code>powershell</code>里面运行:</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iex (new-object net.webclient).downloadstring(&#x27;https://get.scoop.sh&#x27;)</span><br></pre></td></tr></table></figure><ul><li>安装到指定目录(<code>D:\tool\scoop</code>)(逐行执行命令)</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[environment]::setEnvironmentVariable(&#x27;SCOOP&#x27;, &#x27;D:\tool\scoop&#x27;, &#x27;User&#x27;)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash">env:SCOOP=<span class="string">&#x27;D:\tool\scoop&#x27;</span></span></span><br><span class="line"></span><br><span class="line">iex (new-object net.webclient).downloadstring(&#x27;https://get.scoop.sh&#x27;)</span><br></pre></td></tr></table></figure><ul><li>全局安装到指定目录(<code>D:\tool\scoop_global</code>)(逐行执行命令)</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[environment]::setEnvironmentVariable(&#x27;SCOOP_GLOBAL&#x27;,&#x27;D:\tool\scoop\scoop_global&#x27;,&#x27;Machine&#x27;)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash">env:SCOOP_GLOBAL=<span class="string">&#x27;D:\tool\scoop\scoop_global&#x27;</span></span></span><br><span class="line"></span><br><span class="line">iex (new-object net.webclient).downloadstring(&#x27;https://get.scoop.sh&#x27;)</span><br></pre></td></tr></table></figure><ul><li>执行<code>scoop help</code>查看是否安装成功</li></ul><h3 id="4-基础使用"><a href="#4-基础使用" class="headerlink" title="4.基础使用"></a>4.基础使用</h3><ul><li>  <code>scoop search &lt;app&gt;</code> - 搜索软件</li><li>  <code>scoop install &lt;app&gt;</code> - 安装软件</li><li>  <code>scoop info &lt;app&gt;</code> - 查看软件详细信息</li><li>  <code>scoop list</code> - 查看已安装软件</li><li>  <code>scoop uninstall &lt;app&gt;</code> - 卸载软件，<code>-p</code>删除配置文件。</li><li>  <code>scoop update</code> - 更新 scoop 本体和软件列表</li><li>  <code>scoop update &lt;app&gt;</code> - 更新指定软件</li><li>  <code>scoop update *</code> - 更新所有已安装的软件</li><li>  <code>scoop checkup</code> - 检查 scoop 的问题并给出解决问题的建议</li><li>  <code>scoop help</code> - 查看命令列表</li><li>  <code>scoop help &lt;command&gt;</code> - 查看命令帮助说明</li></ul><h3 id="5-进阶使用"><a href="#5-进阶使用" class="headerlink" title="5.进阶使用"></a>5.进阶使用</h3><h4 id="5-1-添加常用的bucket"><a href="#5-1-添加常用的bucket" class="headerlink" title="5.1.添加常用的bucket"></a>5.1.添加常用的bucket</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">scoop bucket add extras</span><br><span class="line">scoop bucket add Java</span><br><span class="line">scoop bucket add versions</span><br><span class="line">scoop bucket add Ash258 &#x27;https://github.com/Ash258/Scoop-Ash258.git&#x27;</span><br><span class="line">scoop bucket add dorado &#x27;https://github.com/h404bi/dorado&#x27;</span><br><span class="line">scoop bucket add iszy &#x27;https://github.com/ZvonimirSun/scoop-iszy&#x27;</span><br><span class="line">scoop bucket add dodorz &#x27;https://github.com/dodorz/scoop-bucket&#x27;</span><br><span class="line">scoop bucket add rasa &#x27;https://github.com/rasa/scoops&#x27;</span><br><span class="line">scoop bucket add scoopet &#x27;https://github.com/integzz/scoopet&#x27;</span><br><span class="line">scoop bucket add raresoft &#x27;https://github.com/L-Trump/scoop-raresoft&#x27;</span><br><span class="line">scoop bucket add main &#x27;https://github.com/ScoopInstaller/Main&#x27;</span><br><span class="line">scoop bucket add games &#x27;https://github.com/Calinou/scoop-games&#x27;</span><br><span class="line">scoop bucket add jetbrains &#x27;https://github.com/Ash258/Scoop-JetBrains&#x27;</span><br></pre></td></tr></table></figure><h4 id="5-2-清理安装包缓存"><a href="#5-2-清理安装包缓存" class="headerlink" title="5.2.清理安装包缓存"></a>5.2.清理安装包缓存</h4><p>Scoop 会保留下载的安装包，对于卸载后又想再安装的情况，不需要重复下载。但长期累积会占用大量的磁盘空间，如果用不到就成了垃圾。这时可以使用 <code>scoop cache</code> 命令来清理。</p><ul><li>  <code>scoop cache show</code> - 显示安装包缓存</li><li>  <code>scoop cache rm &lt;app&gt;</code> - 删除指定应用的安装包缓存</li><li>  <code>scoop cache rm *</code> - 删除所有的安装包缓存</li></ul><p>如果你不希望安装和更新软件时保留安装包缓存，可以加上 <code>-k</code> 或 <code>--no-cache</code> 选项来禁用缓存：(可能会有报错)</p><ul><li>  <code>scoop install -k &lt;app&gt;</code></li><li>  <code>scoop update -k *</code></li></ul><h4 id="5-3-删除旧版本软件"><a href="#5-3-删除旧版本软件" class="headerlink" title="5.3.删除旧版本软件"></a>5.3.删除旧版本软件</h4><p>当软件被更新后 Scoop 还会保留软件的旧版本，更新软件后可以通过 <code>scoop cleanup</code> 命令进行删除。</p><ul><li>  <code>scoop cleanup &lt;app&gt;</code> - 删除指定软件的旧版本</li><li>  <code>scoop cleanup *</code> - 删除所有软件的旧版本</li></ul><p>与安装软件一样，删除旧版本软件的同时也可以清理安装包缓存，同样是加上 <code>-k</code> 选项。</p><ul><li>  <code>scoop cleanup -k &lt;app&gt;</code> - 删除指定软件的旧版本并清除安装包缓存</li><li>  <code>scoop cleanup -k *</code> - 删除所有软件的旧版本并清除安装包缓存</li></ul><h4 id="5-4-全局安装-一般用于环境安装"><a href="#5-4-全局安装-一般用于环境安装" class="headerlink" title="5.4.全局安装(一般用于环境安装)"></a>5.4.全局安装(一般用于环境安装)</h4><p>全局安装就是给系统中的所有用户都安装，且环境变量是系统变量，对于需要设置系统变量的一些软件就需要全局安装，比如 Node.js、Python，否则某些情况会出现无法找到命令的问题。</p><p>使用 <code>scoop install &lt;app&gt;</code> 命令加上 <code>-g</code> 或 <code>--global</code> 选项可对软件进行全局安装，全局安装需要管理员权限，所以需要提前以管理员权限运行的 PowerShell 。更简单的方式是先安装 <code>sudo</code>，然后用 <code>sudo</code> 命令来提权执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scoop install sudo</span><br><span class="line">sudo scoop install -g &lt;app&gt;</span><br></pre></td></tr></table></figure><p>使用 <code>scoop list</code> 命令查看已装软件时，全局安装的软件末尾会有 <code>*global*</code> 标志。</p><p>此外对于全局软件的更新和卸载等其它操作，都需要加上 <code>-g</code> 选项：</p><ul><li>  <code>sudo scoop update -g *</code> - 更新所有软件（且包含全局软件）</li><li>  <code>sudo scoop uninstall -g &lt;app&gt;</code> - 卸载全局软件</li><li>  <code>sudo scoop uninstall -gp &lt;app&gt;</code> - 卸载全局软件（并删除配置文件）</li><li>  <code>sudo scoop cleanup -g *</code> - 删除所有全局软件的旧版本</li><li>  <code>sudo scoop cleanup -gk *</code> - 删除所有全局软件的旧版本（并清除安装包包缓存）</li></ul><h4 id="5-5-代理设置"><a href="#5-5-代理设置" class="headerlink" title="5.5.代理设置"></a>5.5.代理设置</h4><p>Scoop 默认使用系统代理，手动指定代理，可以输入下面的命令。需要注意的是只支持 http 协议。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop config proxy localhost:端口号</span><br></pre></td></tr></table></figure><blockquote><p>设置完可以通过<code>scoop config proxy</code>查看。</p></blockquote><p>如果你想取消代理，那么输入下面的命令，这将会恢复使用系统代理。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop config rm proxy</span><br></pre></td></tr></table></figure><h4 id="5-6-常用命令总结"><a href="#5-6-常用命令总结" class="headerlink" title="5.6.常用命令总结"></a>5.6.常用命令总结</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 安装软件 ##</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 非全局安装（并禁止安装包缓存）</span></span><br><span class="line">scoop install -k &lt;app&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 全局安装（并禁止安装包缓存）</span></span><br><span class="line">sudo scoop install -gk &lt;app&gt;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 卸载软件 ##</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 卸载非全局软件（并删除配置文件）</span></span><br><span class="line">scoop uninstall -p &lt;app&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 卸载全局软件（并删除配置文件）</span></span><br><span class="line">sudo scoop uninstall -gp &lt;app&gt;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 更新软件 ##</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新所有非全局软件（并禁止安装包缓存）</span></span><br><span class="line">scoop update -k *</span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新所有软件（并禁止安装包缓存）</span></span><br><span class="line">sudo scoop update -gk *</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 垃圾清理 ##</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除所有旧版本非全局软件（并删除软件包缓存）</span></span><br><span class="line">scoop cleanup -k *</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除所有旧版本软件（并删除软件包缓存）</span></span><br><span class="line">sudo scoop cleanup -gk *</span><br><span class="line"><span class="meta">#</span><span class="bash"> 清除软件包缓存</span></span><br><span class="line">scoop cache rm *</span><br></pre></td></tr></table></figure><h4 id="5-7-重装系统后如何恢复使用Scoop"><a href="#5-7-重装系统后如何恢复使用Scoop" class="headerlink" title="5.7.重装系统后如何恢复使用Scoop"></a>5.7.重装系统后如何恢复使用Scoop</h4><p>重装系统之后, 如果把原有的scoop文件夹粘贴回去user文件夹,然后在<code>powershell</code>中再次输入安装命令,会得到一个<strong>Scoop is already installed</strong>错误,要想正确恢复scoop,根据<a href="https://github.com/lukesampson/scoop/issues/2894">官方回答</a>,请按照以下步骤:</p><ol><li><p>重装系统之前,先完整复制用户目录下的scoop文件夹到别的地方</p></li><li><p>重装系统之后,将scoop文件夹粘贴回去用户目录</p></li><li><p>在环境变量设置中,新建一个用户变量,名字为SCOOP,值为当前scoop文件夹的地址,即:<br><code>C:\Users\xxxx\scoop</code></p></li><li><p>允许脚本执行:<br><code>set-executionpolicy remotesigned -s currentuser</code></p></li><li><p>双击用户变量中的path,新建一个路径,填入 :<br><code>%SCOOP%\shims</code></p></li><li><p>管理员权限powershell中运行:<br><code>scoop reset *</code></p></li></ol><p>即可恢复所有软件的正常使用.</p><h3 id="6-尾巴"><a href="#6-尾巴" class="headerlink" title="6.尾巴"></a>6.尾巴</h3><ul><li><a href="https://scoop.netlify.app/">Scoop</a></li><li><a href="https://github.com/lukesampson/scoop/wiki">Home · lukesampson/scoop Wiki · GitHub</a></li></ul><hr><h2 id="Chocolatey"><a href="#Chocolatey" class="headerlink" title="Chocolatey"></a>Chocolatey</h2><h3 id="1-关于Chocolatey"><a href="#1-关于Chocolatey" class="headerlink" title="1.关于Chocolatey"></a>1.关于Chocolatey</h3><p><a href="https://chocolatey.org/">Chocolatey</a>是Windows平台上的包管理器，通过它可以集中安装、管理、更新各种各样的软件。类似<a href="https://github.com/lukesampson/scoop">Scoop</a>，相比而言Scoop对环境的污染较小（软件都安装在<code>C:\Users\xxx\scoop\apps</code>下），Chocolatey安装的包会在默认路径下，也就是<code>C:\Program Files</code>目录下。故将Chocolatey作为备选项。</p><h3 id="2-Chocolatey的安装-建议使用PowerShell"><a href="#2-Chocolatey的安装-建议使用PowerShell" class="headerlink" title="2.Chocolatey的安装(建议使用PowerShell)"></a>2.Chocolatey的安装(建议使用PowerShell)</h3><p>考虑到这篇文章的信息会过时，安装的详细信息可依照<a href="https://chocolatey.org/install">官方指示</a>。</p><ul><li>cmd(管理员权限运行)</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@”%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe” -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command “iex ((New-Object System.Net.WebClient).DownloadString(‘https://chocolatey.org/install.ps1’))” &amp;&amp; SET “PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin”</span><br></pre></td></tr></table></figure><ul><li>Windows PowerShell(管理员权限运行)</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(&#x27;https://community.chocolatey.org/install.ps1&#x27;))</span><br></pre></td></tr></table></figure><ul><li>执行<code>choco</code>查看是否安装成功</li></ul><h3 id="3-常用命令"><a href="#3-常用命令" class="headerlink" title="3.常用命令"></a>3.常用命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#安装包</span></span></span><br><span class="line">choco install &lt;package&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash">如果使用 -version 可以指定版本</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#查看安装的包</span></span></span><br><span class="line">choco list -l</span><br><span class="line">choco list -local-only</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#包的更新，包括chocolatey本身</span></span></span><br><span class="line">choco upgrade &lt;packagename&gt; or all</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#包的卸载</span></span></span><br><span class="line">choco uninstall &lt;packagename&gt;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#包的搜索(可在官网先搜索(https://community.chocolatey.org/packages))</span></span></span><br><span class="line">choco search &lt;packagename&gt;</span><br></pre></td></tr></table></figure><h3 id="4-尾巴"><a href="#4-尾巴" class="headerlink" title="4.尾巴"></a>4.尾巴</h3><p>  国内建议使用Scoop（限速），Chocolatey已无法访问，若使用黑科技，可两者结合使用。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于我思故我在</title>
      <link href="/posts/f729cd9d.html"/>
      <url>/posts/f729cd9d.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Je pense, donc je suis<br>-René Descartes</p></blockquote><h3 id="1-什么是我思故我在"><a href="#1-什么是我思故我在" class="headerlink" title="1.什么是我思故我在"></a>1.什么是我思故我在</h3><p>著名哲学家笛卡尔提出了一个广为人知的命题：“<a href="https://baike.baidu.com/item/%E6%88%91%E6%80%9D%E6%95%85%E6%88%91%E5%9C%A8/341083">我思故我在</a>”，而他提出这句命题的目的，是在对一切事物（过往、现成的理论体系乃至思维前提）进行普遍怀疑的基础上，探寻那个无法被怀疑的根本依据和基本前提。</p><p>笛卡尔这句话最普遍的解释：“我唯一可以确定的事就是我自己思想的存在,因为当我怀疑其他时，我无法同时怀疑我本身的思想”。比较权威的一种解释是：“我无法否认自己的存在，因为当我否认、怀疑时，我就已经存在。”因为我在思考在怀疑的时候，肯定有一个执行“思考”的“思考者”，这个作为主体的“我”是不容怀疑的，这个我并非广延的肉体的“我”，而是思维者的我。所以，否认自己的存在是自相矛盾的。</p><h3 id="2-理解的局限"><a href="#2-理解的局限" class="headerlink" title="2.理解的局限"></a>2.理解的局限</h3><p>“我思故我在”作为启迪智慧的著名思想命题，在我国高中政治教科书内被视为“主观唯心主义”的观点之一，也被某些唯物论者长期批判。其实有很重要的一点，许多人或许没有意识到，那就是：<strong>学习哲学的过程中，不要先存以马克思主义的见解而去看待评价哲学史上的一切哲学。</strong></p><p>哲学更多的是以理论的方式进行表征的时代精神的精华，以理性批判著称的文明活的灵魂。科学性、革命性、批判性不仅仅是马克思主义哲学的特征，也是作为思想武器和理论工具的一切进步哲学所具备的典型特征。可以通过辩证的眼光，以马克思主义哲学中的合理内核和精华部分作为研究方法，去进行哲学理论的研究和批判。或许只有将其正确地灵活运用于实践活动中，才能使其焕发出该有的生机。</p><h3 id="3-存在"><a href="#3-存在" class="headerlink" title="3.存在"></a>3.存在</h3><p>我思故我在实际上是一个深刻的思想实验得到的结果。这个实验的起源是一个问题：这个世界上哪些东西是客观存在的，哪些东西是虚假的幻境？笛卡尔假设世界上有一个魔鬼，可以欺骗我们的感觉，在我们眼前制造实际不存在的幻境（可参照<a href="https://baike.baidu.com/item/%E9%BB%91%E5%AE%A2%E5%B8%9D%E5%9B%BD/34564">黑客帝国</a>理解）。</p><p>那么我们如何才能辨别这个世界上哪些东西是真实的，哪些东西是魔鬼制造的幻觉？思考的结果是，我们所看到的，听到的，感觉到的一切东西，都有可能是魔鬼制作的幻觉，是不存在的假象。甚至我们的身体，也有可能不是真实的。唯一能确定真实存在的，只有一个：那就是“我”的思想，因为“我的思想”是这个思维实验的实施者，而这个思维实验已经进行了，所以“我的思想”必然是真实存在的。这个思想实验是笛卡尔的认识论的基础，也构成了现代哲学的基石。</p><p>黑客帝国，攻壳机动队，盗梦空间，穆赫兰道等，没有笛卡尔或许也不会有这一类电影。</p><h3 id="4-尾巴"><a href="#4-尾巴" class="headerlink" title="4.尾巴"></a>4.尾巴</h3><p><a href="https://baike.baidu.com/item/%E8%B4%B9%E7%B1%B3%E6%82%96%E8%AE%BA/10937023">费米悖论</a>的一种可能性：</p><blockquote><p>我们对于现实的理解是完全错误的。有很多种可能性导致我们对于所有一切的想法都是错的。宇宙可能只是个投影，或者我们就是外星人，而只是被投放在地球做实验小白鼠的。甚至我们和黑客帝国里面一样，只是活在电脑的模拟现实中，而程序员忘了写其它物种的代码。</p></blockquote><p>个人浅见仅供参考。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
