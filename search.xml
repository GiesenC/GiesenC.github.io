<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>尼采哲学思想浅析</title>
      <link href="/posts/f1611687.html"/>
      <url>/posts/f1611687.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2021/10/09/38LEJHqb9rSFkUh.jpg"></p><blockquote><p>What does not kill me, makes me stronger.<br>-Friedrich Nietzsche</p></blockquote><h2 id="尼采哲学思想浅析"><a href="#尼采哲学思想浅析" class="headerlink" title="尼采哲学思想浅析"></a>尼采哲学思想浅析</h2><p><a href="https://baike.baidu.com/item/%E5%BC%97%E9%87%8C%E5%BE%B7%E9%87%8C%E5%B8%8C%C2%B7%E5%A8%81%E5%BB%89%C2%B7%E5%B0%BC%E9%87%87/2630781">尼采</a>批判<a href="https://baike.baidu.com/item/%E4%BA%9A%E7%91%9F%C2%B7%E5%8F%94%E6%9C%AC%E5%8D%8E?fromtitle=%E5%8F%94%E6%9C%AC%E5%8D%8E&fromid=224844">叔本华</a>以自我毁灭为终点的哲学，建立高扬生命活力，倡导个体独特性和创造力的酒神精神，权力意志与酒神精神一脉相承，都是批判颓废和虚无主义的利刃。权力意志引出了永恒轮回，为了能够完全满足权力意志的要求，尼采创造了超人的概念。尼采是一个积极反驳颓废消极的旧传统价值的战士，他强烈批判理性主义和基督教精神对人本性的压抑，倡导生命本能的健康发展。</p><h3 id="1-叔本华与尼采"><a href="#1-叔本华与尼采" class="headerlink" title="1.叔本华与尼采"></a>1.叔本华与尼采</h3><p>尼采所处的时代人们高扬理性关注物质生活，认为理性和科学技术能给人带来终极幸福。这种盲目的乐观主义在遇到叔本华悲观主义哲学之后开始瓦解，叔本华将世界本质看做是生命意志，每个个体都被生命意志支配，个体无法发挥自己的能动性，整个生命受伟大的生命意志的控制，于是摆脱生命意志枷锁唯一的出路就是结束生命。叔本华自身的学术观点不够彻底，但是深受叔本华思想影响的中国清代学者王国维就以亲身经历贯彻了叔本华的思想，他自杀了。尼采深受叔本华的影响，其整个哲学思想的基调也是悲观的，但是他称自己的哲学是积极的虚无主义。尼采将虚无主义分为两类，即积极的虚无主义和消极的虚无主义。缥缈消极的虚无主义是现代人在否认一切价值观念之后表现出的一种无所适从和自我沉沦的状态，一切旧传统价值遭到否认之后处于彻底的价值虚空之中，丧失信仰无人管束做什么都可以的失控儿童。而积极的虚无主义则是指在批判一切传统价值之后重新建立一种全新的价值体系，重塑现代人的价值观，在对一切旧价值感到失望之时，身处绝境却不自暴自弃，起身反抗从而克服虚无主义，这种反抗精神在尼采思想中就表现为高扬生命活力的酒神精神和权力意志。其积极的虚无主义使他认识到生命本身的悲剧性质，即能够自由运用理性思索整个宇宙的人生命却是有限的，有限的生命和无限的宇宙之间的张力使人必须承认自身的悲剧性。但同时，在认识到个人是被伟大的生命意志所控制之后，应该勇敢地面对悲剧的人生，用顽强的生命力来战胜掌控一切的生命意志，这也就是尼采与叔本华最大的区别所在。</p><h3 id="2-尼采对理性的批判"><a href="#2-尼采对理性的批判" class="headerlink" title="2.尼采对理性的批判"></a>2.尼采对理性的批判</h3><p>尼采对理性批判的靶子首先对准的是<a href="https://baike.baidu.com/item/%E8%8B%8F%E6%A0%BC%E6%8B%89%E5%BA%95/12690">苏格拉底</a>和<a href="https://baike.baidu.com/item/%E6%9F%8F%E6%8B%89%E5%9B%BE/85471">柏拉图</a>。他强烈地批判苏格拉底以来欧洲历史上的理性主义。苏格拉底提出“知识即美德，无知即罪恶”这句话成为后世理性主义的开端，这里知识就是理性的代表，苏格拉底认为只有以理性的态度对外部世界和内在心灵进行分析、归纳和总结，最终才能得出对人类有用的知识。而缺乏理性能力的人则是个缺乏善的人，也就是罪恶的人。在此，理性与本能被对立起来，而且从此以后奠定了理性相对本能具有绝对优势的地位。而尼采认为理性破坏了人的生命力基础，削弱了人的本能，因此要解放人的生命力就必须反对理性抬高意志呼唤本能。柏拉图认为，现实世界并非永远存在的，而是由一个神或造物主以善的理念为指导，以理念世界为模型，将各种理念模式加诸原始混沌的“物质”文明而创造出来的。因此现实世界都是不完善、不完美的，它之所以存在完全是由于对理念世界和善的世界的分有和模仿，并不是真实的世界。在此种思想的基础之上，他对雅典的民主和政治产生了很大反感，于是他按照各种善的理念设计了一套理想的政治制度，企图建立一个理想的国家，即理想国，在理想国中由最具有知识的哲学家来当国王。虽然柏拉图“哲学王”的理想在今天已被人当作不切实际的乌托邦，而且甚至他自己也不相信理想国能够真的实现，不过柏拉图对理性的信任程度由此可见一斑。在尼采看来，柏拉图理想国以及理念世界的思想都是否定现实世界的态度，这种态度应该遭到坚决反对。尼采将这种把希望寄托于彼岸世界的悲观态度归结于理性的罪过。由于理性对感官的绝对地位，人所感触到的一切都不值得相信，感觉世界背后必然存在一个不变不动的世界，是理性构造出这个世界。但这个世界对现实人生起不到任何积极或指导作用。漫长而黑暗的中世纪上演的种种悲剧就是由于人们看到水深火热的现世，受到教会精神控制的广大人民只好将目光投向彼岸世界，对此岸世界采取消极的态度，所有希望寄托于来生和天国，这种推到极致的消极的基督教精神正是对理性设计的彼岸世界过于信任的结果。尼采对理性的批判使得他的整个哲学导向非理性的生命哲学。人们一味向往美好的彼岸世界的生活，于是失去了对现世生活的激情和信心，尼采生命哲学意欲重新激发人们对于生活的热情，人生的唯一意义就是生命，生命应该而且必须取代理性成为人生的目的而不是达到其他目的的手段，颓废的现代精神应该被旺盛的生命力代替。只有高昂的意志和健康的体魄才能战胜人生的悲剧性。因此尼采用酒神精神和权力意志作为自己生存哲学的核心。</p><h3 id="3-酒神精神及权力意志"><a href="#3-酒神精神及权力意志" class="headerlink" title="3.酒神精神及权力意志"></a>3.酒神精神及权力意志</h3><p>权力意志脱胎于<a href="https://baike.baidu.com/item/%E9%85%92%E7%A5%9E%E7%B2%BE%E7%A5%9E">酒神精神</a>，酒神精神指的是沉迷于绘画和音乐中迷狂的状态，这种状态中包含了一种充沛的力量，该力量产生自对艺术的陶醉和悲剧中的自我肯定。尼采的酒神精神具有本体和终极的意义。酒神精神来源于古希腊，丰收之时农民们尽情狂欢，四处游荡，不顾一切道德规范和神圣法则，放纵情欲，恢复人的自然本性，释放人的本能，与宇宙和大自然融为一体。如此摆脱理性和道德的束缚，打破一切法则的精神贯穿了尼采的全部思想。权力意志与酒神精神具有高度的一致性，酒神精神要求人们尽情释放自己的本能与大自然融为一体，权力意志则被尼采认为是万物的本源，不论是人类还是其他的自然事物，权力意志都是本质。因此二者实际上是一体的。权力意志目的在于肯定人生，以强大的生命力来克服一切悲剧。生命的真谛在于从高于自身处吸取一种力量，从而让自身变强大，因此所谓强者不是只追求生命，而是要使自己变得更加强大，不只是活着而且要认真的活着，这种向上的力量使人脱离常人变得更加强大有力，生命力也会永不枯竭充沛丰盈。权力意志的本体论意义在于，意志对外部事物进行支配的力量来源不仅仅在只于外部而且还在自身，因此生命自身会变得越来越强大，生命力消退的论断不攻自破。但同时尼采也认为权力意志意味着剥削，战胜一切比自己更为强大的东西，使别人为自己服役，软弱代表着没有存在的价值，理应被征服和奴役。不能够按照自己的意志行事的人，失去自由的意志的人就理应被奴役。他声称“凡有生命的地方都有权力意志”，“权力意志是完美所揭示的最终事实”上，“权力意志是感情的始基，一切其他感情仅仅是它的扩展”，“生命本身本质上就是掠夺、伤害，对陌生者和弱者的压迫、剥削、严酷，把自己的意志强加于人”。他认为对于不属于自己的东西的欲望和渴望占有一切的权力构成了人生本质。</p><p>伟大的权力意志，不断创造出新的生命，同时也不断毁灭年老的生命，生成和毁灭永恒存在，永不疲倦永不停止。肯定并珍惜每一个独立的意志，抓住每一次能够实现自己的自由意志的机会。独立和自由就是强大，服从和依赖就是软弱，生命的意义不在于活得长久而在于活得强大有力，在于其来源的高贵性和神圣性，以及对平庸的鄙夷。</p><h3 id="4-永恒轮回"><a href="#4-永恒轮回" class="headerlink" title="4.永恒轮回"></a>4.永恒轮回</h3><p>尼采为了打破陈旧的价值观念而提出高扬生命意志的权力意志精神，但他自己追根究底仍旧是一个悲观主义者。他依旧承认生命的残忍、虚伪、诱惑和无意义，即使拥有强大的生命力，短暂的人生也依旧有终结的一天。于是尼采提出了<a href="https://zh.wikipedia.org/wiki/%E6%B0%B8%E6%81%92%E8%BD%AE%E5%9B%9E">永恒轮回</a>的学说，试图用永恒轮回的权力意志将短暂的生命与永恒的灵魂联系起来。尼采并不是第一位提出永恒轮回这个命题的哲学家，古希腊的“晦涩哲人”赫拉克利特就说过，“世界是一团永不熄灭的活火，在一定的分寸上燃烧，在一定的分寸上熄灭。”在这里永恒的活火就是循环往复的生命力的象征，分寸即是道。赫拉克利特早早的就看破了生命的意义，即道的精神：生生不息。但是尼采并不是简单在重复过去陈旧的思想，对他思想的误读使人们认为他是一个机械的循环论者，但事实上他的永恒轮回思想包含着新的内涵。永恒轮回思想的产生是为了克服虚无主义，但是否正因为该思想的出现，人陷入了更深的虚无主义呢？在他看来，人生的每一次短暂或漫长的经历在过去和未来都曾经千百次地发生过，没有新的事件发生，有的只是重复。尼采试图让生命的循环消减短暂生命的悲剧性，但是一次次没有新鲜事物产生的人生难道不会让人感觉无聊和厌烦吗？既然人生的轨迹早已被确定下来，那么奋斗与否，颓废与否还重要吗？尼采本想借永恒轮回来逃避人生的虚无性，但却陷入了更深的虚无。他只能肯定一切虚无，努力战胜一切软弱颓废的精神，努力热爱无意义的人生，在巨大的悲剧中加入一点乐观的色彩。尼采的权力意志和酒神精神本来是为了超越一切虚无和软弱，但永恒轮回却使这种超越变得苍白无力，永恒轮回毁灭了超越的机会，禁锢了生命的所有可能和希望。因此尼采能做的只有承认悲剧，面对悲剧，热爱悲剧，尽管无法战胜它。</p><h3 id="5-超人哲学"><a href="#5-超人哲学" class="headerlink" title="5.超人哲学"></a>5.超人哲学</h3><p><a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E4%BA%BA%E8%AA%AA">超人</a>是尼采的梦想，是尼采为克服虚无主义设立的目标，在整个社会普世价值缺失的时代，尼采不仅要解构形而上学，而且以重建形而上学为己任。他的酒神精神和权力意志都具有形而上的意义，超人就代表建立在酒神精神和权力意志基础上的尼采的价值观。尼采并不相信存在一种适用于整个世界的普遍的价值，他认为价值是由意志确立起来的。每个平凡人都应该依照自己的自由意志确立自己的价值，并且能够按照这种价值去行动。这就是尼采理想中超人应该具备的能力，可惜的是这个要求没有人能够达到。超人的形象仅存在于理论中，它并不是一种新的族群或人向更高级别进化的结果，而是尼采理想中的人。在尼采看来超人的形象恰好在人的内部，潜在于每个人心中。每个常人都是未经雕琢的大理石，借用尼采的手对其进行雕琢就可以使得超人的形象显现出来。生命的超越性是本自具足的，只不过这种超越性在颓废和得过且过不思进取的现代人身上已经看不到了，因此尼采只能将超越颓废人生的希望寄托在超人身上。超人不被陈旧的道德体系束缚，为自己立法，具有旺盛的好奇心、强大的创造力和独特的个性，勇于为自己设立远大的目标并积极实现。但超人本身并不是神，尼采也反对将超人神化，反对英雄主义。因为每一个英雄的存在都意味着他周围聚集着一群愚昧无知盲目崇拜的群氓。尼采将这些与超人相反的群氓称做“末人”，“末人”的特征几乎遍布在每一个现代人身上，他们胆小、猥琐、平庸而且自甘堕落，但他们又自以为是洋洋得意。尼采憎恨“末人”，他试图通过建立超人的形象来起到价值导向的作用，引导末人朝向超人的方向发展，唤醒末人心中具有超越性和奋进心的一面。不过，无论末人是否能够达到超人，尼采的愿景始终激励着有志奋进的人们。 尼采既认为通过人的自我超越能够达到超人的目标，又否认现在、过去、未来会出现超人，超人始终是一个不可能达到的理想。而超人最大的现实意义就是人们越来越多地开始谈论人的超越性，他敦促着人不断超越自身达到更加完善的形象。</p><h2 id="尼采哲学意义及影响"><a href="#尼采哲学意义及影响" class="headerlink" title="尼采哲学意义及影响"></a>尼采哲学意义及影响</h2><p>尼采创立了一种以人为出发点和归宿点的生命哲学，他用实践权力意志的超人肯定和超越“悲剧人生”，引导和启发现代人与拒斥感性、惧怕变化无常生命的独断理性主义、颓废基督教信仰、悲观主义不断抗争，用昂扬生命斗志去塑造完整、幸福的意义人生。</p><p>弗里德里希・威廉・尼采是一位带有转折色彩的生命哲学家，其权力意志思想和超人哲学影响深远，而又备受争议。他确立“悲剧人生”生存意义范式，主张新人生观，强调非理性因素，抨击传统理性主义、基督教道德等，试图为丧失精神家园的人们奠定一个超越“悲剧人生”，追求和创造幸福生活的价值基础。</p><h3 id="1-对于人生的肯定"><a href="#1-对于人生的肯定" class="headerlink" title="1.对于人生的肯定"></a>1.对于人生的肯定</h3><p>叔本华开启了关切人生的生命哲学大门。他断言，世界是意志和表象，意志属于操控人生的意欲力量，有限生命经常因无限意欲无法满足而痛苦不堪，而稍纵即逝的意欲暂时实现又让生命倍添无聊，“所以人生是在痛苦和无聊之间像钟摆一样的来回摆动着”。他认为只有消灭意志和生命，才能从无尽的痛苦和无聊中获得解脱。叔本华悲观主义人生观吸引了尼采的注意力。尼采也认同人生易逝多变、痛苦无奈，但他深信人生的意义来源于肯定而不是否定生命意志，痛苦是幸福人生的兴奋剂。</p><p>尼采借助希腊文明的“悲剧精神”，扬弃和深化叔本华悲观主义。他认为古希腊悲剧文化是唯一能表达真正生命意志的审美文化。尼采强调，悲剧不是悲观主义人生哲学的戏剧表现，而是人艺术地审视人生的途径。它体现了生命本能意志魅力，是日神阿波罗和酒神狄奥尼索斯相结合的产物。它内蕴的“悲剧精神”，真切揭示人生痛苦的悲剧本性，展现人战胜痛苦的悲剧态度和超越历程，充分张扬人性的美和尊严。日神是理性式自我肯定的代表，他在梦境中追求美好人生，不惧怕任何悲苦；酒神是非理性式自我否定的写照，他通过醉态尽情释放受压抑的自然本性和生命意志，消融所有不幸，征服无法抗拒的悲剧命运。尼采对酒神推崇备至，他说“我不知道还有比这希腊的酒神象征更高的象征意义。在其中可以宗教式地感觉到最深邃的生命本能，求生命之未来的本能，求生命之永恒的本能。”酒神虽然在尘世遭遇了众多苦难，但他喜爱生命，用健全生命意志在艰难、禁忌和束缚中不断提升生命价值，构筑自己的幸福。</p><p>尼采肯定悲剧人生，不仅是对叔本华悲观主义和古希腊悲剧文化研究的结果，也是对自身生命深思的结果。尼采本身就是一位典型的坚韧奋发的悲剧式人物。他年幼痛失亲人，青年时期经受失败爱情和背叛友谊的打击，终生饱受病痛的凶猛折磨和孤独的无情缠绕，但他却能以卓越精神意志撑持自己，一直不屈不挠地发挥旺盛创作欲。正如他本人所说，“对生命的肯定，甚至对它最奇妙最困难问题的肯定：在其致力于追求最高形态的过程中，对其生命力之无穷无尽而感到欢欣的生命意志――这就是我说的狄奥尼索斯情态，这就是我所指的达到悲剧诗人心理状态的桥梁……在这个意义上说，我有理由把自己当做第一位悲剧哲学家――也就是说，与悲观主义哲学家完全相反的哲学家。”</p><p>尼采认为，面对神秘莫测的大自然、无法摆脱的灾难、与生俱来的死亡惶恐，渺小个体必然遭遇悲剧性命运，但这种命运不是外在于生命的，而是生命的内在部分，自决的生命可以谱写出坚不可摧毁的悲剧人生乐章。肯定生命意味着欢迎快乐，以及毫无保留地接纳悲苦忧伤本身。每个人都用赞赏的态度“承认生命的最恐怖和最可疑的特性”，在任何危险和毁灭中敢于承担，凸显强劲生命力量的丰富活力和个性超越，体验生命的骄傲、绵延不绝。</p><h3 id="2-对于人生的超越"><a href="#2-对于人生的超越" class="headerlink" title="2.对于人生的超越"></a>2.对于人生的超越</h3><p>尼采肯定悲剧人生的目的在于更好地超越，肯定给超越悲剧人生提供了磨炼和提升的养分。他宣布“上帝死了”，勇敢地用超人和权力意志，直面弥达斯国王传说中的人类绝望之境：人最好最妙的东西是不要降生，次好的东西是立刻死亡。攻破这种绝望堡垒的最好武器是不断创造和超越，充满权力意志的超人像古希腊悲剧英雄那样，在曲折多难又短暂可悲的人世间驰骋，既享受今生肉体的欢乐，又追求凤凰涅的永垂不朽，开拓波澜壮阔的生命意义和永恒幸福。</p><p>尼采塑造超人形象，不是树立替代上帝的新偶像。超人是反基督教、反宿命论、反旧世界的非理性主义者、批判主义者、创造主义者。尼采指出，超人诞生，经历了“精神三变”：由坚忍负重的骆驼，变成积极攫取自由的狮子，最后成为永恒更新的赤子，获得了赫拉克利特辩证法般的永恒崇高。超人与缺乏个性、创造性的碌碌无为的庸众不同，它是大地的意义，有着更强壮、更敏锐、更快乐的超凡胆量和健康。狄奥尼索斯、查拉斯图特拉都是尼采心目中的超人代表。超人这一理想人格要表达的不是具体的个人，而是一种人生态度和处世精神，他立足于现实，热爱生活，主宰自己命运，发挥权力意志，自我创造。超人的诞生，是给世人演绎生命的美丽可贵。生命既然存在着，就得赋予它某种意义和幸福，这种意义不是灭绝其身，而在于焕发生命激情和冲力，与不幸命运抗争，超越生活的坎坷曲折，完成其灵魂不朽的悲剧创作。超人健康强劲有力，坚忍不拔，自主创造和超越，不断升华生命，是因为“超人不是那种超级人，超人不是人，不是个体，而是一种活动的名称。这种活动有着超越出去和回归自我的一般性结构。”他的超越行动的动力因来自其固有的权力意志。所谓权力意志，“不是政治意义上的政治暴力和权势，而是文化意义上体现在超人身上的生命力、创造力、支配力。”</p><p>第一，权力意志精神是一种旺盛的生命本能。生命建立在肉体基础上，“信仰肉体比信仰精神具有根本意义”，“要以肉体为准绳”。灵魂不是生命的主宰者，它只是肉体的一部分。丰富完整的生命包括思想、欲望，肉体的冲动、激情不是罪恶，而是独特的创造性人生的最宝贵财富。尼采极力反对理性至上原则，猛烈抨击宿命论和基督教给人生进程涂上的浓烈悲观色彩。他用超人的抗争人生，去反驳基督教“蔑视生命”、“侮辱肉体”。超人具有来源于生命冲动的巨大权力意志，这属于人的情感意志和心理本能活动，与理性主义相对，绝不屈从理性安排。凡有生命的地方，都要通过权力意志表现出生命的存在和力量。他认为苏格拉底以来的理性主义造就了麻木不仁的人生看客和过客，他们的本能欲望和权力意志处处受怜悯、同情的奴隶道德压抑。而权力意志是人的生命本质，它使人成为自己和世界的主人，不受外来的、凌驾于人之上的非人力量支配。在权力意志的推动之，人不仅是单纯地求生存，而是追求生命意志带来的快感和幸福价值，他总能深信“这曾是人生？好罢，再来一次！”健全的生命本能渴望最大限度的权力感，敢于承受命运，进而成为自身的命运，通过不断表现自我、释放生存激情、超越自我的过程，充分展露生命本质力量，以及五彩缤纷的人生发展前景。</p><p>第二，权力意志精神是不屈不挠的生命超越。超人的权力意志是一种生命意志，更是一种超越生命的力量。尼采强调人生是一个不断创造、超越的过程。他在《查拉斯图特拉如是说》的序言篇写道：“我教你们什么是超人，人类是应当被超越的。你们曾作怎样的努力去超越他呢？直到现在，一切生物都创造了高出于自己的种类，难道你们愿意做这大潮流的回浪，难道你们愿意返于兽类，不肯超越人类吗？”“人类之伟大之处，正在于它是一座桥梁而不是一个目的，人类之可爱之处，正在于它是一个过程与一个没落。”在尼采看来，人生是一座充满荆棘，持续向前发展，不断超越过去，通向未来的桥梁。人可以通过创造性活动，实现自我肯定和超越。他指出，传统理性主义和基督教是摧残生命的危险力量，前者使人缺乏超越热情，后者更是损害和消融了人的创造力。超人是具有创造性的自由人，在任何情况下都有确立或重新确立自己目的和行动的自由。他追求的不仅是生命本身，更有超越生命之上的意义。他要发挥生命的内在力量，把意志力和行动力输入世界，创造一个属人的价值体系，以显示生命存在的价值和幸福。</p><h3 id="3-对于人生的启示"><a href="#3-对于人生的启示" class="headerlink" title="3.对于人生的启示"></a>3.对于人生的启示</h3><p>20世纪初，尼采的权力意志思想在中国产生了共鸣。它包含的刚毅进取，积极创造的精神鼓舞着人们不畏艰险和侵略压迫，敢于打破封建传统，争取民族独立和解放。20世纪80年代，尼采悲剧人生倡导个人奋斗、独立创新和超越自我的精神又在国内产生了积极影响。它鼓励人们奋发图强，敢闯敢做，尊重和善待生命，拼搏和享受人生。今天，现代化事业使物质生活水平不断提高，人们憧憬幸福人生的实现，却发现幸福与财富增加没有必然的正相关联系。低层次物质性需要的争取和满足容易使幸福产生边际效用递减效应，为了获得一种持续和递增的幸福，人们需要超人那样的创造、超越意识和毅力，把内在权力意志投入实现和超越自我中。</p><p>其次，悲剧人生理论的乐观主义人生观视痛苦、灾难为生命意义和幸福的重要内容。人类中心主义、享乐主义、物欲主义风靡全球，孕育了自私自利的“消费人”。人们习惯舒缓、享受，又孤独、脆弱，容易自暴自弃，甚至草率结束生命。当恐惧、无望、疾病、痛苦、死亡来临时，人们没有控诉、拒绝或抗争，只有哀叹或默默忍受或匆匆离开尘世。而超人面对命运的捉弄时，也无奈、惶惑不解，但并没失去其抗争力和创造力，他敢于接受命运挑战，做生命强者。悲剧人生把冒险和犯难作为健康人生和快乐生活的最大享受，幸福人生不是回避痛苦，而是需要痛苦的历练。尼采宣称，“我是按照意志对反抗、痛苦和折磨的忍受程度来评价意志力的；我不把生命的恶劣和痛苦的特征作为谴责生命的借口，而是希望生命有一天会变得比过去更加恶劣和痛苦…”。</p><p>人生许多固有的苦难可通过抗争、超越来克服，即使抗争失败，也还可以引领生命进入另一种重建人格和深层生活方式的可能。没有抗争和超越的生和死都缺乏幸福的内容和意义。人生存着绝不是人活着的充足理由，痛苦和死亡也绝不是对生活的否定。面对人生的一切不幸和种种限制，以及非人格化的工业社会导致的生命异化，人们要有奋起自救的勇气，在早已设定起点和终点生命之线中，不是延长这根生命线，而是不断去抗争和超越，让它变得更宽广、更有色彩和更幸福。</p><h3 id="4-对于世界的影响"><a href="#4-对于世界的影响" class="headerlink" title="4.对于世界的影响"></a>4.对于世界的影响</h3><p>尼采的影响是多方面的，特别在哲学和文学的领域里。现代西方哲学主流派别之一的存在主义，便与尼采思想有密切的渊源。考夫曼说：在存在主义的演进过程中，尼采占着中心的席位：如果没有尼采，那么雅斯培、海德格和沙特是不可思议的，并且，卡缪《薛西弗斯的神话》的结论，听来也像是尼采遥远的回音。卡缪也曾经详细地写过尼采。在沙特的主要哲学著作《存在与空无》中，尼采是第一个被提到的名字。雅斯培撰写过两大册有关他的书籍，且在其他的几本著作中，也详细讨论过；而海德格，在他后期的作品中，比雅斯培更为重视尼采。”是的，存在主义哲学影响力最大的这几个人之中，海德格写过四本论述尼采的著作，而沙特虽然没有发表过有关尼采的专着，但他哲学的基础，却始于尼采宣称的“上帝已死”的命题。沙特在论人文主义的演讲中，明确地表示：“存在主义不是别的，只是一种企图从一种前后一致的无神论的观点去获得所有结果的看法。”沙特从无神论中所获得的最重要的结论便是：如果没有上帝，就没有任何普遍必然的道德律和绝对确定价值观念，事实上，这就是尼采的声音。</p><p>尽管现代的存在主义，一方面是以基于异常的宗教体验而明确意识到自己之“存在”的巴斯噶或齐克果为其思想源流，但却产生出另一种倾向，即逐渐远离了巴斯噶或齐克果所指向的目标——与基督在人格上的交会，而与反基督的尼采发生了共鸣，从而探索无神性的深度。在无神论方面，尼采宣扬“上帝已死”，否定传统以上帝为创造泉源及准则的价值观，建立以人为中心的价值观，这对西方思想界引起了很大的冲击。尼采推崇希腊悲剧人生观，贬抑基督教之奴隶道德观，进而对西方传统文化进行“一切价值的转换”，这些论题对当代哲学与文学都有很大的启发，对于存在主义影响尤大。</p><p>再者，纵观尼采的生命哲学，他在西方崇尚“超越世界”的玄学传统的主流思想中，是独树一帜的。其发布“上帝已死”的讯息，宣称对传统文化（基督教文化）进行“一切价值重估”，以及对柏拉图以来二元论世界观的否定，并指责传统哲学家注入太多神学的血液，这在西方文化史上，具有深刻的意义。尼采诚然是个“精神界之战士”（借用鲁迅的话）。他的作品似乎预告资本主义种种恶质化的弊害：拜金主义、军国主义、以及现代化生活中的庸俗主义，即使在现在读来，仍是如此动人心弦。他那浪漫主义代表作《查拉图斯特拉如是说》洋溢着热肠孤愤、发扬蹈历之激情，带给人无比的共鸣与启发，的确是“给予人类一项伟大的赠礼。</p><p>尼采是位举世称着的反传统主义者，但他对于文化传统，并非简单化的全盘否定。他强烈的批判基督教文化而极力推崇古希腊的悲剧文化，并从悲剧文化的戴欧尼索士因素中发展出他的创造力的意志哲学。尼采对于西方传统价值的反思、对现在庸俗文化的反省，以及从古典文化中吸取创作的动力与泉源。尼采激烈的怀疑主义使他对基督教的一些基本教义发生了怀疑。在《人性的、太人性的》一书中表现了下列主要观点。他认为世界上不存在绝对的价值，没有超然的真理标准与圣戒；超人的本性之间没有绝对的对立。善与恶都是在人类出现后才存在的，并且在相互的对立依存中发展。</p><p>以上观点源于互联网收集，略带个人主观色彩，可作为认知理解的一个参考方向。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基于WSL搭建Hadoop伪分布式</title>
      <link href="/posts/4a3195fd.html"/>
      <url>/posts/4a3195fd.html</url>
      
        <content type="html"><![CDATA[<h2 id="WSL使用指南"><a href="#WSL使用指南" class="headerlink" title="WSL使用指南"></a>WSL使用指南</h2><h3 id="1-开启WSL"><a href="#1-开启WSL" class="headerlink" title="1.开启WSL"></a>1.开启WSL</h3><p>开启WSL第一步是 <code>启动Windows Subsystem for Linux功能</code>，有两种方法实现。</p><h4 id="1-1-通过命令行"><a href="#1-1-通过命令行" class="headerlink" title="1.1.通过命令行"></a>1.1.通过命令行</h4><p>以 <code>管理员</code>身份运行 <code>PowerShell</code>。右键单击屏幕左下角 <code>“开始”</code>菜单，找到“Windows PowerShell(管理员)”并运行。</p><p>执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux</span><br></pre></td></tr></table></figure><p>安装完成后重启即可</p><h4 id="1-2-通过控制面板"><a href="#1-2-通过控制面板" class="headerlink" title="1.2.通过控制面板"></a>1.2.通过控制面板</h4><p>打开控制面板——“程序”——“启用或关闭Windows功能”——勾选“适用于Linux的Windows子系统”——“确定”。</p><p>点击确定后重启即可</p><p><img src="https://i.loli.net/2021/10/10/vVYbjdyt8Mnlk1C.jpg"></p><h3 id="2-安装LINUX子系统"><a href="#2-安装LINUX子系统" class="headerlink" title="2.安装LINUX子系统"></a>2.安装LINUX子系统</h3><p>推荐打开微软商店搜索”LINUX”，点击安装Ubuntu</p><p><img src="https://i.loli.net/2021/10/10/8HdEDyAp6MsSfZR.jpg"></p><ul><li><p>可安装多种Linux发行版，不冲突。</p></li><li><p>安装完成后设置用户名和输入密码（两次）即可</p></li></ul><h3 id="3-启动WSL"><a href="#3-启动WSL" class="headerlink" title="3.启动WSL"></a>3.启动WSL</h3><ol><li>直接从开始菜单点击图标运行</li><li>启动CMD，输入<code>bash</code>即可运行</li></ol><h3 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4.注意事项"></a>4.注意事项</h3><h4 id="4-1-端口冲突（备用）"><a href="#4-1-端口冲突（备用）" class="headerlink" title="4.1.端口冲突（备用）"></a>4.1.端口冲突（备用）</h4><p>WSL和Win10共享同一套端口，如果出现两者监听同一个端口的情况，Windows主系统的程序拥有更高的优先级。可以考虑修改WSL中SSH的监听端口。</p><p>修改/etc/ssh/sshd_config配置中相应条目如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Port 2222   # 将22改为2222</span><br></pre></td></tr></table></figure><p>重启sshd服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service ssh restart</span><br></pre></td></tr></table></figure><h4 id="4-2-文件系统"><a href="#4-2-文件系统" class="headerlink" title="4.2.文件系统"></a>4.2.文件系统</h4><p>WSL和Windows主系统之间的文件系统可以互相访问</p><p>Linux发行版的数据文件夹在 <code>C:\Users\&#123;你的用户名&#125;\AppData\Local\Packages\&#123;Linux发行版包名&#125;\LocalState\rootfs</code>路径内，<code>rootfs</code>文件夹为WSL的根目录。</p><p>也可直接映射在此电脑中：</p><ol><li>在win10的资源管理器内输入<code>\\wsl$</code></li><li>右键映射为网络驱动器即可在此电脑中看到</li></ol><p><strong>注意：在Windows下对WSL文件修改可能会造成权限错误</strong></p><h3 id="5-尾巴"><a href="#5-尾巴" class="headerlink" title="5.尾巴"></a>5.尾巴</h3><p>更多信息可参阅微软官方文档</p><ul><li><a href="https://docs.microsoft.com/en-us/windows/wsl/install">Install WSL | Microsoft Docs</a></li></ul><hr><h2 id="Hadoop伪分布式配置"><a href="#Hadoop伪分布式配置" class="headerlink" title="Hadoop伪分布式配置"></a>Hadoop伪分布式配置</h2><h3 id="1-JDK配置"><a href="#1-JDK配置" class="headerlink" title="1.JDK配置"></a>1.JDK配置</h3><p>进入<a href="https://www.oracle.com/java/technologies/downloads/#java8">Java Downloads | Oracle</a>下载页面。（建议使用JDK1.8）</p><p>根据Linux系统的位数选择要下载的压缩包。</p><p>执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getconf LONG_BIT</span><br></pre></td></tr></table></figure><p>如果显示32，则是23位的Linux系统，如果显示64，则是64位的Linux系统。这里是64位的，所以下载<strong>Linux x64</strong></p><p>下载需要注册Oracle的账号，注册邮箱推荐<a href="https://mail.163.com/">网易邮箱</a>。</p><p><strong>注：JDK8或者JDK1.8是由于自从JDK1.5/JDK5命名方式改变后遗留的新旧命令方式问题。所以JDK8和JDK1.8等价。</strong></p><h4 id="1-1-解压安装"><a href="#1-1-解压安装" class="headerlink" title="1.1.解压安装"></a>1.1.解压安装</h4><ol><li><p>创建安装目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/local/java/</span><br></pre></td></tr></table></figure></li><li><p>将压缩包直接移动到该目录下</p></li><li><p>解压缩到安装目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -zxvf jdk-8u231-linux-x64.tar.gz -C /usr/local/java/ #注意下载的jdk版本</span><br></pre></td></tr></table></figure></li><li><p>解压缩以后，进入/usr/local/java/目录后，你会发现多一个目录，它就是JDK所在目录。JDK版本不同，这个目录名有所不同，这里是<strong>jdk1.8.0_231</strong>，那么完整路径就是**/usr/local/java/jdk1.8.0_231**，记住这个路径，下面会用到。</p></li></ol><h4 id="1-2-设置环境变量"><a href="#1-2-设置环境变量" class="headerlink" title="1.2.设置环境变量"></a>1.2.设置环境变量</h4><ol><li><p>编辑变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim ~/.bashrc</span><br></pre></td></tr></table></figure></li><li><p>编辑模式下输入配置的环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/java/jdk1.8.0_231</span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib</span><br><span class="line">export PATH=.:$&#123;JAVA_HOME&#125;/bin:$PATH</span><br></pre></td></tr></table></figure></li><li><p>使环境变量生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/bashrc</span><br></pre></td></tr></table></figure></li><li><p>查看Java版本信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure></li><li><p>得到输出结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java version &quot;1.8.0_231&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_231-b12)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.231-b12, mixed mode)</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-SSH免密配置"><a href="#2-SSH免密配置" class="headerlink" title="2.SSH免密配置"></a>2.SSH免密配置</h3><ol><li><p>Ubuntu已经自带了SSH client，还需要安装<strong>SSH server</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure></li><li><p>手动启动<strong>sshd</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service ssh restart</span><br></pre></td></tr></table></figure></li><li><p>接下来进入ssh配置文件并修改一些设置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure></li><li><p>允许root用户以任何认证方式登录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ListenAddress 0.0.0.0</span><br><span class="line">PermitRootLogin yes</span><br></pre></td></tr></table></figure></li><li><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh localhost</span><br></pre></td></tr></table></figure></li><li><p>启动后，可以通过如下命令查看服务是否正确启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -e | grep ssh</span><br></pre></td></tr></table></figure></li><li><p>输出以下结果说明ssh启动成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">286 ? 00:00:00 sshd  </span><br><span class="line">699 tty1 00:00:00 ssh  </span><br><span class="line">700 ? 00:00:00 sshd  </span><br><span class="line">768 ? 00:00:00 sshd</span><br></pre></td></tr></table></figure></li></ol><h4 id="2-1-ssh-localhost报错处理"><a href="#2-1-ssh-localhost报错处理" class="headerlink" title="2.1.ssh localhost报错处理"></a>2.1.ssh localhost报错处理</h4><p>如果遇到诸如<code>ssh: connect to host localhost port 22: Connection refused</code>之类的错误，请运行以下命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ssh</span><br></pre></td></tr></table></figure><p>安装成功后重新启动ssh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service ssh restart</span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh localhost</span><br></pre></td></tr></table></figure><p>连接成功则输出系统信息</p><h3 id="3-Hadoop配置"><a href="#3-Hadoop配置" class="headerlink" title="3.Hadoop配置"></a>3.Hadoop配置</h3><h4 id="3-1-下载Hadoop"><a href="#3-1-下载Hadoop" class="headerlink" title="3.1.下载Hadoop"></a>3.1.下载Hadoop</h4><ol><li><p>从<a href="https://hadoop.apache.org/releases.html">Apache Hadoop</a>下载hadoop-3.2.2.tar.gz直接拖拽到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\用户名\AppData\Local\Packages\CanonicalGroupLimited.Ubuntu18.04onWindows_79rhkp1fndgsc\LocalState\rootfs\usr\local</span><br></pre></td></tr></table></figure></li><li><p>重启电脑后在WSL终端<code>/user/local/</code>下执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -xvf hadoop-3.2.2.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>查看Hadoop是否安装成功，在<code>/usr/local/hadoop-3.2.2</code>目录下执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/hadoop version</span><br></pre></td></tr></table></figure></li><li><p>得到输出结果<br><img src="https://i.loli.net/2021/10/11/l2BLUmjKJPOZWsg.png"></p></li><li><p>给与读写权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod -R 777 /usr/local/hadoop-3.2.2</span><br></pre></td></tr></table></figure></li></ol><h4 id="3-2-配置伪分布式环境"><a href="#3-2-配置伪分布式环境" class="headerlink" title="3.2.配置伪分布式环境"></a>3.2.配置伪分布式环境</h4><p>配置Hadoop伪分布式环境需要修改<code>/usr/local/hadoop-3.2.2/etc/hadoop/</code>文件夹下的<code>hadoop-env.sh</code>、<code>core-site.xml</code>、<code>hdfs-site.xml</code> 、<code>maprep-site.xml</code>、<code>yarn-site.xml</code></p><ol><li>修改<code>hadoop-env.sh</code><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim hadoop-env.sh</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/java/jdk1.8.0_231</span><br><span class="line">export HADOOP_OS_TYPE=$&#123;HADOOP_OS_TYPE:-$(uname -s)&#125;</span><br><span class="line">HADOOP_SHELL_EXECNAME=root</span><br></pre></td></tr></table></figure><ol start="2"><li>修改<code>core-site.xml</code><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim core-site.xml</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 指定 NameNode 的地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定 Hadoop 数据的存储目录 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/xxx/hadoop_tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>A base for other temporary directories.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>修改<code>hdfs-site.xml</code><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim hdfs-site.xml</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.permissions<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/home/xxx/hadoop_tmp/hdfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/home/xxx/hadoop_tmp/hdfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>修改<code>maprep-site.xml</code><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim maprep-site.xml</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定 MapReduce 程序运行在 Yarn 上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>修改<code>yarn-site.xml</code><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim yarn-site.xml</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定 MR 走 shuffle --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-启动Hadoop"><a href="#4-启动Hadoop" class="headerlink" title="4.启动Hadoop"></a>4.启动Hadoop</h3><ol><li><p>在<code>hadoop-3.2.2</code>目录下执行命令将NameNode格式化（第一次启动时执行），格式化成功会在<code>/home/xxx/hadoop_tmp</code>创建dfs文件夹。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hdfs namenode –format</span><br></pre></td></tr></table></figure></li><li><p>在<code>hadoop-3.2.2/sbin</code>目录下执行启动命令打开所有进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./start-all.sh</span><br></pre></td></tr></table></figure></li><li><p>在<code>hadoop-3.2.2/sbin</code>目录下执行启动命令打开工作历史日志服务进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./mr-jobhistory-daemon.sh start historyserver</span><br></pre></td></tr></table></figure></li><li><p>执行<code>JPS</code>查看进程情况，显示七个进程说明成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">12436 SecondaryNameNode  </span><br><span class="line">13397 ResourceManager  </span><br><span class="line">11960 NameNode  </span><br><span class="line">14138 JobHistoryServer  </span><br><span class="line">13771 NodeManager  </span><br><span class="line">14205 Jps  </span><br><span class="line">12175 DataNode</span><br></pre></td></tr></table></figure></li></ol><h3 id="5-通过Web页面查看管理进程"><a href="#5-通过Web页面查看管理进程" class="headerlink" title="5.通过Web页面查看管理进程"></a>5.通过Web页面查看管理进程</h3><ol><li>查看 HDFS 的 NameNode</li></ol><ul><li><a href="http://localhost:9870/">http://localhost:9870</a> </li></ul><p><strong>注：Hadoop2.x为 <a href="http://localhost:50070/">http://localhost:50070</a></strong></p><ol start="2"><li>查看 YARN 的 ResourceManager</li></ol><ul><li><a href="http://localhost:8088/">http://localhost:8088</a></li></ul><ol start="3"><li>查看工作历史日志服务进程</li></ol><ul><li><a href="http://localhost:19888/">http://localhost:19888</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python基础</title>
      <link href="/posts/99832f47.html"/>
      <url>/posts/99832f47.html</url>
      
        <content type="html"><![CDATA[<h2 id="Python基础"><a href="#Python基础" class="headerlink" title="Python基础"></a>Python基础</h2><h3 id="1-常量和变量"><a href="#1-常量和变量" class="headerlink" title="1.常量和变量"></a>1.常量和变量</h3><ul><li><p>变量<br>变量在程序中就是用一个变量名表示的，变量名是大小写英文、数字和_组合，且不能用==数字==开头。</p></li><li><p>常量<br>即不能变的变量，通常用==全部大写==的变量名表示常量</p></li></ul><h3 id="2-Python语言算术运算符"><a href="#2-Python语言算术运算符" class="headerlink" title="2.Python语言算术运算符"></a>2.Python语言算术运算符</h3><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">例子</th></tr></thead><tbody><tr><td align="center">**</td><td align="center">指数，执行对操作数的幂计算</td><td align="center">a**b = 10^20(10的20次方)</td></tr><tr><td align="center">//</td><td align="center">整除，其结果是将商的小数点后的数舍去</td><td align="center">9//2 = 4，而9.0//2.0 = 4.0</td></tr></tbody></table><h3 id="3-序列数据结构"><a href="#3-序列数据结构" class="headerlink" title="3.序列数据结构"></a>3.序列数据结构</h3><ul><li>列表、元组和字符串</li></ul><p><strong>Python列表操作符</strong></p><ul><li>+用于组合列表，*用于重复列表。</li></ul><table><thead><tr><th align="center">Python表达式</th><th align="center">描述</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">[1,2,3] + [4,5,6]</td><td align="center">组合</td><td align="center">[1,2,3,4,5,6]</td></tr><tr><td align="center">[‘Hi!’] * 4</td><td align="center">重复</td><td align="center">[‘Hi!’,’Hi!’,’Hi!’,’Hi!’]</td></tr></tbody></table><h3 id="4-元组"><a href="#4-元组" class="headerlink" title="4.元组"></a>4.元组</h3><p>Python的元组(tuple)和列表类似，不同之处在于==元组==的元素==不能修改==，元组使用圆括号(),列表使用方括号[],元组的元素类型也可以不相同。</p><p><strong>元组与列表的区别</strong></p><ul><li>列表是==动态==数组，它们==可变==且可以重设长度（改变其内部元素的个数）。</li><li>元组是==静态==数组，它们==不可变==，且其内部数据一旦创建便无法改变。</li><li>元组缓存于Python运行时环境，这意味着我们每次使用元组时无须访问内核去分配内存。</li></ul><h3 id="5-字典"><a href="#5-字典" class="headerlink" title="5.字典"></a>5.字典</h3><ul><li>字典的每个==键/值==对里面键和值用==冒号==分隔，键/值对==之间用逗号==分隔，整个字典包括在==花括号==中</li></ul><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;key1 : value1 , key2 : value2&#125;</span><br></pre></td></tr></table></figure><p><strong>特性</strong></p><ol><li>字典值可以是任何Python对象，如字符串、数字、元组等。</li><li>不允许同一个键出现两次。创建时如果同一个键被赋值两次，后一个值会覆盖前面的值。</li></ol><p><strong>典方法和内置函数</strong></p><table><thead><tr><th align="center">函数</th><th align="center">函数描述</th></tr></thead><tbody><tr><td align="center">dict1.get(key , default = None)</td><td align="center">返回指定键的值，如果值不在字典中则返回default值</td></tr></tbody></table><h3 id="6-集合"><a href="#6-集合" class="headerlink" title="6.集合"></a>6.集合</h3><p>集合(set)是一个==无序不重复==元素的序列。集合基本功能是进行==成员关系测试==和==删除重复元素==。</p><ul><li>字典可以使用花括号{}或者set()函数创建集合。注意，创建一个==空集合必须用set()==而不是{}，因为{}用来创建一个空字典。</li></ul><h3 id="7-Python控制语句"><a href="#7-Python控制语句" class="headerlink" title="7.Python控制语句"></a>7.Python控制语句</h3><h4 id="7-1-分支结构"><a href="#7-1-分支结构" class="headerlink" title="7.1.分支结构"></a>7.1.分支结构</h4><ol><li><p>单分支结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> &lt;条件&gt;：</span><br><span class="line">&lt;语句块&gt;</span><br></pre></td></tr></table></figure></li><li><p>二分支结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>&lt;条件&gt;： </span><br><span class="line">&lt;语句块<span class="number">1</span>&gt;</span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line">&lt;语句块<span class="number">2</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>多分支结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> &lt;条件<span class="number">1</span>&gt; :</span><br><span class="line">&lt;语句块<span class="number">1</span>&gt; </span><br><span class="line"><span class="keyword">elif</span>&lt;条件<span class="number">2</span>&gt; :</span><br><span class="line">&lt;语句块<span class="number">2</span>&gt;</span><br><span class="line">...... </span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line">&lt;语句块N&gt;</span><br></pre></td></tr></table></figure></li></ol><p><strong>注意:</strong></p><ul><li>该语句可以利用一系列条件表达式进行检查，并在某个表达式为真的情况下执行相应的代码。</li><li>虽然该语句的备选动作较多，但是==有且只有一组==动作被执行。 </li><li> 最后面的else语句没有进行条件判断，它实际处理的是跟前面所有条件都不匹配的情况下的情况，所以else语句==必须放在最后==。</li></ul><h4 id="7-2-循环结构"><a href="#7-2-循环结构" class="headerlink" title="7.2.循环结构"></a>7.2.循环结构</h4><ol><li><strong>while语句</strong></li></ol><ul><li>当<code>判断条件1</code>为<code>true</code>时执行循环语句。若此时<code>判断条件2</code>为<code>true</code>，执行<code>break</code>跳出<code>while</code>循环，若<code>判断条件2</code>一直为<code>false</code>，则执行<code>while</code>循环，一直到<code>判断条件1</code>为<code>false</code>。  </li></ul><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span>(count &lt;= <span class="number">10</span>):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;现在计数为:&quot;</span>,count)</span><br><span class="line">count += <span class="number">1</span> </span><br><span class="line"><span class="keyword">if</span>(count \&gt; <span class="number">5</span>): </span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>for语句&amp;continue</strong></li></ol><ul><li>可以遍历任何一个序列的项目，比如一个列表、元祖、或者一个字符串</li></ul><p>当遍历序列时，如果<code>判断语句1</code>为真，则执行<code>continue</code>语句，跳出当前循环，直接进入下一次循环。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> iteration\_var <span class="keyword">in</span> sequence:    </span><br><span class="line">循环语句   </span><br><span class="line"><span class="keyword">if</span> 判断语句<span class="number">1</span>：    </span><br><span class="line"><span class="keyword">continue</span></span><br></pre></td></tr></table></figure><ol start="3"><li><strong>range()函数</strong></li></ol><p>例如，range(0,5)或range(5)生成的序列是从0开始到小于5的整数，不包括5==（左闭右开）==，实例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure><h3 id="8-求最大数和最小数"><a href="#8-求最大数和最小数" class="headerlink" title="8.求最大数和最小数"></a>8.求最大数和最小数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(<span class="built_in">list</span>)) <span class="comment">#输出最小数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(<span class="built_in">list</span>)) <span class="comment">#输出最大数</span></span><br></pre></td></tr></table></figure><h3 id="9-Python函数与模块"><a href="#9-Python函数与模块" class="headerlink" title="9.Python函数与模块"></a>9.Python函数与模块</h3><h4 id="9-1-函数的优点"><a href="#9-1-函数的优点" class="headerlink" title="9.1.函数的优点"></a>9.1.函数的优点</h4><ol><li>代码重用</li><li>保持一致性，易维护</li><li>可扩展性强</li></ol><h4 id="9-2-Lambda表达式"><a href="#9-2-Lambda表达式" class="headerlink" title="9.2.Lambda表达式"></a>9.2.Lambda表达式</h4><ul><li>用于声明匿名函数，只可以包含一个表达式</li></ul><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> [arg1 [,arg2,.....argn]]:expression</span><br></pre></td></tr></table></figure><p>冒号前是参数，可以有多个，用逗号隔开，冒号右边的为表达式（只能为一个）。其实lambda返回值是一个函数的地址，也就是函数对象。</p><p><strong>注意：</strong></p><p>Python中函数是可以返回多个值的，如果返回多个值，会将多个值放在一个元组或者其他类型的集合中来返回。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span>():</span></span><br><span class="line">x = <span class="number">2</span></span><br><span class="line">y = [<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">return</span> (x,y)</span><br><span class="line"><span class="built_in">print</span> (function)</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>])</span><br></pre></td></tr></table></figure><p><em>**若无 return ，将返回 None **</em></p><h3 id="10-函数参数"><a href="#10-函数参数" class="headerlink" title="10.函数参数"></a>10.函数参数</h3><h4 id="10-1-函数形参和实参的区别"><a href="#10-1-函数形参和实参的区别" class="headerlink" title="10.1.函数形参和实参的区别"></a>10.1.函数形参和实参的区别</h4><p>括号里面的变量称为形参，调用函数提供的值或者变量称为实参。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">a,b</span>):</span><span class="comment">#这里a和b就是形参</span></span><br><span class="line"><span class="keyword">return</span> a+b</span><br><span class="line"><span class="comment">#下面是调用参数</span></span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>)<span class="comment">#这里1和2是实参</span></span><br><span class="line">x = <span class="number">2</span></span><br><span class="line">y = <span class="number">3</span></span><br><span class="line">add(x,y)<span class="comment">#这里x和y是实参</span></span><br></pre></td></tr></table></figure><h4 id="10-2-函数参数的类型"><a href="#10-2-函数参数的类型" class="headerlink" title="10.2.函数参数的类型"></a>10.2.函数参数的类型</h4><ol><li>默认参数</li></ol><p>在定义函数时给形参赋予一个默认值，当调用函数时，如果没有给该参数赋新值，则会使用这个默认值。如果给参数赋予了新值，则会使用新值。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span>(<span class="params">name = <span class="string">&#x27;Mark&#x27;</span> , age = <span class="number">22</span></span>):</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%s今年%s岁&#x27;</span> % (name , age))</span><br><span class="line"></span><br><span class="line">info()<span class="comment">#这里输出默认值</span></span><br><span class="line">info(<span class="string">&#x27;Lily&#x27;</span> , <span class="number">24</span>)<span class="comment">#默认参数已被覆盖，输出新值</span></span><br></pre></td></tr></table></figure><ol start="2"><li>关键字参数</li></ol><p>关键字参数是以键值对的形式定义和调用的，清除了参数的顺序要求，在调用的时候不需要考虑参数的位置。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span>(<span class="params">name , age</span>):</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%s今年%s岁&#x27;</span> % (name , age))</span><br><span class="line"></span><br><span class="line">info(name = <span class="string">&#x27;Ken&#x27;</span> , age = <span class="number">23</span>)<span class="comment">#输出：Ken今年23岁</span></span><br><span class="line"><span class="comment">#关键字参数，可以不考虑参数位置，即name和age可以交换位置</span></span><br></pre></td></tr></table></figure><ol start="3"><li>任意个数参数（可变参数）</li></ol><p>可变参数分为可变位置参数和可变关键字参数。</p><ul><li>可变==位置==参数使用args，把一个或多个参数封装成一个元组，然后在元组里面进行迭代。</li></ul><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">*args</span>):</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(args))<span class="comment">#type()函数用于返回对象的类型</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> args:</span><br><span class="line"><span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line">func(<span class="number">1</span>,<span class="number">20</span>,<span class="number">35</span>)<span class="comment">#参数个数可变</span></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">35</span></span><br></pre></td></tr></table></figure><ul><li>可变==关键字==参数使用**kwargs，把参数构成一个key-value键值对组成的字典。</li></ul><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">**kwargs</span>):</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(kwargs))</span><br><span class="line"><span class="keyword">for</span> key , value <span class="keyword">in</span> kwargs.items():</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;key = &#123;&#125; , value = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(key , value))</span><br><span class="line"></span><br><span class="line">func(name = <span class="string">&#x27;Summer&#x27;</span> , age = <span class="number">20</span>)<span class="comment">#参数个数可变</span></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">key = name , value = Summer</span><br><span class="line">key = age , value = <span class="number">20</span></span><br></pre></td></tr></table></figure><h3 id="11-变量的作用域"><a href="#11-变量的作用域" class="headerlink" title="11.变量的作用域"></a>11.变量的作用域</h3><p>变量起作用的范围称为变量的作用域，一个变量在函数外部定义和函数内部定义，其作用域是不同的。</p><ol><li>局部变量</li></ol><p> 在函数内部定义的变量，作用域也仅限于函数内部，出了函数便不能使用。</p><ol start="2"><li>全局变量</li></ol><p> 和局部变量不同，全局变量的默认作用域是整个程序，即全局变量既可以在各个函数的外部使用，也可以在各函数内部使用。</p><p> <strong>注意：</strong></p><p> 如果一个局部变量和一个全局变量重名，则局部变量会“屏蔽”全局变量，也就是局部变量起作用。</p><h3 id="12-字符串函数"><a href="#12-字符串函数" class="headerlink" title="12.字符串函数"></a>12.字符串函数</h3><table><thead><tr><th align="center">函数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">string.lstrip()</td><td align="center">截掉string左边的空格</td></tr><tr><td align="center">string.rstrip()</td><td align="center">删除string字符串末尾的空格</td></tr><tr><td align="center">string.strip()</td><td align="center">删除string字符串首尾全部空格</td></tr></tbody></table><h3 id="13-文件的访问"><a href="#13-文件的访问" class="headerlink" title="13.文件的访问"></a>13.文件的访问</h3><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">“r”</td><td align="center">以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td align="center">“w”</td><td align="center">打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td></tr><tr><td align="center">“a”</td><td align="center">打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr></tbody></table><p>** 读取文本文件**</p><ol><li> read() 每次读取==整个文件==，它通常将读取到底文件内容放到一个==字符串变量==中，也就是说 read() 生成文件内容是一个==字符串类型==。</li><li> readline()每只读取文件的==一行==，通常也是读取到的一行内容放到一个==字符串变量==中，返回==str类型==。 </li><li> readlines()每次按行读取==整个文件==内容，将读取到的内容放到一个==列表==中，返回==list类型==。</li></ol><p><strong>写入文本文件</strong></p><ol><li>write()方法<br>write()方法将==字符串参数==写入文件</li><li>writelines()方法<br>writelines()方法将==字符串序列==写入文件</li></ol><p><strong>注意：</strong><br>write() &amp; writelines()方法不能自动在字符串末尾添加换行符，需要自己添加==”\n“==。</p><h3 id="14-文件的关闭"><a href="#14-文件的关闭" class="headerlink" title="14.文件的关闭"></a>14.文件的关闭</h3><p><strong>可使用try/finally语句 &amp; with语句自动关闭文件</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#try/finally语句</span></span><br><span class="line">File = <span class="built_in">open</span>(<span class="string">&#x27;c:\\hello.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">File.write(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">File.close()</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="comment">#with自动关闭</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;c:\\hello.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">s = f.read()</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><p><strong>raise()语句抛出异常</strong></p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#当x小于0时，抛出异常并停止程序:</span></span><br><span class="line">x = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line"><span class="keyword">raise</span> Exception(<span class="string">&quot;x需要是大于等于0的数字&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="15-目录操作"><a href="#15-目录操作" class="headerlink" title="15.目录操作"></a>15.目录操作</h3><ul><li>os.makedirs()函数创建新==多级==目录。</li><li>os.mkdir()函数创建新==一级==目录。</li></ul><h3 id="16-类和对象"><a href="#16-类和对象" class="headerlink" title="16.类和对象"></a>16.类和对象</h3><ul><li><strong>self（约定俗成的一种习惯）</strong></li></ul><p>类的成员函数必须有一个参数self，而且位于参数列表的开头。self就代表类的实例（对象）自身，可以使用self引用类的属性和成员变量。在类的成员函数中访问实例属性时需要以self为前缀。</p><h3 id="17-构造函数"><a href="#17-构造函数" class="headerlink" title="17.构造函数"></a>17.构造函数</h3><p><strong>解释：</strong></p><p>在对象进行实例化的时候，系统==自动==调用的一个函数叫构造函数，通常此函数用来对实例化对象进行==初始化==。</p><p><code>__init__()</code>方法是一个特殊的方法，在对象实例化时会被调用，<code>__init__()</code>方法的作用是初始化。</p><h3 id="18-私有成员和公有成员"><a href="#18-私有成员和公有成员" class="headerlink" title="18.私有成员和公有成员"></a>18.私有成员和公有成员</h3><ul><li>  在定义类的成员时，如果成员名以两个下划线“_ _”或更多下划线开头而不以两个或更多下划线结束则表示是私有成员。</li></ul><p>访问方法：</p><p>==对象名._类名+私有成员==</p><h3 id="19-SQLite数据库"><a href="#19-SQLite数据库" class="headerlink" title="19.SQLite数据库"></a>19.SQLite数据库</h3><ul><li>Python自带一个==轻量级==的关系型数据库SQLite。</li><li>SQLite是非常小的、轻量级的、自给自足的，==无服务器==，所以不需要安装和管理。</li><li>SQLite3采用了==动态==的数据类型，会根据存入值自动判断。</li><li>SQLite使用==弱==数据类型，除了主键，对其它字段不指定类型是完全有效的。</li></ul><h3 id="20-TCP和UDP的区别"><a href="#20-TCP和UDP的区别" class="headerlink" title="20.TCP和UDP的区别"></a>20.TCP和UDP的区别</h3><ul><li>TCP 提供的是面向连接、可靠的字节流服务,并且有流量控制和拥塞控制功能。</li><li>UDP 提供的是无连接、不可靠的数据报传输,无流量控制和拥塞控制。</li></ul><h3 id="21-科学计算"><a href="#21-科学计算" class="headerlink" title="21.科学计算"></a>21.科学计算</h3><p><strong>主要工具：</strong></p><ul><li><a href="https://numpy.org/">NumPy</a></li><li><a href="https://pandas.pydata.org/">Pandas - Python Data Analysis Library</a></li><li><a href="https://seaborn.pydata.org/">Seaborn: statistical data visualization — seaborn 0.11.2 documentation</a></li></ul><hr><h2 id="经典例题"><a href="#经典例题" class="headerlink" title="经典例题"></a>经典例题</h2><h3 id="1-数据库操作"><a href="#1-数据库操作" class="headerlink" title="1.数据库操作"></a>1.数据库操作</h3><p><strong>要求：</strong></p><ol><li>数据库表的创建。</li><li>sql批量插入5条记录。</li><li>查询，带条件，<code>select * from 表 where 条件</code>。</li><li>删除数据，带条件。</li></ol><p><a href="https://blog.csdn.net/youngdianfeng/article/details/105928848">Python SQLite数据库操作</a></p><p><strong>实例代码1：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mysqlite</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,dbpath</span>):</span></span><br><span class="line">        <span class="comment"># 如果不存在则创建</span></span><br><span class="line">        self.con = sqlite3.connect(dbpath)</span><br><span class="line">        self.cur = self.con.cursor()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.close()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute_sqlite3</span>(<span class="params">self,sql</span>):</span></span><br><span class="line">        <span class="comment"># 命令处理</span></span><br><span class="line">        sql = sql.lower()</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;insert&#x27;</span> <span class="keyword">in</span> sql <span class="keyword">or</span> <span class="string">&#x27;delete&#x27;</span> <span class="keyword">in</span> sql <span class="keyword">or</span>  <span class="string">&#x27;update&#x27;</span> <span class="keyword">in</span> sql <span class="keyword">or</span>  <span class="string">&#x27;create&#x27;</span> <span class="keyword">in</span> sql:</span><br><span class="line">            self.cur.execute(sql)</span><br><span class="line">            self.con.commit()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;done..&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&#x27;select&#x27;</span> <span class="keyword">in</span> sql :</span><br><span class="line">            self.cur.execute(sql)</span><br><span class="line">            data = self.cur.fetchall()</span><br><span class="line">            <span class="built_in">print</span>(data)</span><br><span class="line">            <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_table</span>(<span class="params">self,table_name,title</span>):</span></span><br><span class="line">        <span class="comment"># 自定义创建表</span></span><br><span class="line">        sql = <span class="string">&quot;CREATE TABLE &#123;&#125;(&#123;&#125;)&quot;</span>.<span class="built_in">format</span>(table_name,title)</span><br><span class="line">        self.execute_sqlite3(sql)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_value</span>(<span class="params">self,table_name,value</span>):</span></span><br><span class="line">        <span class="comment"># 插入自定义数据</span></span><br><span class="line">        sql = <span class="string">&quot;INSERT INTO &#123;&#125; values(&#123;&#125;)&quot;</span>.<span class="built_in">format</span>(table_name,value)</span><br><span class="line">        self.execute_sqlite3(sql)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select_data</span>(<span class="params">self,table_name</span>):</span></span><br><span class="line">        <span class="comment"># 查询数据</span></span><br><span class="line">        sql = <span class="string">&quot;SELECT * FROM &#123;&#125;&quot;</span>.<span class="built_in">format</span>(table_name)</span><br><span class="line">        self.execute_sqlite3(sql)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_data</span>(<span class="params">self,table_name,field,value,<span class="built_in">id</span></span>):</span></span><br><span class="line">        <span class="comment"># 修改数据</span></span><br><span class="line">        sql = <span class="string">&quot;UPDATE &#123;&#125; set &#123;&#125; = &#x27;&#123;&#125;&#x27; where id = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(table_name,field,value,<span class="built_in">id</span>)</span><br><span class="line">        self.execute_sqlite3(sql)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete_data</span>(<span class="params">self,table_name,<span class="built_in">id</span></span>):</span></span><br><span class="line">        <span class="comment"># 删除数据</span></span><br><span class="line">        sql = <span class="string">&quot;DELETE FROM &#123;&#125; where id = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(table_name,<span class="built_in">id</span>)</span><br><span class="line">        self.execute_sqlite3(sql)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 关闭资源</span></span><br><span class="line">        self.cur.close()</span><br><span class="line">        self.con.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    sqlite = Mysqlite(<span class="string">&#x27;test.db&#x27;</span>)</span><br><span class="line">    table_name = <span class="string">&#x27;foo&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        sqlite.create_table(table_name,<span class="string">&#x27;id integer primary key autoincrement, name varchar(128), info varchar(128)&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; created..&quot;</span>)</span><br><span class="line">    sqlite.insert_value(table_name,<span class="string">&#x27;NULL,\&quot;apple\&quot;,\&quot;broccoli\&quot;&#x27;</span>)</span><br><span class="line">    sqlite.select_data(table_name)</span><br><span class="line">    sqlite.update_data(table_name,<span class="string">&#x27;name&#x27;</span>,<span class="string">&quot;orange&quot;</span>,<span class="number">1</span>)</span><br><span class="line">    sqlite.select_data(table_name)</span><br><span class="line">    sqlite.delete_data(table_name,<span class="number">2</span>)</span><br><span class="line">    sqlite.select_data(table_name)</span><br></pre></td></tr></table></figure><p><strong>实例代码2：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selectdb</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        con = sqlite3.connect(<span class="string">&quot;student.db&quot;</span>)</span><br><span class="line">        cur = con.cursor()</span><br><span class="line">        cur.execute(<span class="string">&quot;select * from student&quot;</span>)</span><br><span class="line">        a=cur.fetchall()</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(a) &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;--------------------------------&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;序号&quot;</span><span class="string">&quot;\t\t&quot;</span><span class="string">&quot;姓名&quot;</span><span class="string">&quot;\t\t&quot;</span><span class="string">&quot;年龄&quot;</span><span class="string">&quot;\t\t&quot;</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">                <span class="built_in">print</span>(a[i][<span class="number">0</span>], <span class="string">&quot;  \t&quot;</span>, a[i][<span class="number">1</span>], <span class="string">&quot; \t&quot;</span>, a[i][<span class="number">2</span>])</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;--------------------------------&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;------信息表为空------&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># print(cur.rowcount)</span></span><br><span class="line">        con.commit()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> ex:</span><br><span class="line">        <span class="built_in">print</span>(ex)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        cur.close()</span><br><span class="line">        con.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deldb</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        con = sqlite3.connect(<span class="string">&quot;student.db&quot;</span>)</span><br><span class="line">        cur = con.cursor()</span><br><span class="line">        cur.execute(<span class="string">&quot;delete from student where name=?&quot;</span>, (<span class="string">&quot;小奥&quot;</span>,))</span><br><span class="line">        cur.execute(<span class="string">&quot;select * from student&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;删除数据后：&quot;</span> )</span><br><span class="line">        <span class="comment"># print(cur.rowcount)</span></span><br><span class="line">        con.commit()</span><br><span class="line">        selectdb()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> ex:</span><br><span class="line">        <span class="built_in">print</span>(ex)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        cur.close()</span><br><span class="line">        con.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">updatedb</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        con = sqlite3.connect(<span class="string">&quot;student.db&quot;</span>)</span><br><span class="line">        cur = con.cursor()</span><br><span class="line">        cur.execute(<span class="string">&quot;update student set name=? where id=?&quot;</span>, (<span class="string">&quot;小仔&quot;</span>, <span class="number">6</span>))</span><br><span class="line">        cur.execute(<span class="string">&quot;select * from student&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;更新数据后：&quot;</span> )</span><br><span class="line">        <span class="comment"># print(cur.rowcount)</span></span><br><span class="line">        con.commit()</span><br><span class="line">        selectdb()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> ex:</span><br><span class="line">        <span class="built_in">print</span>(ex)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        cur.close()</span><br><span class="line">        con.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    con = sqlite3.connect(<span class="string">&quot;student.db&quot;</span>)</span><br><span class="line">    cur = con.cursor()</span><br><span class="line">    cur = con.execute(<span class="string">&quot;&quot;&quot;create table if not exists student</span></span><br><span class="line"><span class="string">                        (</span></span><br><span class="line"><span class="string">                        id integer primary key autoincrement,</span></span><br><span class="line"><span class="string">                        name varchar(40),</span></span><br><span class="line"><span class="string">                        age varchar(30))&quot;&quot;&quot;</span>)</span><br><span class="line">    student = [(<span class="number">1</span>, <span class="string">&quot;小明&quot;</span>, <span class="string">&#x27;18&#x27;</span>), (<span class="number">2</span>, <span class="string">&quot;小白&quot;</span>, <span class="string">&#x27;18&#x27;</span>), (<span class="number">3</span>, <span class="string">&quot;小奥&quot;</span>, <span class="string">&#x27;19&#x27;</span>), (<span class="number">4</span>, <span class="string">&#x27;小火&#x27;</span>, <span class="string">&#x27;19&#x27;</span>), (<span class="number">5</span>, <span class="string">&#x27;小子&#x27;</span>, <span class="string">&#x27;17&#x27;</span>)]</span><br><span class="line">    cur.executemany(<span class="string">&quot;insert into student(id,name,age) values (?,?,?)&quot;</span>, student)</span><br><span class="line">    <span class="built_in">print</span>(cur.rowcount)</span><br><span class="line">    cur.execute(<span class="string">&quot;insert into student(id,name,age) values (6,&#x27;小考&#x27;,&#x27;17&#x27;)&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(cur.rowcount)</span><br><span class="line">    con.commit()</span><br><span class="line">    <span class="comment"># cur.close()</span></span><br><span class="line">    <span class="comment"># con.close()</span></span><br><span class="line">    selectdb()</span><br><span class="line">    deldb()</span><br><span class="line">    updatedb()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="2-TCP-amp-UDP"><a href="#2-TCP-amp-UDP" class="headerlink" title="2.TCP&amp;UDP"></a>2.TCP&amp;UDP</h3><p><a href="https://www.cnblogs.com/studyming/p/13671051.html">TCP文件下载简单实现</a></p><p><strong>什么是下载？</strong></p><ol><li>首先客户端会问服务器，有没有xxx文件？服务器开始寻找，找到后答复客户端，然后客户端在本地新建一个文件，双方实时的发送和接收，待所有接收到的数据都写入到这个文件中，就完成了下载的操作。</li><li>所以下载需要两个部分。服务器的发送方和客户端的接收方。</li><li>这里不考虑复杂的情况，只实现最简单的逻辑。</li></ol><p><strong>客户端参考代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建socket</span></span><br><span class="line">    tcp_client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 目的信息</span></span><br><span class="line">    server_ip = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">    server_port = <span class="number">8888</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 链接服务器</span></span><br><span class="line">    tcp_client_socket.connect((server_ip, server_port))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输入需要下载的文件名</span></span><br><span class="line">    file_name = <span class="built_in">input</span>(<span class="string">&quot;请输入要下载的文件名：&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送文件下载请求</span></span><br><span class="line">    tcp_client_socket.send(file_name.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 接收对方发送过来的数据，最大接收1024个字节（1K）</span></span><br><span class="line">    recv_data = tcp_client_socket.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="comment"># 如果接收到数据再创建文件，否则不创建</span></span><br><span class="line">    <span class="keyword">if</span> recv_data:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_name + <span class="string">&quot;[接收]&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(recv_data)</span><br><span class="line">    <span class="comment"># 关闭套接字</span></span><br><span class="line">    tcp_client_socket.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p><strong>服务端参考代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_file_content</span>(<span class="params">file_name</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;获取文件的内容&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_name, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            content = f.read()</span><br><span class="line">        <span class="keyword">return</span> content</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;没有下载的文件:%s&quot;</span> % file_name)</span><br><span class="line"></span><br><span class="line">host = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">port = <span class="number">8888</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 创建socket</span></span><br><span class="line">    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    <span class="comment"># 本地信息</span></span><br><span class="line">    address = (<span class="string">&#x27;&#x27;</span>, port)</span><br><span class="line">    <span class="comment"># 绑定本地信息</span></span><br><span class="line">    tcp_server_socket.bind(address)</span><br><span class="line">    <span class="comment"># 将主动套接字变为被动套接字</span></span><br><span class="line">    tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 等待客户端的链接，即为这个客户端发送文件</span></span><br><span class="line">        client_socket, clientAddr = tcp_server_socket.accept()</span><br><span class="line">        <span class="comment"># 接收对方发送过来的数据</span></span><br><span class="line">        recv_data = client_socket.recv(<span class="number">1024</span>)  <span class="comment"># 接收1024个字节</span></span><br><span class="line">        file_name = recv_data.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;对方请求下载的文件名为:%s&quot;</span> % file_name)</span><br><span class="line">        file_content = get_file_content(file_name)</span><br><span class="line">        <span class="comment"># 发送文件的数据给客户端</span></span><br><span class="line">        <span class="comment"># 因为获取打开文件时是以rb方式打开，所以file_content中的数据已经是二进制的格式，因此不需要encode编码</span></span><br><span class="line">        <span class="keyword">if</span> file_content:</span><br><span class="line">            client_socket.send(file_content)</span><br><span class="line">        <span class="comment"># 关闭这个套接字</span></span><br><span class="line">        client_socket.close()</span><br><span class="line">    <span class="comment"># 关闭监听套接字</span></span><br><span class="line">    tcp_server_socket.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="3-下标和"><a href="#3-下标和" class="headerlink" title="3.下标和"></a>3.下标和</h3><p>编写函数实现输入整型列表L,和一个整型参数goal,求列表L中所有满足两两之和为goal的元素的下标。</p><p>例如：输入一个整型列表L·=[1,3,5,7,9,2,-1],goal=8,而列表L中所有满足和为goal的元素为：<br>L[0]+L[3]=8<br>L[1]+L[2]=8<br>L[4]+L[6]=8<br>则输出为：((0,3),(1,2),(4,6))</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">2</span>,-<span class="number">1</span>,<span class="number">3</span>]</span><br><span class="line">goal = <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">TwoNumSum</span>(<span class="params">L,goal</span>):</span></span><br><span class="line">list1 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(L)):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,<span class="built_in">len</span>(L)):</span><br><span class="line"><span class="keyword">if</span> L[i] + L[j] == goal:</span><br><span class="line">list1.append((i,j))</span><br><span class="line"><span class="keyword">return</span>(<span class="built_in">tuple</span>(list1))</span><br><span class="line"></span><br><span class="line">a = TwoNumSum(L,goal)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><h3 id="4-目录logs"><a href="#4-目录logs" class="headerlink" title="4.目录logs"></a>4.目录logs</h3><p>在桌面新建目录logs,并完成以下操作：</p><ol><li>在logs目录下新建11个文件，分别作为凌晨0点到早上10点的日志文件，文件命名规则为<code>2021042000.txt~2021042010.txt</code>,文件内容为长度为10的随机字符串。</li><li>将logs目录下所有以.txt结尾的后缀名都改为.log</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os  </span><br><span class="line"><span class="keyword">import</span> random  </span><br><span class="line"><span class="keyword">import</span> shutil  </span><br><span class="line"></span><br><span class="line">logspath = <span class="string">&quot;C:\\Users\\admin\\Desktop\\logs&quot;</span>  </span><br><span class="line">s = <span class="string">&quot;wfowiefnguow209384f389&quot;</span>  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(logspath):  </span><br><span class="line">os.mkdir(logspath)  </span><br><span class="line">os.chdir(logspath)  </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2021042000</span>, <span class="number">2021042011</span>):  </span><br><span class="line">filename = <span class="built_in">str</span>(i) + <span class="string">&#x27;.txt&#x27;</span>  </span><br><span class="line">content = <span class="string">&#x27;&#x27;</span>.join(random.sample(s, <span class="number">10</span>))  </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:  </span><br><span class="line">f.write(content)  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(os.getcwd()):  </span><br><span class="line">newfile = file.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>] + <span class="string">&#x27;.log&#x27;</span>  </span><br><span class="line">shutil.move(file, newfile)</span><br></pre></td></tr></table></figure><h3 id="5-升序排列"><a href="#5-升序排列" class="headerlink" title="5.升序排列"></a>5.升序排列</h3><p>scores = [( ‘B’ , 89), ( ‘A’ , 16), ( ‘ C’ , 60), ( ‘D’ , 67)]<br>用sorted函数对上述列表元素按照成绩升序排列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scores = [(<span class="string">&#x27;B&#x27;</span>, <span class="number">89</span>), (<span class="string">&#x27;A&#x27;</span>, <span class="number">16</span>), (<span class="string">&#x27;C&#x27;</span>, <span class="number">60</span>), (<span class="string">&#x27;D&#x27;</span>, <span class="number">67</span>)]</span><br><span class="line">a = <span class="built_in">sorted</span>(scores, key = <span class="keyword">lambda</span> s: s[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><h3 id="6-包含abc输出"><a href="#6-包含abc输出" class="headerlink" title="6.包含abc输出"></a>6.包含abc输出</h3><p>已知下列一组字符串列表，完成以下需求：<br>L=[‘fwieng’,’weiabcfwie’,’ sdfaafaab’,asdfverabc’ ,’ ebeabrifje’ ,’ abcfwefwe’ ]<br>将所有包含’abc’的字符串输出，例如result=[‘weiabcfwie’,’asdfverabc’,’ abcfwefwe’ ]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">result = [ ]</span><br><span class="line">L=[<span class="string">&#x27;fwieng&#x27;</span>, <span class="string">&#x27;weiabcfwie&#x27;</span>,<span class="string">&#x27;sdfaafaab&#x27;</span>, <span class="string">&#x27;asdfverabc&#x27;</span>, <span class="string">&#x27;ebeabrifje&#x27;</span>, <span class="string">&#x27;abcfwefwe&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> L :</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;abc&quot;</span> <span class="keyword">in</span> s:</span><br><span class="line">result.append(s)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h3 id="7-汽车Car"><a href="#7-汽车Car" class="headerlink" title="7.汽车Car"></a>7.汽车Car</h3><p>建立一个汽车car类，包括：</p><p>属性：汽车颜色color、车身重量weight、速度speed。</p><p>构造函数：能初始化各个属性值（speed初始值设为50)。</p><p>方法：<br>speedup():将属性值 speed+10 并显示 speed 值；<br>speedCut():将属性值 speed-10 并显示 speed 值；<br>show():显示属性值color、weight、speed。</p><p>在主程序中创建实例并初始化各属性值，调用show方法、加速方法、减速方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self , color=<span class="string">&#x27;&#x27;</span>, weight=<span class="number">0</span>, speed=<span class="number">0</span></span>):</span>  </span><br><span class="line">        self.color = color  </span><br><span class="line">        self.weight = weight  </span><br><span class="line">        self.speed = speed  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">speedUp</span>(<span class="params">self</span>):</span>  </span><br><span class="line">        self.speed += <span class="number">10</span>  </span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&#x27;车辆正在加速,当前speed值为：&#x27;</span>,self.speed)  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">speedCut</span>(<span class="params">self</span>):</span>  </span><br><span class="line">        self.speed -= <span class="number">10</span>  </span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&#x27;车辆正在减速,当前speed值为：&#x27;</span>,self.speed)  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">self</span>):</span>  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;车辆的颜色为:&#x27;</span>,self.color,<span class="string">&#x27;车辆的重量为:&#x27;</span>,self.weight,<span class="string">&#x27;车辆的速度为:&#x27;</span>,self.speed)  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line"> c = Car(<span class="string">&#x27;白色&#x27;</span>, <span class="number">800</span>, <span class="number">50</span>)  </span><br><span class="line"> c.show()  </span><br><span class="line"> c.speedUp()  </span><br><span class="line"> c.speedCut()</span><br></pre></td></tr></table></figure><h3 id="8-数据库查询"><a href="#8-数据库查询" class="headerlink" title="8.数据库查询"></a>8.数据库查询</h3><p>前三行数据查询</p><p>cur.fetch==all==():返回结果集的剩余行（Row对象列表），无数据时，返回空List。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">res = cur.fetchall()</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> res:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;id:&#123;&#125;,price:&#123;&#125;,name:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(line[<span class="number">0</span>],line[<span class="number">1</span>],line[<span class="number">2</span>]))</span><br><span class="line">line = cur.fetchone()</span><br></pre></td></tr></table></figure><p>cur.fetch==many==():返回结果集的多行（Row对象列表），无数据时，返回空List。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">res = cur.fetchmany(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> res:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;id:&#123;&#125;,price:&#123;&#125;,name:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(line[<span class="number">0</span>],line[<span class="number">1</span>],line[<span class="number">2</span>]))</span><br><span class="line">line = cur.fetchone()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>解决Github访问、下载慢的问题</title>
      <link href="/posts/b457641.html"/>
      <url>/posts/b457641.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Mac-Win10-无法访问Github"><a href="#1-Mac-Win10-无法访问Github" class="headerlink" title="1.Mac || Win10 无法访问Github"></a>1.Mac || Win10 无法访问Github</h2><p>有时候我们的电脑出现突然上不了网，或者某些网站打不开的情况，这种情况很多是<a href="https://baike.baidu.com/item/%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F/2251573?fromtitle=dns&fromid=427444">DNS</a>缓存延时导致，可以通过执行DNS缓存清理命令来更新DNS缓存来解决。</p><ul><li><a href="https://github.com.ipaddress.com/">▷ GitHub.com : GitHub: Where the world builds software · GitHub</a></li><li><a href="https://fastly.net.ipaddress.com/github.global.ssl.fastly.net#ipinfo">▷ github.global.ssl.Fastly.net Website statistics and traffic analysis | Fastly | fastly.net</a></li></ul><p>从上面两个网站，可查看网站对应的IP地址。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">140.82</span>.<span class="number">112.3</span> github<span class="selector-class">.com</span> </span><br><span class="line"><span class="number">199.232</span>.<span class="number">69.194</span> github<span class="selector-class">.global</span><span class="selector-class">.ssl</span><span class="selector-class">.fastly</span><span class="selector-class">.net</span></span><br></pre></td></tr></table></figure><ol><li>修改电脑的hosts</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Mac: 打开访达 快捷键comand+shift+g 位置/private/etc/hosts  </span><br><span class="line">Win: C:\Windows\System32\drivers\etc\hosts</span><br></pre></td></tr></table></figure><ol start="2"><li>刷新DNS</li></ol><p>Mac: Terminal</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo killall -HUP mDNSResponder;say DNS cache has been flushed</span><br></pre></td></tr></table></figure><p>Win: CMD</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig/flushdns</span><br></pre></td></tr></table></figure><p>此时<a href="https://github.com/">GitHub</a>就可以登陆了</p><hr><h2 id="2-Github下载速度慢"><a href="#2-Github下载速度慢" class="headerlink" title="2.Github下载速度慢"></a>2.Github下载速度慢</h2><h3 id="2-1-Github加速网站"><a href="#2-1-Github加速网站" class="headerlink" title="2.1.Github加速网站"></a>2.1.Github加速网站</h3><p><a href="https://toolwa.com/github/">GitHub 加速下载</a></p><p>使用方法：</p><ol><li> 打开你要下载的 <a href="https://github.com/">GitHub</a> 仓库页面</li><li> 点击右侧的绿色按钮 “Code” &gt; “Download ZIP”</li><li> 等浏览器弹出下载框后复制下载框中的链接地址并粘贴到以上输入框</li><li> 点击加速下载</li></ol><h3 id="2-2-码云-Gitee"><a href="#2-2-码云-Gitee" class="headerlink" title="2.2.码云(Gitee)"></a>2.2.码云(Gitee)</h3><p><a href="https://gitee.com/">Gitee</a></p><p>使用方法：</p><ol><li>首先确保<a href="https://gitee.com/">Gitee</a>上有账户，可以正常使用。</li><li>点击右上角新建仓库的加号 + ，选择“ 从 GitHub/GitLab导入仓库 ”菜单。</li><li>然后填写位于<a href="https://github.com/">GitHub</a>上你想Clone的仓库地址并导入。</li><li>通过导入到码云上的项目地址，将项目Clone到本地。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Scoop&amp;Chocolatey不完全上手指南</title>
      <link href="/posts/cd19d6b5.html"/>
      <url>/posts/cd19d6b5.html</url>
      
        <content type="html"><![CDATA[<h2 id="Scoop"><a href="#Scoop" class="headerlink" title="Scoop"></a>Scoop</h2><h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h3><p><a href="https://github.com/lukesampson/scoop">Scoop</a>是一个 Windows 包管理工具，类似于 Debian 的 <code>apt</code>、macOS 的 <code>homebrew</code>。它由开源社区驱动，体验可能是是目前所有 Windows 包管理工具中最好的。对开发者来说，包管理器能非常方便的部署开发环境，比如 Python、Node.js。而对于普通的计算机使用者来说，可以方便的安装一些常用软件，尤其是开源软件，免去了手动去官网下载的繁琐步骤，而且后续对软件进行升级只需要输入一行命令，非常便捷。</p><h3 id="2-环境要求"><a href="#2-环境要求" class="headerlink" title="2.环境要求"></a>2.环境要求</h3><ul><li>  Windows 7 SP1 + / Windows Server 2008 +</li><li>  <a href="https://www.microsoft.com/en-us/download/details.aspx?id=54616">PowerShell 5 + </a>和<a href="https://dotnet.microsoft.com/download">.NET Framework 4.5 + </a></li><li>  Windows 用户名为英文（Windows 用户环境变量中路径值不支持中文字符）</li><li>  <strong>正常、快速</strong>的访问<a href="https://github.com/">GitHub</a>并下载资源</li></ul><h3 id="3-Scoop安装"><a href="#3-Scoop安装" class="headerlink" title="3.Scoop安装"></a>3.Scoop安装</h3><ol><li>设置<code>powershell</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set-executionpolicy remotesigned -scope currentuser</span><br></pre></td></tr></table></figure><ul><li>默认安装(安装到<code>C:\Users\&lt;user&gt;\scoop</code>), 在<code>powershell</code>里面运行:</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iex (new-object net.webclient).downloadstring(&#x27;https://get.scoop.sh&#x27;)</span><br></pre></td></tr></table></figure><ul><li>安装到指定目录(<code>D:\tool\scoop</code>)(逐行执行命令)</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[environment]::setEnvironmentVariable(&#x27;SCOOP&#x27;, &#x27;D:\tool\scoop&#x27;, &#x27;User&#x27;)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash">env:SCOOP=<span class="string">&#x27;D:\tool\scoop&#x27;</span></span></span><br><span class="line"></span><br><span class="line">iex (new-object net.webclient).downloadstring(&#x27;https://get.scoop.sh&#x27;)</span><br></pre></td></tr></table></figure><ul><li>全局安装到指定目录(<code>D:\tool\scoop_global</code>)(逐行执行命令)</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[environment]::setEnvironmentVariable(&#x27;SCOOP_GLOBAL&#x27;,&#x27;D:\tool\scoop\scoop_global&#x27;,&#x27;Machine&#x27;)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash">env:SCOOP_GLOBAL=<span class="string">&#x27;D:\tool\scoop\scoop_global&#x27;</span></span></span><br><span class="line"></span><br><span class="line">iex (new-object net.webclient).downloadstring(&#x27;https://get.scoop.sh&#x27;)</span><br></pre></td></tr></table></figure><ul><li>执行<code>scoop help</code>查看是否安装成功</li></ul><h3 id="4-基础使用"><a href="#4-基础使用" class="headerlink" title="4.基础使用"></a>4.基础使用</h3><ul><li>  <code>scoop search &lt;app&gt;</code> - 搜索软件</li><li>  <code>scoop install &lt;app&gt;</code> - 安装软件</li><li>  <code>scoop info &lt;app&gt;</code> - 查看软件详细信息</li><li>  <code>scoop list</code> - 查看已安装软件</li><li>  <code>scoop uninstall &lt;app&gt;</code> - 卸载软件，<code>-p</code>删除配置文件。</li><li>  <code>scoop update</code> - 更新 scoop 本体和软件列表</li><li>  <code>scoop update &lt;app&gt;</code> - 更新指定软件</li><li>  <code>scoop update *</code> - 更新所有已安装的软件</li><li>  <code>scoop checkup</code> - 检查 scoop 的问题并给出解决问题的建议</li><li>  <code>scoop help</code> - 查看命令列表</li><li>  <code>scoop help &lt;command&gt;</code> - 查看命令帮助说明</li></ul><h3 id="5-进阶使用"><a href="#5-进阶使用" class="headerlink" title="5.进阶使用"></a>5.进阶使用</h3><h4 id="5-1-添加常用的bucket"><a href="#5-1-添加常用的bucket" class="headerlink" title="5.1.添加常用的bucket"></a>5.1.添加常用的bucket</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">scoop bucket add extras</span><br><span class="line">scoop bucket add Java</span><br><span class="line">scoop bucket add versions</span><br><span class="line">scoop bucket add Ash258 &#x27;https://github.com/Ash258/Scoop-Ash258.git&#x27;</span><br><span class="line">scoop bucket add dorado &#x27;https://github.com/h404bi/dorado&#x27;</span><br><span class="line">scoop bucket add iszy &#x27;https://github.com/ZvonimirSun/scoop-iszy&#x27;</span><br><span class="line">scoop bucket add dodorz &#x27;https://github.com/dodorz/scoop-bucket&#x27;</span><br><span class="line">scoop bucket add rasa &#x27;https://github.com/rasa/scoops&#x27;</span><br><span class="line">scoop bucket add scoopet &#x27;https://github.com/integzz/scoopet&#x27;</span><br><span class="line">scoop bucket add raresoft &#x27;https://github.com/L-Trump/scoop-raresoft&#x27;</span><br><span class="line">scoop bucket add main &#x27;https://github.com/ScoopInstaller/Main&#x27;</span><br><span class="line">scoop bucket add games &#x27;https://github.com/Calinou/scoop-games&#x27;</span><br><span class="line">scoop bucket add jetbrains &#x27;https://github.com/Ash258/Scoop-JetBrains&#x27;</span><br></pre></td></tr></table></figure><h4 id="5-2-清理安装包缓存"><a href="#5-2-清理安装包缓存" class="headerlink" title="5.2.清理安装包缓存"></a>5.2.清理安装包缓存</h4><p>Scoop 会保留下载的安装包，对于卸载后又想再安装的情况，不需要重复下载。但长期累积会占用大量的磁盘空间，如果用不到就成了垃圾。这时可以使用 <code>scoop cache</code> 命令来清理。</p><ul><li>  <code>scoop cache show</code> - 显示安装包缓存</li><li>  <code>scoop cache rm &lt;app&gt;</code> - 删除指定应用的安装包缓存</li><li>  <code>scoop cache rm *</code> - 删除所有的安装包缓存</li></ul><p>如果你不希望安装和更新软件时保留安装包缓存，可以加上 <code>-k</code> 或 <code>--no-cache</code> 选项来禁用缓存：(可能会有报错)</p><ul><li>  <code>scoop install -k &lt;app&gt;</code></li><li>  <code>scoop update -k *</code></li></ul><h4 id="5-3-删除旧版本软件"><a href="#5-3-删除旧版本软件" class="headerlink" title="5.3.删除旧版本软件"></a>5.3.删除旧版本软件</h4><p>当软件被更新后 Scoop 还会保留软件的旧版本，更新软件后可以通过 <code>scoop cleanup</code> 命令进行删除。</p><ul><li>  <code>scoop cleanup &lt;app&gt;</code> - 删除指定软件的旧版本</li><li>  <code>scoop cleanup *</code> - 删除所有软件的旧版本</li></ul><p>与安装软件一样，删除旧版本软件的同时也可以清理安装包缓存，同样是加上 <code>-k</code> 选项。</p><ul><li>  <code>scoop cleanup -k &lt;app&gt;</code> - 删除指定软件的旧版本并清除安装包缓存</li><li>  <code>scoop cleanup -k *</code> - 删除所有软件的旧版本并清除安装包缓存</li></ul><h4 id="5-4-全局安装-一般用于环境安装"><a href="#5-4-全局安装-一般用于环境安装" class="headerlink" title="5.4.全局安装(一般用于环境安装)"></a>5.4.全局安装(一般用于环境安装)</h4><p>全局安装就是给系统中的所有用户都安装，且环境变量是系统变量，对于需要设置系统变量的一些软件就需要全局安装，比如 Node.js、Python，否则某些情况会出现无法找到命令的问题。</p><p>使用 <code>scoop install &lt;app&gt;</code> 命令加上 <code>-g</code> 或 <code>--global</code> 选项可对软件进行全局安装，全局安装需要管理员权限，所以需要提前以管理员权限运行的 PowerShell 。更简单的方式是先安装 <code>sudo</code>，然后用 <code>sudo</code> 命令来提权执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scoop install sudo</span><br><span class="line">sudo scoop install -g &lt;app&gt;</span><br></pre></td></tr></table></figure><p>使用 <code>scoop list</code> 命令查看已装软件时，全局安装的软件末尾会有 <code>*global*</code> 标志。</p><p>此外对于全局软件的更新和卸载等其它操作，都需要加上 <code>-g</code> 选项：</p><ul><li>  <code>sudo scoop update -g *</code> - 更新所有软件（且包含全局软件）</li><li>  <code>sudo scoop uninstall -g &lt;app&gt;</code> - 卸载全局软件</li><li>  <code>sudo scoop uninstall -gp &lt;app&gt;</code> - 卸载全局软件（并删除配置文件）</li><li>  <code>sudo scoop cleanup -g *</code> - 删除所有全局软件的旧版本</li><li>  <code>sudo scoop cleanup -gk *</code> - 删除所有全局软件的旧版本（并清除安装包包缓存）</li></ul><h4 id="5-5-代理设置"><a href="#5-5-代理设置" class="headerlink" title="5.5.代理设置"></a>5.5.代理设置</h4><p>Scoop 默认使用系统代理，手动指定代理，可以输入下面的命令。需要注意的是只支持 http 协议。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop config proxy localhost:端口号</span><br></pre></td></tr></table></figure><blockquote><p>设置完可以通过<code>scoop config proxy</code>查看。</p></blockquote><p>如果你想取消代理，那么输入下面的命令，这将会恢复使用系统代理。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop config rm proxy</span><br></pre></td></tr></table></figure><h4 id="5-6-常用命令总结"><a href="#5-6-常用命令总结" class="headerlink" title="5.6.常用命令总结"></a>5.6.常用命令总结</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 安装软件 ##</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 非全局安装（并禁止安装包缓存）</span></span><br><span class="line">scoop install -k &lt;app&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 全局安装（并禁止安装包缓存）</span></span><br><span class="line">sudo scoop install -gk &lt;app&gt;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 卸载软件 ##</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 卸载非全局软件（并删除配置文件）</span></span><br><span class="line">scoop uninstall -p &lt;app&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 卸载全局软件（并删除配置文件）</span></span><br><span class="line">sudo scoop uninstall -gp &lt;app&gt;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 更新软件 ##</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新所有非全局软件（并禁止安装包缓存）</span></span><br><span class="line">scoop update -k *</span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新所有软件（并禁止安装包缓存）</span></span><br><span class="line">sudo scoop update -gk *</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 垃圾清理 ##</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除所有旧版本非全局软件（并删除软件包缓存）</span></span><br><span class="line">scoop cleanup -k *</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除所有旧版本软件（并删除软件包缓存）</span></span><br><span class="line">sudo scoop cleanup -gk *</span><br><span class="line"><span class="meta">#</span><span class="bash"> 清除软件包缓存</span></span><br><span class="line">scoop cache rm *</span><br></pre></td></tr></table></figure><h4 id="5-7-重装系统后如何恢复使用Scoop"><a href="#5-7-重装系统后如何恢复使用Scoop" class="headerlink" title="5.7.重装系统后如何恢复使用Scoop"></a>5.7.重装系统后如何恢复使用Scoop</h4><p>重装系统之后, 如果把原有的scoop文件夹粘贴回去user文件夹,然后在<code>powershell</code>中再次输入安装命令,会得到一个<strong>Scoop is already installed</strong>错误,要想正确恢复scoop,根据<a href="https://github.com/lukesampson/scoop/issues/2894">官方回答</a>,请按照以下步骤:</p><ol><li><p>重装系统之前,先完整复制用户目录下的scoop文件夹到别的地方</p></li><li><p>重装系统之后,将scoop文件夹粘贴回去用户目录</p></li><li><p>在环境变量设置中,新建一个用户变量,名字为SCOOP,值为当前scoop文件夹的地址,即:<br><code>C:\Users\xxxx\scoop</code></p></li><li><p>允许脚本执行:<br><code>set-executionpolicy remotesigned -s currentuser</code></p></li><li><p>双击用户变量中的path,新建一个路径,填入 :<br><code>%SCOOP%\shims</code></p></li><li><p>管理员权限powershell中运行:<br><code>scoop reset *</code></p></li></ol><p>即可恢复所有软件的正常使用.</p><h3 id="6-尾巴"><a href="#6-尾巴" class="headerlink" title="6.尾巴"></a>6.尾巴</h3><ul><li><a href="https://scoop.netlify.app/">Scoop</a></li><li><a href="https://github.com/lukesampson/scoop/wiki">Home · lukesampson/scoop Wiki · GitHub</a></li></ul><hr><h2 id="Chocolatey"><a href="#Chocolatey" class="headerlink" title="Chocolatey"></a>Chocolatey</h2><h3 id="1-关于Chocolatey"><a href="#1-关于Chocolatey" class="headerlink" title="1.关于Chocolatey"></a>1.关于Chocolatey</h3><p><a href="https://chocolatey.org/">Chocolatey</a>是Windows平台上的包管理器，通过它可以集中安装、管理、更新各种各样的软件。类似<a href="https://github.com/lukesampson/scoop">Scoop</a>，相比而言Scoop对环境的污染较小（软件都安装在<code>C:\Users\xxx\scoop\apps</code>下），Chocolatey安装的包会在默认路径下，也就是<code>C:\Program Files</code>目录下。故将Chocolatey作为备选项。</p><h3 id="2-Chocolatey的安装-建议使用PowerShell"><a href="#2-Chocolatey的安装-建议使用PowerShell" class="headerlink" title="2.Chocolatey的安装(建议使用PowerShell)"></a>2.Chocolatey的安装(建议使用PowerShell)</h3><p>考虑到这篇文章的信息会过时，安装的详细信息可依照<a href="https://chocolatey.org/install">官方指示</a>。</p><ul><li>cmd(管理员权限运行)</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@”%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe” -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command “iex ((New-Object System.Net.WebClient).DownloadString(‘https://chocolatey.org/install.ps1’))” &amp;&amp; SET “PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin”</span><br></pre></td></tr></table></figure><ul><li>Windows PowerShell(管理员权限运行)</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(&#x27;https://community.chocolatey.org/install.ps1&#x27;))</span><br></pre></td></tr></table></figure><ul><li>执行<code>choco</code>查看是否安装成功</li></ul><h3 id="3-常用命令"><a href="#3-常用命令" class="headerlink" title="3.常用命令"></a>3.常用命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#安装包</span></span></span><br><span class="line">choco install &lt;package&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash">如果使用 -version 可以指定版本</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#查看安装的包</span></span></span><br><span class="line">choco list -l</span><br><span class="line">choco list -local-only</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#包的更新，包括chocolatey本身</span></span></span><br><span class="line">choco upgrade &lt;packagename&gt; or all</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#包的卸载</span></span></span><br><span class="line">choco uninstall &lt;packagename&gt;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#包的搜索(可在官网先搜索(https://community.chocolatey.org/packages))</span></span></span><br><span class="line">choco search &lt;packagename&gt;</span><br></pre></td></tr></table></figure><h3 id="4-尾巴"><a href="#4-尾巴" class="headerlink" title="4.尾巴"></a>4.尾巴</h3><p>  国内建议使用Scoop（限速），Chocolatey已无法访问，若使用黑科技，可两者结合使用。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于我思故我在</title>
      <link href="/posts/f729cd9d.html"/>
      <url>/posts/f729cd9d.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Je pense, donc je suis<br>-René Descartes</p></blockquote><h3 id="1-什么是我思故我在"><a href="#1-什么是我思故我在" class="headerlink" title="1.什么是我思故我在"></a>1.什么是我思故我在</h3><p>著名哲学家笛卡尔提出了一个广为人知的命题：“<a href="https://baike.baidu.com/item/%E6%88%91%E6%80%9D%E6%95%85%E6%88%91%E5%9C%A8/341083">我思故我在</a>”，而他提出这句命题的目的，是在对一切事物（过往、现成的理论体系乃至思维前提）进行普遍怀疑的基础上，探寻那个无法被怀疑的根本依据和基本前提。</p><p>笛卡尔这句话最普遍的解释：“我唯一可以确定的事就是我自己思想的存在,因为当我怀疑其他时，我无法同时怀疑我本身的思想”。比较权威的一种解释是：“我无法否认自己的存在，因为当我否认、怀疑时，我就已经存在。”因为我在思考在怀疑的时候，肯定有一个执行“思考”的“思考者”，这个作为主体的“我”是不容怀疑的，这个我并非广延的肉体的“我”，而是思维者的我。所以，否认自己的存在是自相矛盾的。</p><h3 id="2-理解的局限"><a href="#2-理解的局限" class="headerlink" title="2.理解的局限"></a>2.理解的局限</h3><p>“我思故我在”作为启迪智慧的著名思想命题，在我国高中政治教科书内被视为“主观唯心主义”的观点之一，也被某些唯物论者长期批判。其实有很重要的一点，许多人或许没有意识到，那就是：<strong>学习哲学的过程中，不要先存以马克思主义的见解而去看待评价哲学史上的一切哲学。</strong></p><p>哲学更多的是以理论的方式进行表征的时代精神的精华，以理性批判著称的文明活的灵魂。科学性、革命性、批判性不仅仅是马克思主义哲学的特征，也是作为思想武器和理论工具的一切进步哲学所具备的典型特征。可以通过辩证的眼光，以马克思主义哲学中的合理内核和精华部分作为研究方法，去进行哲学理论的研究和批判。或许只有将其正确地灵活运用于实践活动中，才能使其焕发出该有的生机。</p><h3 id="3-存在"><a href="#3-存在" class="headerlink" title="3.存在"></a>3.存在</h3><p>我思故我在实际上是一个深刻的思想实验得到的结果。这个实验的起源是一个问题：这个世界上哪些东西是客观存在的，哪些东西是虚假的幻境？笛卡尔假设世界上有一个魔鬼，可以欺骗我们的感觉，在我们眼前制造实际不存在的幻境（可参照<a href="https://baike.baidu.com/item/%E9%BB%91%E5%AE%A2%E5%B8%9D%E5%9B%BD/34564">黑客帝国</a>理解）。</p><p>那么我们如何才能辨别这个世界上哪些东西是真实的，哪些东西是魔鬼制造的幻觉？思考的结果是，我们所看到的，听到的，感觉到的一切东西，都有可能是魔鬼制作的幻觉，是不存在的假象。甚至我们的身体，也有可能不是真实的。唯一能确定真实存在的，只有一个：那就是“我”的思想，因为“我的思想”是这个思维实验的实施者，而这个思维实验已经进行了，所以“我的思想”必然是真实存在的。这个思想实验是笛卡尔的认识论的基础，也构成了现代哲学的基石。</p><p>黑客帝国，攻壳机动队，盗梦空间，穆赫兰道等，没有笛卡尔或许也不会有这一类电影。</p><h3 id="4-尾巴"><a href="#4-尾巴" class="headerlink" title="4.尾巴"></a>4.尾巴</h3><p><a href="https://baike.baidu.com/item/%E8%B4%B9%E7%B1%B3%E6%82%96%E8%AE%BA/10937023">费米悖论</a>的一种可能性：</p><blockquote><p>我们对于现实的理解是完全错误的。有很多种可能性导致我们对于所有一切的想法都是错的。宇宙可能只是个投影，或者我们就是外星人，而只是被投放在地球做实验小白鼠的。甚至我们和黑客帝国里面一样，只是活在电脑的模拟现实中，而程序员忘了写其它物种的代码。</p></blockquote><p>个人浅见仅供参考。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
